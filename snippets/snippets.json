{
	"start": {
		"prefix": "start",
		"description": "This function will be called once when a map is loaded, before the game starts running. If you need to load or initialize anything, this is the place to do it.",
        "body": [
            "function Script:Start()",
            "	$0",
            "end"
        ]
	},
	"updateworld": {
		"prefix": "updateworld",
		"description": "This function is called once per frame, we already have seen. Use this for anything that needs to be regularly updated.",
        "body": [
            "function Script:UpdateWorld()",
            "	$0",
            "end"
        ]
	},
	"updatephysics": {
		"prefix": "updatephysics",
		"description": "This function is called at a constant rate of 60 times per second, and is independent from framerate. Although it is called by the engine in the World::Update function, this may be called several times per frame, or it may be skipped some frames, depending on how fast your game is running.",
        "body": [
            "function Script:UpdatePhysics()",
            "	$0",
            "end"
        ]
	},
	"collision": {
		"prefix": "collision",
		"description": "This function will be called whenever an object bumps into something else. You can use this to make a missile explode on impact, or make a sound play when an object falls.",
        "body": [
            "function Script:Collision(entity0,entity1,position,normal,speed)",
            "	$0",
            "end"
        ]
	},
	"PostRender": {
		"prefix": "postrender",
		"description": "This function will be called after rendering. Use this for any 2D drawing you want to add, like a GUI or a message on the screen.",
        "body": [
            "function Script:PostRender(context)",
            "	$0",
            "end"
        ]
	},
	"propstring": {
		"prefix": "propstring",
		"description": "Displays an editable text field.",
        "body": [
            "Script.$1 = \"$2\" --string \"$3\"",
			"$0"	
        ]
	},
	"propint": {
		"prefix": "propint",
		"description": "Displays an integer number spinner.",
        "body": [
            "Script.$1 = $2 --int \"$3\"",
			"$0"	
        ]
	},
	"propfloat": {
		"prefix": "propfloat",
		"description": "Displays a decimal number spinner.",
        "body": [
            "Script.$1 = $2 --float \"$3\"",
			"$0"	
        ]
	},
	"propbool": {
		"prefix": "propbool",
		"description": "Displays a checkbox.",
        "body": [
            "Script.$1 = ${2|true,false|} --bool \"$3\"",
			"$0"	
        ]
	},
	"propvec2": {
		"prefix": "propvec2",
		"description": "Displays a two-dimensional number spinner",
        "body": [
            "Script.$1 = Vec2($2, $3) --vec2 \"$4\"",
			"$0"	
        ]
	},
	"propvec3": {
		"prefix": "propvec3",
		"description": "Displays a three-dimensional number spinner",
        "body": [
            "Script.$1 = Vec3($2, $3, $4) --vec3 \"$5\"",
			"$0"	
        ]
	},
	"propvec4": {
		"prefix": "propvec4",
		"description": "Displays a two-dimensional number spinner.",
        "body": [
            "Script.$1 = Vec4($2, $3, $4, $5) --vec4 \"$6\"",
			"$0"	
        ]
	},
	"propcolor": {
		"prefix": "propcolor",
		"description": "Displays a color editor.",
        "body": [
            "Script.$1 = Vec4($2, $3, $4, $5) --color \"$6\"",
			"$0"	
        ]
	},
	"proppos": {
		"prefix": "proppos",
		"description": "Displays a three-dimensional number spinner using current grid units.",
        "body": [
            "Script.$1 = Vec4($2, $3, $4) --pos \"$5\"",
			"$0"	
        ]
	},
	"propentity": {
		"prefix": "propentity",
		"description": "Displays a field that can accept another object in the scene.",
        "body": [
            "Script.$1 = $2 --entity \"$3\"",
			"$0"	
        ]
	},
	"proppath": {
		"prefix": "proppath",
		"description": "Displays a file path field. [Filters]",
        "body": [
            "Script.$1 = $2 --path \"$3\"",
			"$0"	
        ]
	},
	"propchoice": {
		"prefix": "propchoice",
		"description": "Displays a drop-down list. The value is converted to a number. Separate values using a comma ','.",
        "body": [
            "Script.$1 = $2 --choice \"$3\" \"$4,\"",
			"$0"	
        ]
	},
	"propchoiceedit": {
		"prefix": "propchoiceedit",
		"description": "Displays an editable drop-down list.  The value is converted to a string. Separate values using a comma ','",
        "body": [
            "Script.$1 = $2 --choiceedit \"$3\" \"$4,\" ",
			"$0"	
        ]
	},

	"class": {
		"prefix": "class",
		"body": [
			"$myClass = {}",
			"",
			"--Creates a new instance of $myClass ",
			"function $myClass:create(value)",
			"   local obj = {}",
			"",
			"   obj.testVariable = 10",
			"",
			"   for k,v in pairs($myClass) do",
			"      obj[k] = v",
			"   end",
			"",
			"   return obj",
			"end",
			"",
			"function $myClass:Set(value)",
			"   self.testVariable = value",
			"end",
			"",
			"function $myClass:Get()",
			"   return self.testVariable",
			"end",
			"",
			"function $myClass:DoSomething()",
			"   System:Print(\"I am a function of this class.\")",
			"end"
		],
		"description": "Inserts a basic class that contains functions and variables."
	},
	"print": {
		"prefix": "print",
		"body": "System:Print(\"$0\")",
		"description": "Print something to the console."
	},
	"tableinsert ": {
		"prefix": "table.insert",
		"body": "table.insert($table, $value)",
		"description": "Inserts a value into a table at the end of the table."
	},
	"tableinsert ": {
		"prefix": "table.insert",
		"body": "table.insert($table, $position, $value)",
		"description": "Inserts a value into a table at the given position."
	},
	"if": {
		"prefix": "if",
		"body": [
			"if $value then"
			"	$0",
			"end"
		],
		"description": "Inserts an if statement."
	},
	"for": {
		"prefix": "for",
		"body": [
			"for $index = $indexStartValue, $valueToReach do"
			"	$0",
			"end"
		],
		"description": "Inserts a for loop."
	},
	"for ": {
		"prefix": "for",
		"body": [
			"for $index = $indexStartValue, $valueToReach, $incrementValue do"
			"	$0",
			"end"
		],
		"description": "Inserts a for loop with incrementer."
	},
	"pairs": {
		"prefix": "pairs",
		"body": [
			"for $key, $value in pairs($myTable) do"
			"	$0",
			"end"
		],
		"description": "Iterate over a table sorted alphabetically. For instance: Apple, Orange, Pear"
	},
	"ipairs iteration": {
		"prefix": "ipairs",
		"body": [
			"for $key, $value in ipairs($myTable) do"
			"	$0",
			"end"
		],
		"description": "Iterate over a table sequentially. For instance index 1, 2, 3"
	},
	"Function Declaration": {
		"prefix": "function",
		"body": [
			"function $FuntionName() do"
			"	$0",
			"end"
		],
		"description": "Declares a function."
	},
	"function ": {
		"prefix": "function",
		"body": [
			"function Script:$FuntionName() do"
			"	$0",
			"end"
		],
		"description": "Creates a function that belongs to the script instance for an entity."
	},
	"function  ": {
		"prefix": "function",
		"body": [
			"function $Object:$FuntionName() do"
			"	$0",
			"end"
		],
		"description": "Creates a function that belongs to a custom object."
	},

	"lescript": {
		"prefix": "lescripts",
		"body": [
			"--[[",
			"--This function is called when the scene is started.",
			"function Script:Start()",
			""	,
			"end",
			"]]",
			"",
			"--[[",
			"--This function is called every update of the game loop.",			
			"function Script:UpdateWorld()",
			"",
			"end",
			"]]",
			"",
			"--[[",
			"--This function updates physics and is allways called 60 times per second.",		
			"function Script:UpdatePhysics()",
			"",
			"end",
			"]]",
			"",
			"--[[",
			"--This can be used to select which objects an entity collides with. This overrides collision types completely.",
			"function Script:Overlap(e)",
			"	return Collision:Collide",
			"end",
			"]]",
			"",
			"--[[",
			"function Script:Collision(entity, position, normal, speed)",
			"",
			"end",
			"]]",
			"",
			"--[[",
			"function Script:Draw()",
			"",
			"end",
			"]]",
			"",
			"--[[",
			"function Script:DrawEach(camera)",
			"",
			"end",
			"]]",
			"",
			"--[[",
			"--This function will be called after the world is rendered, before the screen is refreshed.",
			"--Use this to perform any 2D drawing you want the entity to display.",
			"function Script:PostRender(context)",
			"",
			"end",
			"]]",
			"",
			"--[[",
			"--This function will be called when the entity is deleted.",
			"function Script:Detach()",
			"",
			"end",
			"]]",
			"",
			"--[[",
			"--This function will be called when the last instance of this script is deleted.",
			"function Script:Cleanup()",
			"",
			"end",
			"]]",
			""
		],
		"description": "Creates a function that belongs to a custom object."
	}	

}
