{
    "Analytics:SendGenericEvent": {
        "prefix": "Analytics:SendGenericEvent",
        "description": "This function queues a user-defined event. You can include an optional numerical value.",
        "body": [
            "bool SendGenericEvent($eventid)"
        ]
    },
    "SendGenericEvent": {
        "prefix": "SendGenericEvent",
        "description": "This function queues a user-defined event. You can include an optional numerical value.",
        "body": [
            "bool SendGenericEvent($eventid)"
        ]
    },
    "Analytics:SendGenericEvent ": {
        "prefix": "Analytics:SendGenericEvent ",
        "description": "This function queues a user-defined event. You can include an optional numerical value.",
        "body": [
            "bool SendGenericEvent($eventid, $value)"
        ]
    },
    "SendGenericEvent ": {
        "prefix": "SendGenericEvent ",
        "description": "This function queues a user-defined event. You can include an optional numerical value.",
        "body": [
            "bool SendGenericEvent($eventid, $value)"
        ]
    },
    "Analytics:SendProgressEvent": {
        "prefix": "Analytics:SendProgressEvent",
        "description": "This function can be used to send a progression event to see how many users can make it through your game levels. By default, the main lua script includes code to manage these events.",
        "body": [
            "static bool SendProgressEvent($status, $levelname)"
        ]
    },
    "SendProgressEvent": {
        "prefix": "SendProgressEvent",
        "description": "This function can be used to send a progression event to see how many users can make it through your game levels. By default, the main lua script includes code to manage these events.",
        "body": [
            "static bool SendProgressEvent($status, $levelname)"
        ]
    },
    "Analytics:SendProgressEvent ": {
        "prefix": "Analytics:SendProgressEvent ",
        "description": "This function can be used to send a progression event to see how many users can make it through your game levels. By default, the main lua script includes code to manage these events.",
        "body": [
            "static bool SendProgressEvent($status, $levelname, $score)"
        ]
    },
    "SendProgressEvent ": {
        "prefix": "SendProgressEvent ",
        "description": "This function can be used to send a progression event to see how many users can make it through your game levels. By default, the main lua script includes code to manage these events.",
        "body": [
            "static bool SendProgressEvent($status, $levelname, $score)"
        ]
    },
    "Analytics:SendProgressEvent  ": {
        "prefix": "Analytics:SendProgressEvent  ",
        "description": "This function can be used to send a progression event to see how many users can make it through your game levels. By default, the main lua script includes code to manage these events.",
        "body": [
            "static bool SendProgressEvent($status, $levelname, $score, $attempt_num)"
        ]
    },
    "SendProgressEvent  ": {
        "prefix": "SendProgressEvent  ",
        "description": "This function can be used to send a progression event to see how many users can make it through your game levels. By default, the main lua script includes code to manage these events.",
        "body": [
            "static bool SendProgressEvent($status, $levelname, $score, $attempt_num)"
        ]
    },
    "Analytics:SetKeys": {
        "prefix": "Analytics:SetKeys",
        "description": "This function must be called before Analytics::Enable(). You can obtain your game key and secret key by creating an account at <a target='newwindow' href='http://www.GameAnalytics.com'>http://www.gameanalytics.com</a>",
        "body": [
            "SetKeys($gamekey, $secretkey)"
        ]
    },
    "SetKeys": {
        "prefix": "SetKeys",
        "description": "This function must be called before Analytics::Enable(). You can obtain your game key and secret key by creating an account at <a target='newwindow' href='http://www.GameAnalytics.com'>http://www.gameanalytics.com</a>",
        "body": [
            "SetKeys($gamekey, $secretkey)"
        ]
    },
    "Font:GetTextWidth": {
        "prefix": "Font:GetTextWidth",
        "description": "Returns the width of a line of text when drawn with this font. Use this to center text or calculate background dimensions.",
        "body": [
            "number GetTextWidth($text)"
        ]
    },
    "GetTextWidth": {
        "prefix": "GetTextWidth",
        "description": "Returns the width of a line of text when drawn with this font. Use this to center text or calculate background dimensions.",
        "body": [
            "number GetTextWidth($text)"
        ]
    },
    "Font:Load": {
        "prefix": "Font:Load",
        "description": "Loads a font from a True-Type Font (.ttf) file.",
        "body": [
            "Font Load($path, $size, $style, $family, $flags)"
        ]
    },
    "Load": {
        "prefix": "Load",
        "description": "Loads a font from a True-Type Font (.ttf) file.",
        "body": [
            "Font Load($path, $size, $style, $family, $flags)"
        ]
    },
    "Material:GetColor": {
        "prefix": "Material:GetColor",
        "description": "This functions gets the material color. \r\n - mode: the color to get. This can be Draw::DiffuseColor or Draw::SpecularColor.",
        "body": [
            "Vec4 GetColor($mode)"
        ]
    },
    "GetColor": {
        "prefix": "GetColor",
        "description": "This functions gets the material color. \r\n - mode: the color to get. This can be Draw::DiffuseColor or Draw::SpecularColor.",
        "body": [
            "Vec4 GetColor($mode)"
        ]
    },
    "Material:Load": {
        "prefix": "Material:Load",
        "description": "This function loads a material from a material (*.mat) file.",
        "body": [
            "Material Load($path, $flags)"
        ]
    },
    "Load ": {
        "prefix": "Load ",
        "description": "This function loads a material from a material (*.mat) file.",
        "body": [
            "Material Load($path, $flags)"
        ]
    },
    "Material:SetBlendMode": {
        "prefix": "Material:SetBlendMode",
        "description": "Sets the blend mode of the material. \r\n - mode: the material blend mode. This may be one of the following values:            Blend::Solid            Blend::Alpha            Blend::Shade            Blend::Light            Blend::Mod2X",
        "body": [
            "SetBlendMode($mode)"
        ]
    },
    "SetBlendMode": {
        "prefix": "SetBlendMode",
        "description": "Sets the blend mode of the material. \r\n - mode: the material blend mode. This may be one of the following values:            Blend::Solid            Blend::Alpha            Blend::Shade            Blend::Light            Blend::Mod2X",
        "body": [
            "SetBlendMode($mode)"
        ]
    },
    "Material:SetColor": {
        "prefix": "Material:SetColor",
        "description": "Sets the material color. \r\n - r: the red component of the RGBA color. \r\n - g: the green component of the RGBA color. \r\n - b: the blue component of the RGBA color. \r\n - a: the alpha component of the RGBA color. \r\n - color: the RGBA color to set. \r\n - mode: the color mode. This may be Color::Diffuse or Color::Specular.",
        "body": [
            "SetColor($color, $mode)"
        ]
    },
    "SetColor": {
        "prefix": "SetColor",
        "description": "Sets the material color. \r\n - r: the red component of the RGBA color. \r\n - g: the green component of the RGBA color. \r\n - b: the blue component of the RGBA color. \r\n - a: the alpha component of the RGBA color. \r\n - color: the RGBA color to set. \r\n - mode: the color mode. This may be Color::Diffuse or Color::Specular.",
        "body": [
            "SetColor($color, $mode)"
        ]
    },
    "Material:SetColor ": {
        "prefix": "Material:SetColor ",
        "description": "Sets the material color. \r\n - r: the red component of the RGBA color. \r\n - g: the green component of the RGBA color. \r\n - b: the blue component of the RGBA color. \r\n - a: the alpha component of the RGBA color. \r\n - color: the RGBA color to set. \r\n - mode: the color mode. This may be Color::Diffuse or Color::Specular.",
        "body": [
            "SetColor($r, $g, $b, $a, $mode)"
        ]
    },
    "SetColor ": {
        "prefix": "SetColor ",
        "description": "Sets the material color. \r\n - r: the red component of the RGBA color. \r\n - g: the green component of the RGBA color. \r\n - b: the blue component of the RGBA color. \r\n - a: the alpha component of the RGBA color. \r\n - color: the RGBA color to set. \r\n - mode: the color mode. This may be Color::Diffuse or Color::Specular.",
        "body": [
            "SetColor($r, $g, $b, $a, $mode)"
        ]
    },
    "Material:SetColor  ": {
        "prefix": "Material:SetColor  ",
        "description": "Sets the material color. \r\n - r: the red component of the RGBA color. \r\n - g: the green component of the RGBA color. \r\n - b: the blue component of the RGBA color. \r\n - a: the alpha component of the RGBA color. \r\n - color: the RGBA color to set. \r\n - mode: the color mode. This may be Color::Diffuse or Color::Specular.",
        "body": [
            "SetColor($r, $g, $b)"
        ]
    },
    "SetColor  ": {
        "prefix": "SetColor  ",
        "description": "Sets the material color. \r\n - r: the red component of the RGBA color. \r\n - g: the green component of the RGBA color. \r\n - b: the blue component of the RGBA color. \r\n - a: the alpha component of the RGBA color. \r\n - color: the RGBA color to set. \r\n - mode: the color mode. This may be Color::Diffuse or Color::Specular.",
        "body": [
            "SetColor($r, $g, $b)"
        ]
    },
    "Material:SetShader": {
        "prefix": "Material:SetShader",
        "description": "This function sets the material shader. If the shader is not NULL, this function will increment the shader reference count. If the previously set shader is not NULL, this function will decrement the previously set shader's reference count.",
        "body": [
            "SetShader($shader)"
        ]
    },
    "SetShader": {
        "prefix": "SetShader",
        "description": "This function sets the material shader. If the shader is not NULL, this function will increment the shader reference count. If the previously set shader is not NULL, this function will decrement the previously set shader's reference count.",
        "body": [
            "SetShader($shader)"
        ]
    },
    "Material:SetShadowMode": {
        "prefix": "Material:SetShadowMode",
        "description": "This function sets the material shadow mode. \r\n - mode: set this to true to enable shadow casting, otherwise use false.",
        "body": [
            "SetShadowMode($mode)"
        ]
    },
    "SetShadowMode": {
        "prefix": "SetShadowMode",
        "description": "This function sets the material shadow mode. \r\n - mode: set this to true to enable shadow casting, otherwise use false.",
        "body": [
            "SetShadowMode($mode)"
        ]
    },
    "Material:SetSortMode": {
        "prefix": "Material:SetSortMode",
        "description": "This function sets the material sort mode. Most materials with a blend mode other than Blend::Solid should use sorting to draw surfaces back to front. \r\n - mode: set this to true to enable sorting, otherwise use false.",
        "body": [
            "SetSortMode($mode)"
        ]
    },
    "SetSortMode": {
        "prefix": "SetSortMode",
        "description": "This function sets the material sort mode. Most materials with a blend mode other than Blend::Solid should use sorting to draw surfaces back to front. \r\n - mode: set this to true to enable sorting, otherwise use false.",
        "body": [
            "SetSortMode($mode)"
        ]
    },
    "Material:SetTexture": {
        "prefix": "Material:SetTexture",
        "description": "This function sets the material texture. If the texture is not NULL, this function will increment the texture reference count. If the previously set texture is not NULL, this function will decrement the previously set texture's reference count. \r\n - index: the material texture index to set. This parameter may be NULL.",
        "body": [
            "SetTexture($texture, $index)"
        ]
    },
    "SetTexture": {
        "prefix": "SetTexture",
        "description": "This function sets the material texture. If the texture is not NULL, this function will increment the texture reference count. If the previously set texture is not NULL, this function will decrement the previously set texture's reference count. \r\n - index: the material texture index to set. This parameter may be NULL.",
        "body": [
            "SetTexture($texture, $index)"
        ]
    },
    "Shader:Compile": {
        "prefix": "Shader:Compile",
        "description": "This function will compile a shader.",
        "body": [
            "bool Compile($sourceid)"
        ]
    },
    "Compile": {
        "prefix": "Compile",
        "description": "This function will compile a shader.",
        "body": [
            "bool Compile($sourceid)"
        ]
    },
    "Shader:GetFloat": {
        "prefix": "Shader:GetFloat",
        "description": "This function gets the value of a float uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "number GetFloat($name)"
        ]
    },
    "GetFloat": {
        "prefix": "GetFloat",
        "description": "This function gets the value of a float uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "number GetFloat($name)"
        ]
    },
    "Shader:GetInt": {
        "prefix": "Shader:GetInt",
        "description": "This function gets the value of an integer uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "number GetInt($name)"
        ]
    },
    "GetInt": {
        "prefix": "GetInt",
        "description": "This function gets the value of an integer uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "number GetInt($name)"
        ]
    },
    "Shader:GetMat3": {
        "prefix": "Shader:GetMat3",
        "description": "This function gets the value of a Mat3 uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "Mat3 GetMat3($name)"
        ]
    },
    "GetMat3": {
        "prefix": "GetMat3",
        "description": "This function gets the value of a Mat3 uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "Mat3 GetMat3($name)"
        ]
    },
    "Shader:GetMat4": {
        "prefix": "Shader:GetMat4",
        "description": "This function gets the value of a Mat4 uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "Mat4 GetMat4($name)"
        ]
    },
    "GetMat4": {
        "prefix": "GetMat4",
        "description": "This function gets the value of a Mat4 uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "Mat4 GetMat4($name)"
        ]
    },
    "Shader:GetVec2": {
        "prefix": "Shader:GetVec2",
        "description": "This function gets the value of a Vec2 uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "Vec2 GetVec2($name)"
        ]
    },
    "GetVec2": {
        "prefix": "GetVec2",
        "description": "This function gets the value of a Vec2 uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "Vec2 GetVec2($name)"
        ]
    },
    "Shader:GetVec3": {
        "prefix": "Shader:GetVec3",
        "description": "This function gets the value of a Vec3 uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "Vec3 GetVec3($name)"
        ]
    },
    "GetVec3": {
        "prefix": "GetVec3",
        "description": "This function gets the value of a Vec3 uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "Vec3 GetVec3($name)"
        ]
    },
    "Shader:GetVec4": {
        "prefix": "Shader:GetVec4",
        "description": "This function gets the value of a Vec4 uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "Vec4 GetVec4($name)"
        ]
    },
    "GetVec4": {
        "prefix": "GetVec4",
        "description": "This function gets the value of a Vec4 uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "Vec4 GetVec4($name)"
        ]
    },
    "Shader:SetFloat": {
        "prefix": "Shader:SetFloat",
        "description": "This function sets a float uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "bool SetFloat($name, $f)"
        ]
    },
    "SetFloat": {
        "prefix": "SetFloat",
        "description": "This function sets a float uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "bool SetFloat($name, $f)"
        ]
    },
    "Shader:SetFloat ": {
        "prefix": "Shader:SetFloat ",
        "description": "This function sets a float uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "bool SetFloat($name, $f, $count)"
        ]
    },
    "SetFloat ": {
        "prefix": "SetFloat ",
        "description": "This function sets a float uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "bool SetFloat($name, $f, $count)"
        ]
    },
    "Shader:SetInt": {
        "prefix": "Shader:SetInt",
        "description": "This function sets an integer uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "bool SetInt($name, $i)"
        ]
    },
    "SetInt": {
        "prefix": "SetInt",
        "description": "This function sets an integer uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "bool SetInt($name, $i)"
        ]
    },
    "Shader:SetInt ": {
        "prefix": "Shader:SetInt ",
        "description": "This function sets an integer uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "bool SetInt($name, $i, $count))"
        ]
    },
    "SetInt ": {
        "prefix": "SetInt ",
        "description": "This function sets an integer uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "bool SetInt($name, $i, $count))"
        ]
    },
    "Shader:SetMat3": {
        "prefix": "Shader:SetMat3",
        "description": "This function sets a Mat3 uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "bool SetMat3($name, $m)"
        ]
    },
    "SetMat3": {
        "prefix": "SetMat3",
        "description": "This function sets a Mat3 uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "bool SetMat3($name, $m)"
        ]
    },
    "Shader:SetMat4": {
        "prefix": "Shader:SetMat4",
        "description": "This function sets a Mat4 uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "bool SetMat4($name, $m)"
        ]
    },
    "SetMat4": {
        "prefix": "SetMat4",
        "description": "This function sets a Mat4 uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "bool SetMat4($name, $m)"
        ]
    },
    "Shader:SetVec2": {
        "prefix": "Shader:SetVec2",
        "description": "This function sets a Vec2 uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "bool SetVec2($name, $v)"
        ]
    },
    "SetVec2": {
        "prefix": "SetVec2",
        "description": "This function sets a Vec2 uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "bool SetVec2($name, $v)"
        ]
    },
    "Shader:SetVec2 ": {
        "prefix": "Shader:SetVec2 ",
        "description": "This function sets a Vec2 uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "bool SetVec2($name, $v, $count)"
        ]
    },
    "SetVec2 ": {
        "prefix": "SetVec2 ",
        "description": "This function sets a Vec2 uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "bool SetVec2($name, $v, $count)"
        ]
    },
    "Shader:SetVec3": {
        "prefix": "Shader:SetVec3",
        "description": "This function sets a Vec3 uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "bool SetVec3($name, $v)"
        ]
    },
    "SetVec3": {
        "prefix": "SetVec3",
        "description": "This function sets a Vec3 uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "bool SetVec3($name, $v)"
        ]
    },
    "Shader:SetVec3 ": {
        "prefix": "Shader:SetVec3 ",
        "description": "This function sets a Vec3 uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "bool SetVec3($name, $v, $count)"
        ]
    },
    "SetVec3 ": {
        "prefix": "SetVec3 ",
        "description": "This function sets a Vec3 uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "bool SetVec3($name, $v, $count)"
        ]
    },
    "Shader:SetVec4": {
        "prefix": "Shader:SetVec4",
        "description": "This function sets a Vec4 uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "bool SetVec4($name, $v)"
        ]
    },
    "SetVec4": {
        "prefix": "SetVec4",
        "description": "This function sets a Vec4 uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "bool SetVec4($name, $v)"
        ]
    },
    "Shader:SetVec4 ": {
        "prefix": "Shader:SetVec4 ",
        "description": "This function sets a Vec4 uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "bool SetVec4($name, $v, $count)"
        ]
    },
    "SetVec4 ": {
        "prefix": "SetVec4 ",
        "description": "This function sets a Vec4 uniform. \r\n - name: the name of the shader uniform.",
        "body": [
            "bool SetVec4($name, $v, $count)"
        ]
    },
    "Shape:Box": {
        "prefix": "Shape:Box",
        "description": "This function creates s new box shape. \r\n - x: x offset of the shape. \r\n - Y: y offset of the shape. \r\n - z: z offset of the shape. \r\n - pitch: x rotation of the shape. \r\n - yaw: y rotation of the shape. \r\n - roll: z rotation of the shape.",
        "body": [
            "Shape Box($x, $y, $z, $pitch, $yaw, $roll, $width, $height, $depth)"
        ]
    },
    "Box": {
        "prefix": "Box",
        "description": "This function creates s new box shape. \r\n - x: x offset of the shape. \r\n - Y: y offset of the shape. \r\n - z: z offset of the shape. \r\n - pitch: x rotation of the shape. \r\n - yaw: y rotation of the shape. \r\n - roll: z rotation of the shape.",
        "body": [
            "Shape Box($x, $y, $z, $pitch, $yaw, $roll, $width, $height, $depth)"
        ]
    },
    "Shape:Cone": {
        "prefix": "Shape:Cone",
        "description": "This function creates s new cone shape. \r\n - x: x offset of the shape. \r\n - Y: y offset of the shape. \r\n - z: z offset of the shape. \r\n - pitch: x rotation of the shape. \r\n - yaw: y rotation of the shape. \r\n - roll: z rotation of the shape.",
        "body": [
            "Shape Cone($x, $y, $z, $pitch, $yaw, $roll, $width, $height, $depth)"
        ]
    },
    "Cone": {
        "prefix": "Cone",
        "description": "This function creates s new cone shape. \r\n - x: x offset of the shape. \r\n - Y: y offset of the shape. \r\n - z: z offset of the shape. \r\n - pitch: x rotation of the shape. \r\n - yaw: y rotation of the shape. \r\n - roll: z rotation of the shape.",
        "body": [
            "Shape Cone($x, $y, $z, $pitch, $yaw, $roll, $width, $height, $depth)"
        ]
    },
    "Shape:ConvexHull": {
        "prefix": "Shape:ConvexHull",
        "description": "This function creates s new shape using the convex hull algorithm.",
        "body": [
            "Shape ConvexHull($surface)"
        ]
    },
    "ConvexHull": {
        "prefix": "ConvexHull",
        "description": "This function creates s new shape using the convex hull algorithm.",
        "body": [
            "Shape ConvexHull($surface)"
        ]
    },
    "Shape:Cylinder": {
        "prefix": "Shape:Cylinder",
        "description": "This function creates s new cylinder shape. \r\n - x: x offset of the shape. \r\n - Y: y offset of the shape. \r\n - z: z offset of the shape. \r\n - pitch: x rotation of the shape. \r\n - yaw: y rotation of the shape. \r\n - roll: z rotation of the shape.",
        "body": [
            "Shape Cylinder($x, $y, $z, $pitch, $yaw, $roll, $width, $height, $depth)"
        ]
    },
    "Cylinder": {
        "prefix": "Cylinder",
        "description": "This function creates s new cylinder shape. \r\n - x: x offset of the shape. \r\n - Y: y offset of the shape. \r\n - z: z offset of the shape. \r\n - pitch: x rotation of the shape. \r\n - yaw: y rotation of the shape. \r\n - roll: z rotation of the shape.",
        "body": [
            "Shape Cylinder($x, $y, $z, $pitch, $yaw, $roll, $width, $height, $depth)"
        ]
    },
    "Shape:PolyMesh": {
        "prefix": "Shape:PolyMesh",
        "description": "This function creates s new polymesh shape.",
        "body": [
            "Shape PolyMesh($surface)"
        ]
    },
    "PolyMesh": {
        "prefix": "PolyMesh",
        "description": "This function creates s new polymesh shape.",
        "body": [
            "Shape PolyMesh($surface)"
        ]
    },
    "Shape:Sphere": {
        "prefix": "Shape:Sphere",
        "description": "This function creates s new sphere shape. \r\n - x: x offset of the shape. \r\n - Y: y offset of the shape. \r\n - z: z offset of the shape. \r\n - pitch: x rotation of the shape. \r\n - yaw: y rotation of the shape. \r\n - roll: z rotation of the shape.",
        "body": [
            "Shape Sphere($x, $y, $z, $pitch, $yaw, $roll, $width, $height, $depth)"
        ]
    },
    "Sphere": {
        "prefix": "Sphere",
        "description": "This function creates s new sphere shape. \r\n - x: x offset of the shape. \r\n - Y: y offset of the shape. \r\n - z: z offset of the shape. \r\n - pitch: x rotation of the shape. \r\n - yaw: y rotation of the shape. \r\n - roll: z rotation of the shape.",
        "body": [
            "Shape Sphere($x, $y, $z, $pitch, $yaw, $roll, $width, $height, $depth)"
        ]
    },
    "Sound:Load": {
        "prefix": "Sound:Load",
        "description": "This function loads a sound from a sound (*.wav) file.",
        "body": [
            "Sound Load($path, $flags)"
        ]
    },
    "Load  ": {
        "prefix": "Load  ",
        "description": "This function loads a sound from a sound (*.wav) file.",
        "body": [
            "Sound Load($path, $flags)"
        ]
    },
    "Texture:Bind": {
        "prefix": "Texture:Bind",
        "description": "Binds a texture to a texture slot. The texture can then be read from a shader. \r\n - index: the texture index to use.",
        "body": [
            "Bind($index)"
        ]
    },
    "Bind": {
        "prefix": "Bind",
        "description": "Binds a texture to a texture slot. The texture can then be read from a shader. \r\n - index: the texture index to use.",
        "body": [
            "Bind($index)"
        ]
    },
    "Texture:Create": {
        "prefix": "Texture:Create",
        "description": "This function creates a new texture.",
        "body": [
            "Texture Create($width, $height, $format, $flags, $frames, $samples)"
        ]
    },
    "Create": {
        "prefix": "Create",
        "description": "This function creates a new texture.",
        "body": [
            "Texture Create($width, $height, $format, $flags, $frames, $samples)"
        ]
    },
    "Texture:GetClampMode": {
        "prefix": "Texture:GetClampMode",
        "description": "This function gets the clamp mode of a texture. \r\n - axis: the axis to return the clamp mode for. This can be 0, 1 or 2.",
        "body": [
            "bool GetClampMode($axis)"
        ]
    },
    "GetClampMode": {
        "prefix": "GetClampMode",
        "description": "This function gets the clamp mode of a texture. \r\n - axis: the axis to return the clamp mode for. This can be 0, 1 or 2.",
        "body": [
            "bool GetClampMode($axis)"
        ]
    },
    "Texture:GetHeight": {
        "prefix": "Texture:GetHeight",
        "description": "This function gets the height of a texture.",
        "body": [
            "number GetHeight($miplevel)"
        ]
    },
    "GetHeight": {
        "prefix": "GetHeight",
        "description": "This function gets the height of a texture.",
        "body": [
            "number GetHeight($miplevel)"
        ]
    },
    "Texture:GetMipmapSize": {
        "prefix": "Texture:GetMipmapSize",
        "description": "This function returns the size of a texture mipmap's data. This can be used to ensure a buffer's data size is correct when calling Texture::SetPixels().",
        "body": [
            "number GetMipmapSize($miplevel)"
        ]
    },
    "GetMipmapSize": {
        "prefix": "GetMipmapSize",
        "description": "This function returns the size of a texture mipmap's data. This can be used to ensure a buffer's data size is correct when calling Texture::SetPixels().",
        "body": [
            "number GetMipmapSize($miplevel)"
        ]
    },
    "Texture:GetWidth": {
        "prefix": "Texture:GetWidth",
        "description": "This function gets the width of a texture.",
        "body": [
            "number GetWidth($miplevel)"
        ]
    },
    "GetWidth": {
        "prefix": "GetWidth",
        "description": "This function gets the width of a texture.",
        "body": [
            "number GetWidth($miplevel)"
        ]
    },
    "Texture:Load": {
        "prefix": "Texture:Load",
        "description": "This function loads a texture from a texture (*.tex) file.",
        "body": [
            "Texture Load($path, $flags)"
        ]
    },
    "Load   ": {
        "prefix": "Load   ",
        "description": "This function loads a texture from a texture (*.tex) file.",
        "body": [
            "Texture Load($path, $flags)"
        ]
    },
    "Texture:SetClampMode": {
        "prefix": "Texture:SetClampMode",
        "description": "Sets the clamp mode of a texture. \r\n - x: the x clamp mode to set. \r\n - Y: the y clamp mode to set. \r\n - z: the z clamp mode to set.",
        "body": [
            "SetClampMode($x, $y, $z)"
        ]
    },
    "SetClampMode": {
        "prefix": "SetClampMode",
        "description": "Sets the clamp mode of a texture. \r\n - x: the x clamp mode to set. \r\n - Y: the y clamp mode to set. \r\n - z: the z clamp mode to set.",
        "body": [
            "SetClampMode($x, $y, $z)"
        ]
    },
    "Texture:SetFilter": {
        "prefix": "Texture:SetFilter",
        "description": "Sets the filter mode of a texture.",
        "body": [
            "SetFilter($filtermode)"
        ]
    },
    "SetFilter": {
        "prefix": "SetFilter",
        "description": "Sets the filter mode of a texture.",
        "body": [
            "SetFilter($filtermode)"
        ]
    },
    "Client:Connect": {
        "prefix": "Client:Connect",
        "description": "This function connects to a server with the specified IP address and port. The connection does not complete until a Connected message is received from a call to the Update() function.",
        "body": [
            "Peer Connect($address, $port)"
        ]
    },
    "Connect": {
        "prefix": "Connect",
        "description": "This function connects to a server with the specified IP address and port. The connection does not complete until a Connected message is received from a call to the Update() function.",
        "body": [
            "Peer Connect($address, $port)"
        ]
    },
    "Client:Disconnect": {
        "prefix": "Client:Disconnect",
        "description": "This function connects to a server with the specified IP address and port. Unless the force parameter is set to true, the disconnection does not complete until a Disconnected message is received from a call to the Update() function. \r\n - Force: If set to true, the connection will be immediately terminated. This should not be used unless the connection is somehow stuck.",
        "body": [
            "Disconnect($force)"
        ]
    },
    "Disconnect": {
        "prefix": "Disconnect",
        "description": "This function connects to a server with the specified IP address and port. Unless the force parameter is set to true, the disconnection does not complete until a Disconnected message is received from a call to the Update() function. \r\n - Force: If set to true, the connection will be immediately terminated. This should not be used unless the connection is somehow stuck.",
        "body": [
            "Disconnect($force)"
        ]
    },
    "Client:Send": {
        "prefix": "Client:Send",
        "description": "This function sends a message to the connected server.",
        "body": [
            "boolean Send($message, $data, $channel, $flags)"
        ]
    },
    "Send": {
        "prefix": "Send",
        "description": "This function sends a message to the connected server.",
        "body": [
            "boolean Send($message, $data, $channel, $flags)"
        ]
    },
    "Client:Send ": {
        "prefix": "Client:Send ",
        "description": "This function sends a message to the connected server.",
        "body": [
            "boolean Send($message, $text, $channel, $flags)"
        ]
    },
    "Send ": {
        "prefix": "Send ",
        "description": "This function sends a message to the connected server.",
        "body": [
            "boolean Send($message, $text, $channel, $flags)"
        ]
    },
    "Client:Update": {
        "prefix": "Client:Update",
        "description": "This function updates the network connection and checks for new messages. If a message is received, it should be read and then immediately released to free up resources.",
        "body": [
            "Message Update($timeout)"
        ]
    },
    "Update": {
        "prefix": "Update",
        "description": "This function updates the network connection and checks for new messages. If a message is received, it should be read and then immediately released to free up resources.",
        "body": [
            "Message Update($timeout)"
        ]
    },
    "Context:Create": {
        "prefix": "Context:Create",
        "description": "Creates a new graphics context for rendering.",
        "body": [
            "Context Create($window, $multisamplemode)"
        ]
    },
    "Create ": {
        "prefix": "Create ",
        "description": "Creates a new graphics context for rendering.",
        "body": [
            "Context Create($window, $multisamplemode)"
        ]
    },
    "Context:SetCurrent": {
        "prefix": "Context:SetCurrent",
        "description": "This function makes a context the current context for drawing operations.",
        "body": [
            "SetCurrent($context)"
        ]
    },
    "SetCurrent": {
        "prefix": "SetCurrent",
        "description": "This function makes a context the current context for drawing operations.",
        "body": [
            "SetCurrent($context)"
        ]
    },
    "Context:SetRotation": {
        "prefix": "Context:SetRotation",
        "description": "This function sets the current drawing rotation.",
        "body": [
            "SetRotation($rotation)"
        ]
    },
    "SetRotation": {
        "prefix": "SetRotation",
        "description": "This function sets the current drawing rotation.",
        "body": [
            "SetRotation($rotation)"
        ]
    },
    "Context:SetScale": {
        "prefix": "Context:SetScale",
        "description": "This function sets a context's drawing scale. \r\n - x: the x component of the scale to set. \r\n - Y: the y component of the scale to set.",
        "body": [
            "SetScale($x, $y)"
        ]
    },
    "SetScale": {
        "prefix": "SetScale",
        "description": "This function sets a context's drawing scale. \r\n - x: the x component of the scale to set. \r\n - Y: the y component of the scale to set.",
        "body": [
            "SetScale($x, $y)"
        ]
    },
    "Context:SetShader": {
        "prefix": "Context:SetShader",
        "description": "This function sets a context's shader for drawing operations.",
        "body": [
            "SetShader($shader)"
        ]
    },
    "SetShader ": {
        "prefix": "SetShader ",
        "description": "This function sets a context's shader for drawing operations.",
        "body": [
            "SetShader($shader)"
        ]
    },
    "Context:SetTranslation": {
        "prefix": "Context:SetTranslation",
        "description": "This function sets a context's drawing translation. \r\n - x: the x component of the translation to set. \r\n - Y: the y component of the translation to set.",
        "body": [
            "SetTranslation($x, $y)"
        ]
    },
    "SetTranslation": {
        "prefix": "SetTranslation",
        "description": "This function sets a context's drawing translation. \r\n - x: the x component of the translation to set. \r\n - Y: the y component of the translation to set.",
        "body": [
            "SetTranslation($x, $y)"
        ]
    },
    "Context:Sync": {
        "prefix": "Context:Sync",
        "description": "Refreshes the screen. If the optional vwait parameter is set to true, vertical syncing will be enabled, which will lock the screen refresh rate at 60 hertz and prevent screen 'tearing'.",
        "body": [
            "Sync($vwait)"
        ]
    },
    "Sync": {
        "prefix": "Sync",
        "description": "Refreshes the screen. If the optional vwait parameter is set to true, vertical syncing will be enabled, which will lock the screen refresh rate at 60 hertz and prevent screen 'tearing'.",
        "body": [
            "Sync($vwait)"
        ]
    },
    "Debug:Assert": {
        "prefix": "Debug:Assert",
        "description": "This function is a shorthand way of performing a test and displaying an error. If the specified condition is not true, a call to Debug::Stop() will be made.",
        "body": [
            "Assert($condition, $errortext)"
        ]
    },
    "Assert": {
        "prefix": "Assert",
        "description": "This function is a shorthand way of performing a test and displaying an error. If the specified condition is not true, a call to Debug::Stop() will be made.",
        "body": [
            "Assert($condition, $errortext)"
        ]
    },
    "Debug:Error": {
        "prefix": "Debug:Error",
        "description": "This function will first make a call to Debug::Stop(), then the application will terminate.",
        "body": [
            "Error($errortext)"
        ]
    },
    "Error": {
        "prefix": "Error",
        "description": "This function will first make a call to Debug::Stop(), then the application will terminate.",
        "body": [
            "Error($errortext)"
        ]
    },
    "DirectionalLight:Create": {
        "prefix": "DirectionalLight:Create",
        "description": "This function creates and returns a new directional light.",
        "body": [
            "DirectionalLight Create($parent)"
        ]
    },
    "Create  ": {
        "prefix": "Create  ",
        "description": "This function creates and returns a new directional light.",
        "body": [
            "DirectionalLight Create($parent)"
        ]
    },
    "PointLight:Create": {
        "prefix": "PointLight:Create",
        "description": "This function creates and returns a new point light.",
        "body": [
            "PointLight Create($parent)"
        ]
    },
    "Create   ": {
        "prefix": "Create   ",
        "description": "This function creates and returns a new point light.",
        "body": [
            "PointLight Create($parent)"
        ]
    },
    "SpotLight:Create": {
        "prefix": "SpotLight:Create",
        "description": "This function creates and returns a new spot light.",
        "body": [
            "SpotLight Create($parent)"
        ]
    },
    "Create    ": {
        "prefix": "Create    ",
        "description": "This function creates and returns a new spot light.",
        "body": [
            "SpotLight Create($parent)"
        ]
    },
    "SpotLight:SetConeAngles": {
        "prefix": "SpotLight:SetConeAngles",
        "description": "This function sets the outer and inner cone angles of a spotlight.",
        "body": [
            "SetConeAngles($outer, $inner)"
        ]
    },
    "SetConeAngles": {
        "prefix": "SetConeAngles",
        "description": "This function sets the outer and inner cone angles of a spotlight.",
        "body": [
            "SetConeAngles($outer, $inner)"
        ]
    },
    "Light:SetRange": {
        "prefix": "Light:SetRange",
        "description": "This function sets a light's range. You can retrieve the light range with the Camera::GetRange() function.",
        "body": [
            "SetRange($farrange)"
        ]
    },
    "SetRange": {
        "prefix": "SetRange",
        "description": "This function sets a light's range. You can retrieve the light range with the Camera::GetRange() function.",
        "body": [
            "SetRange($farrange)"
        ]
    },
    "Light:SetRange ": {
        "prefix": "Light:SetRange ",
        "description": "This function sets a light's range. You can retrieve the light range with the Camera::GetRange() function.",
        "body": [
            "SetRange($nearrange, $farrange)"
        ]
    },
    "SetRange ": {
        "prefix": "SetRange ",
        "description": "This function sets a light's range. You can retrieve the light range with the Camera::GetRange() function.",
        "body": [
            "SetRange($nearrange, $farrange)"
        ]
    },
    "Camera:AddPostEffect": {
        "prefix": "Camera:AddPostEffect",
        "description": "This function attaches a post-processing effect to the camera effects stack. Post-processing effects can be loaded as either .shader or .lua files, and will be rendered in the order they are attached to the camera.",
        "body": [
            "AddPostEffect($path)"
        ]
    },
    "AddPostEffect": {
        "prefix": "AddPostEffect",
        "description": "This function attaches a post-processing effect to the camera effects stack. Post-processing effects can be loaded as either .shader or .lua files, and will be rendered in the order they are attached to the camera.",
        "body": [
            "AddPostEffect($path)"
        ]
    },
    "Camera:Create": {
        "prefix": "Camera:Create",
        "description": "This function creates and returns a new camera entity.",
        "body": [
            "Camera Create($parent)"
        ]
    },
    "Create     ": {
        "prefix": "Create     ",
        "description": "This function creates and returns a new camera entity.",
        "body": [
            "Camera Create($parent)"
        ]
    },
    "Camera:Pick": {
        "prefix": "Camera:Pick",
        "description": "This function performs a pick from camera screen coordinates. The current buffer or context will be used for picking operations. \r\n - x: the x component of the screen coordinate to pick. \r\n - Y: the y component of the screen coordinate to pick. \r\n - radius: a radius can be specified to perform a swept sphere collision test. \r\n - closest: if set to true the closest intersection will be found, otherwise the routine will return as soon as one object is picked. \r\n - collisiontype: if specified, the entity collision type will be tested against this, and only colliding entities will be tested.",
        "body": [
            "bool Pick($x, $y, $pick, $radius, $closest, $collisiontype)"
        ]
    },
    "Pick": {
        "prefix": "Pick",
        "description": "This function performs a pick from camera screen coordinates. The current buffer or context will be used for picking operations. \r\n - x: the x component of the screen coordinate to pick. \r\n - Y: the y component of the screen coordinate to pick. \r\n - radius: a radius can be specified to perform a swept sphere collision test. \r\n - closest: if set to true the closest intersection will be found, otherwise the routine will return as soon as one object is picked. \r\n - collisiontype: if specified, the entity collision type will be tested against this, and only colliding entities will be tested.",
        "body": [
            "bool Pick($x, $y, $pick, $radius, $closest, $collisiontype)"
        ]
    },
    "Camera:Project": {
        "prefix": "Camera:Project",
        "description": "This function transforms a position in global space onto a position in screen space. \r\n - position: the position in global space to transform.",
        "body": [
            "Vec3 Project($position)"
        ]
    },
    "Project": {
        "prefix": "Project",
        "description": "This function transforms a position in global space onto a position in screen space. \r\n - position: the position in global space to transform.",
        "body": [
            "Vec3 Project($position)"
        ]
    },
    "Camera:SetClearColor": {
        "prefix": "Camera:SetClearColor",
        "description": "This function sets the clear color of a camera. The clear color is the background color a camera draws when rendered. \r\n - r: the red component of the color to set. \r\n - g: the green component of the color to set. \r\n - b: the blue component of the color to set. \r\n - a: the alpha component of the color to set.",
        "body": [
            "SetClearColor($r, $g, $b, $a)"
        ]
    },
    "SetClearColor": {
        "prefix": "SetClearColor",
        "description": "This function sets the clear color of a camera. The clear color is the background color a camera draws when rendered. \r\n - r: the red component of the color to set. \r\n - g: the green component of the color to set. \r\n - b: the blue component of the color to set. \r\n - a: the alpha component of the color to set.",
        "body": [
            "SetClearColor($r, $g, $b, $a)"
        ]
    },
    "Camera:SetFogAngle": {
        "prefix": "Camera:SetFogAngle",
        "description": "This function gets the camera fog angle. This controls the angles in the sky at which the fog fades out.",
        "body": [
            "SetFogAngle($start, $stop)"
        ]
    },
    "SetFogAngle": {
        "prefix": "SetFogAngle",
        "description": "This function gets the camera fog angle. This controls the angles in the sky at which the fog fades out.",
        "body": [
            "SetFogAngle($start, $stop)"
        ]
    },
    "Camera:SetFogColor": {
        "prefix": "Camera:SetFogColor",
        "description": "This function sets the fog color. Fog must be enabled before it will appear. \r\n - r: red component of the fog color. \r\n - g: green component of the fog color. \r\n - b: blue component of the fog color. \r\n - a: alpha component of the fog color. This is used to control fog density.",
        "body": [
            "SetFogColor($r, $g, $b, $a)"
        ]
    },
    "SetFogColor": {
        "prefix": "SetFogColor",
        "description": "This function sets the fog color. Fog must be enabled before it will appear. \r\n - r: red component of the fog color. \r\n - g: green component of the fog color. \r\n - b: blue component of the fog color. \r\n - a: alpha component of the fog color. This is used to control fog density.",
        "body": [
            "SetFogColor($r, $g, $b, $a)"
        ]
    },
    "Camera:SetFogMode": {
        "prefix": "Camera:SetFogMode",
        "description": "This function is used to enable fog. \r\n - mode: if true then fog will be enabled, otherwise fog will be disabled.",
        "body": [
            "SetFogMode($mode)"
        ]
    },
    "SetFogMode": {
        "prefix": "SetFogMode",
        "description": "This function is used to enable fog. \r\n - mode: if true then fog will be enabled, otherwise fog will be disabled.",
        "body": [
            "SetFogMode($mode)"
        ]
    },
    "Camera:SetFogRange": {
        "prefix": "Camera:SetFogRange",
        "description": "This function sets the fog range. Fog must be enabled before it will appear.",
        "body": [
            "SetFogRange($start, $stop)"
        ]
    },
    "SetFogRange": {
        "prefix": "SetFogRange",
        "description": "This function sets the fog range. Fog must be enabled before it will appear.",
        "body": [
            "SetFogRange($start, $stop)"
        ]
    },
    "Camera:SetFOV": {
        "prefix": "Camera:SetFOV",
        "description": "This function sets a camera's field of view (FOV). The field of view is an angle that controls how broad the visible region is on the vertical axis.        The default camera FOV is 90.0.",
        "body": [
            "SetFOV($fov)"
        ]
    },
    "SetFOV": {
        "prefix": "SetFOV",
        "description": "This function sets a camera's field of view (FOV). The field of view is an angle that controls how broad the visible region is on the vertical axis.        The default camera FOV is 90.0.",
        "body": [
            "SetFOV($fov)"
        ]
    },
    "Camera:SetMultisampleMode": {
        "prefix": "Camera:SetMultisampleMode",
        "description": "This function sets the antialias level of a camera. Note that higher MSAA levels will result in lower performance.",
        "body": [
            "SetMultisampleMode($samples)"
        ]
    },
    "SetMultisampleMode": {
        "prefix": "SetMultisampleMode",
        "description": "This function sets the antialias level of a camera. Note that higher MSAA levels will result in lower performance.",
        "body": [
            "SetMultisampleMode($samples)"
        ]
    },
    "Camera:SetProjectionMode": {
        "prefix": "Camera:SetProjectionMode",
        "description": "This function sets the projection mode of a camera.",
        "body": [
            "SetProjectionMode($projectionmode)"
        ]
    },
    "SetProjectionMode": {
        "prefix": "SetProjectionMode",
        "description": "This function sets the projection mode of a camera.",
        "body": [
            "SetProjectionMode($projectionmode)"
        ]
    },
    "Camera:SetRange": {
        "prefix": "Camera:SetRange",
        "description": "This function sets a camera's near and far ranges.",
        "body": [
            "SetRange($nearrange, $farrange)"
        ]
    },
    "SetRange  ": {
        "prefix": "SetRange  ",
        "description": "This function sets a camera's near and far ranges.",
        "body": [
            "SetRange($nearrange, $farrange)"
        ]
    },
    "Camera:SetRenderTarget": {
        "prefix": "Camera:SetRenderTarget",
        "description": "This functions sets a camera to render directly to a texture. The texture can be used in a material and applied to an object, or drawn onscreen. You can use this feature for making CCTV systems, rear-view mirrors, or other visual effects.",
        "body": [
            "SetRenderTarget($target)"
        ]
    },
    "SetRenderTarget": {
        "prefix": "SetRenderTarget",
        "description": "This functions sets a camera to render directly to a texture. The texture can be used in a material and applied to an object, or drawn onscreen. You can use this feature for making CCTV systems, rear-view mirrors, or other visual effects.",
        "body": [
            "SetRenderTarget($target)"
        ]
    },
    "Camera:SetSkybox": {
        "prefix": "Camera:SetSkybox",
        "description": "This function can be used to set add a skybox to a camera. The sky will be drawn everywhere and appear behind all rendered objects.",
        "body": [
            "SetSkybox($asset)"
        ]
    },
    "SetSkybox": {
        "prefix": "SetSkybox",
        "description": "This function can be used to set add a skybox to a camera. The sky will be drawn everywhere and appear behind all rendered objects.",
        "body": [
            "SetSkybox($asset)"
        ]
    },
    "Camera:SetSkybox ": {
        "prefix": "Camera:SetSkybox ",
        "description": "This function can be used to set add a skybox to a camera. The sky will be drawn everywhere and appear behind all rendered objects.",
        "body": [
            "bool SetSkybox($path)"
        ]
    },
    "SetSkybox ": {
        "prefix": "SetSkybox ",
        "description": "This function can be used to set add a skybox to a camera. The sky will be drawn everywhere and appear behind all rendered objects.",
        "body": [
            "bool SetSkybox($path)"
        ]
    },
    "Camera:SetZoom": {
        "prefix": "Camera:SetZoom",
        "description": "This function sets a camera's zoom. The default camera zoom is 1.0.",
        "body": [
            "SetZoom($zoom)"
        ]
    },
    "SetZoom": {
        "prefix": "SetZoom",
        "description": "This function sets a camera's zoom. The default camera zoom is 1.0.",
        "body": [
            "SetZoom($zoom)"
        ]
    },
    "Camera:SetZoom ": {
        "prefix": "Camera:SetZoom ",
        "description": "This function sets a camera's zoom. The default camera zoom is 1.0.",
        "body": [
            "bool SetSkybox($path)"
        ]
    },
    "SetZoom ": {
        "prefix": "SetZoom ",
        "description": "This function sets a camera's zoom. The default camera zoom is 1.0.",
        "body": [
            "bool SetSkybox($path)"
        ]
    },
    "Camera:UnProject": {
        "prefix": "Camera:UnProject",
        "description": "This function transforms a position in screen space onto a position in global space. \r\n - position: the position in screen space to transform. The X and Y components correspond to 2D screen coordinates, while the Z component contains the foreward distance to the projected point.",
        "body": [
            "Vec3 UnProject($position)"
        ]
    },
    "UnProject": {
        "prefix": "UnProject",
        "description": "This function transforms a position in screen space onto a position in global space. \r\n - position: the position in screen space to transform. The X and Y components correspond to 2D screen coordinates, while the Z component contains the foreward distance to the projected point.",
        "body": [
            "Vec3 UnProject($position)"
        ]
    },
    "Decal:Create": {
        "prefix": "Decal:Create",
        "description": "This function creates a new decal with the specified material applied. \r\n - material: the material to apply to the new decal. This material should use a decal shader.",
        "body": [
            "Decal Create($material, $parent)"
        ]
    },
    "Create      ": {
        "prefix": "Create      ",
        "description": "This function creates a new decal with the specified material applied. \r\n - material: the material to apply to the new decal. This material should use a decal shader.",
        "body": [
            "Decal Create($material, $parent)"
        ]
    },
    "Decal:GetRenderMode": {
        "prefix": "Decal:GetRenderMode",
        "description": "This function returns the decal render mode for the specified type of object. The decal render mode can be used to selectively filter which types of objects a decal is projected onto. For example, a large decorative decal should appear on brush geometry but not on models.",
        "body": [
            "bool GetRenderMode($classid)"
        ]
    },
    "GetRenderMode": {
        "prefix": "GetRenderMode",
        "description": "This function returns the decal render mode for the specified type of object. The decal render mode can be used to selectively filter which types of objects a decal is projected onto. For example, a large decorative decal should appear on brush geometry but not on models.",
        "body": [
            "bool GetRenderMode($classid)"
        ]
    },
    "Decal:SetRenderMode": {
        "prefix": "Decal:SetRenderMode",
        "description": "This function can be used to selectively filter which types of objects a decal is projected onto. For example, a large decorative decal should appear on brush geometry but not on models. \r\n - mode: if set to true, the decal will appear on this type of object, otherwise it will filter out the object when the decal is rendered.",
        "body": [
            "SetRenderMode($classid, $mode)"
        ]
    },
    "SetRenderMode": {
        "prefix": "SetRenderMode",
        "description": "This function can be used to selectively filter which types of objects a decal is projected onto. For example, a large decorative decal should appear on brush geometry but not on models. \r\n - mode: if set to true, the decal will appear on this type of object, otherwise it will filter out the object when the decal is rendered.",
        "body": [
            "SetRenderMode($classid, $mode)"
        ]
    },
    "Emitter:AddAlphaControlPoint": {
        "prefix": "Emitter:AddAlphaControlPoint",
        "description": "This function sets an Alpha control point that controls a particle's alpha transparency over the course of its life. \r\n - time: - a float between 0.0 and 1.0 with 0 being the particle's birth and 1 being the particle's death.",
        "body": [
            "AddAlphaControlPoint($time, $alpha)"
        ]
    },
    "AddAlphaControlPoint": {
        "prefix": "AddAlphaControlPoint",
        "description": "This function sets an Alpha control point that controls a particle's alpha transparency over the course of its life. \r\n - time: - a float between 0.0 and 1.0 with 0 being the particle's birth and 1 being the particle's death.",
        "body": [
            "AddAlphaControlPoint($time, $alpha)"
        ]
    },
    "Emitter:AddScaleControlPoint": {
        "prefix": "Emitter:AddScaleControlPoint",
        "description": "This function sets a scale control point that controls a particle's scale over the course of its life. \r\n - time: - a float between 0.0 and 1.0 with 0 being the particle's birth and 1 being the particle's death.",
        "body": [
            "AddScaleControlPoint($time, $scale)"
        ]
    },
    "AddScaleControlPoint": {
        "prefix": "AddScaleControlPoint",
        "description": "This function sets a scale control point that controls a particle's scale over the course of its life. \r\n - time: - a float between 0.0 and 1.0 with 0 being the particle's birth and 1 being the particle's death.",
        "body": [
            "AddScaleControlPoint($time, $scale)"
        ]
    },
    "Emitter:Create": {
        "prefix": "Emitter:Create",
        "description": "This function creates a new emitter.",
        "body": [
            "Emitter Create($particlecount, $parent)"
        ]
    },
    "Create       ": {
        "prefix": "Create       ",
        "description": "This function creates a new emitter.",
        "body": [
            "Emitter Create($particlecount, $parent)"
        ]
    },
    "Emitter:GetAlphaAtTime": {
        "prefix": "Emitter:GetAlphaAtTime",
        "description": "This function returns an alpha value at specified time. \r\n - time: - a value between 0.0 and 1.0 corresponding to a particle's lifetime. 0.0 being birth and 1.0 being death.",
        "body": [
            "number GetAlphaAtTime($time)"
        ]
    },
    "GetAlphaAtTime": {
        "prefix": "GetAlphaAtTime",
        "description": "This function returns an alpha value at specified time. \r\n - time: - a value between 0.0 and 1.0 corresponding to a particle's lifetime. 0.0 being birth and 1.0 being death.",
        "body": [
            "number GetAlphaAtTime($time)"
        ]
    },
    "Emitter:GetParticleColor": {
        "prefix": "Emitter:GetParticleColor",
        "description": "This function gets the particle's initial or final color. \r\n - mode: - Differentiates between getting initial or final color. 0 = initial color, 1 = final color",
        "body": [
            "Vec4 GetParticleColor($mode)"
        ]
    },
    "GetParticleColor": {
        "prefix": "GetParticleColor",
        "description": "This function gets the particle's initial or final color. \r\n - mode: - Differentiates between getting initial or final color. 0 = initial color, 1 = final color",
        "body": [
            "Vec4 GetParticleColor($mode)"
        ]
    },
    "Emitter:GetScaleAtTime": {
        "prefix": "Emitter:GetScaleAtTime",
        "description": "This function returns a scale value for a given time. \r\n - time: - A value between 0.0 and 1.0 specifying the time at which you want to find the scale. 0 being a particle's birth and 1 being a particles death.",
        "body": [
            "number GetScaleAtTime($time)"
        ]
    },
    "GetScaleAtTime": {
        "prefix": "GetScaleAtTime",
        "description": "This function returns a scale value for a given time. \r\n - time: - A value between 0.0 and 1.0 specifying the time at which you want to find the scale. 0 being a particle's birth and 1 being a particles death.",
        "body": [
            "number GetScaleAtTime($time)"
        ]
    },
    "Emitter:GetVelocity": {
        "prefix": "Emitter:GetVelocity",
        "description": "This function returns the initial velocity or the random velocity of released particles. \r\n - index: - differentiates between setting initial velocity or random velocity. 0 = initial velocity, 1 = random velocity.",
        "body": [
            "Vec3 GetVelocity($index)"
        ]
    },
    "GetVelocity": {
        "prefix": "GetVelocity",
        "description": "This function returns the initial velocity or the random velocity of released particles. \r\n - index: - differentiates between setting initial velocity or random velocity. 0 = initial velocity, 1 = random velocity.",
        "body": [
            "Vec3 GetVelocity($index)"
        ]
    },
    "Emitter:SetAnimationColumns": {
        "prefix": "Emitter:SetAnimationColumns",
        "description": "This function specifies the number of columns in an animated particle sheet.",
        "body": [
            "SetAnimationColumns($columns)"
        ]
    },
    "SetAnimationColumns": {
        "prefix": "SetAnimationColumns",
        "description": "This function specifies the number of columns in an animated particle sheet.",
        "body": [
            "SetAnimationColumns($columns)"
        ]
    },
    "Emitter:SetAnimationCycles": {
        "prefix": "Emitter:SetAnimationCycles",
        "description": "This function sets the number of times an animated particle's animation will play during one lifetime.",
        "body": [
            "SetAnimationCycles($cycles)"
        ]
    },
    "SetAnimationCycles": {
        "prefix": "SetAnimationCycles",
        "description": "This function sets the number of times an animated particle's animation will play during one lifetime.",
        "body": [
            "SetAnimationCycles($cycles)"
        ]
    },
    "Emitter:SetAnimationRows": {
        "prefix": "Emitter:SetAnimationRows",
        "description": "This function specifies the number of rows in an animated particle sheet.",
        "body": [
            "SetAnimationRows($rows)"
        ]
    },
    "SetAnimationRows": {
        "prefix": "SetAnimationRows",
        "description": "This function specifies the number of rows in an animated particle sheet.",
        "body": [
            "SetAnimationRows($rows)"
        ]
    },
    "Emitter:SetDuration": {
        "prefix": "Emitter:SetDuration",
        "description": "This function specifies how long, in milliseconds, a particle will exist.",
        "body": [
            "SetDuration($Duration)"
        ]
    },
    "SetDuration": {
        "prefix": "SetDuration",
        "description": "This function specifies how long, in milliseconds, a particle will exist.",
        "body": [
            "SetDuration($Duration)"
        ]
    },
    "Emitter:SetEmissionShape": {
        "prefix": "Emitter:SetEmissionShape",
        "description": "This function sets the shape in which a particle will spawn from.",
        "body": [
            "SetEmissionShape($ShapeId)"
        ]
    },
    "SetEmissionShape": {
        "prefix": "SetEmissionShape",
        "description": "This function sets the shape in which a particle will spawn from.",
        "body": [
            "SetEmissionShape($ShapeId)"
        ]
    },
    "Emitter:SetInterval": {
        "prefix": "Emitter:SetInterval",
        "description": "This function sets the time interval, in milliseconds, in which particles will be released.",
        "body": [
            "SetInterval($interval)"
        ]
    },
    "SetInterval": {
        "prefix": "SetInterval",
        "description": "This function sets the time interval, in milliseconds, in which particles will be released.",
        "body": [
            "SetInterval($interval)"
        ]
    },
    "Emitter:SetLoopMode": {
        "prefix": "Emitter:SetLoopMode",
        "description": "This function determines if the particle system will play once or loop.",
        "body": [
            "SetLoopMode($Loop)"
        ]
    },
    "SetLoopMode": {
        "prefix": "SetLoopMode",
        "description": "This function determines if the particle system will play once or loop.",
        "body": [
            "SetLoopMode($Loop)"
        ]
    },
    "Emitter:SetMaxScale": {
        "prefix": "Emitter:SetMaxScale",
        "description": "This function specifies a max size for scaling particles.",
        "body": [
            "SetMaxScale($maxscale)"
        ]
    },
    "SetMaxScale": {
        "prefix": "SetMaxScale",
        "description": "This function specifies a max size for scaling particles.",
        "body": [
            "SetMaxScale($maxscale)"
        ]
    },
    "Emitter:SetParticleColor": {
        "prefix": "Emitter:SetParticleColor",
        "description": "This function determines a particle's starting or ending color. \r\n - r: - a float between 0.0 and 1.0 stating how red a particle should be. \r\n - g: - a float between 0.0 and 1.0 stating how green a particle should be. \r\n - b: - a float between 0.0 and 1.0 stating how blue a particle should be. \r\n - a: - a float between 0.0 and 1.0 stating the alpha value, 0 being transparent and 1 being fully opaque. \r\n - mode: - states whether the initial or final color is being set. 0 = starting color, 1 = final color.",
        "body": [
            "SetParticleColor($r, $g, $b, $a, $mode)"
        ]
    },
    "SetParticleColor": {
        "prefix": "SetParticleColor",
        "description": "This function determines a particle's starting or ending color. \r\n - r: - a float between 0.0 and 1.0 stating how red a particle should be. \r\n - g: - a float between 0.0 and 1.0 stating how green a particle should be. \r\n - b: - a float between 0.0 and 1.0 stating how blue a particle should be. \r\n - a: - a float between 0.0 and 1.0 stating the alpha value, 0 being transparent and 1 being fully opaque. \r\n - mode: - states whether the initial or final color is being set. 0 = starting color, 1 = final color.",
        "body": [
            "SetParticleColor($r, $g, $b, $a, $mode)"
        ]
    },
    "Emitter:SetRotationSpeed": {
        "prefix": "Emitter:SetRotationSpeed",
        "description": "This function sets the rotation speed in degrees per second of released particles.",
        "body": [
            "SetRotationSpeed($speed)"
        ]
    },
    "SetRotationSpeed": {
        "prefix": "SetRotationSpeed",
        "description": "This function sets the rotation speed in degrees per second of released particles.",
        "body": [
            "SetRotationSpeed($speed)"
        ]
    },
    "Emitter:SetVelocity": {
        "prefix": "Emitter:SetVelocity",
        "description": "This function sets the initial velocity or the random velocity of released particles. \r\n - x: - specified velocity along the x-axis \r\n - Y: - specified velocity along the y-axis \r\n - z: - specified velocity along the z-axis \r\n - index: - differentiates between setting initial velocity or random velocity. 0 = initial velocity, 1 = random velocity.",
        "body": [
            "SetVelocity($x, $y, $z, $index, $global)"
        ]
    },
    "SetVelocity": {
        "prefix": "SetVelocity",
        "description": "This function sets the initial velocity or the random velocity of released particles. \r\n - x: - specified velocity along the x-axis \r\n - Y: - specified velocity along the y-axis \r\n - z: - specified velocity along the z-axis \r\n - index: - differentiates between setting initial velocity or random velocity. 0 = initial velocity, 1 = random velocity.",
        "body": [
            "SetVelocity($x, $y, $z, $index, $global)"
        ]
    },
    "Emitter:SetViewMode": {
        "prefix": "Emitter:SetViewMode",
        "description": "This function specifies how a particle's facing direction is determined.",
        "body": [
            "SetViewMode($viewmode)"
        ]
    },
    "SetViewMode": {
        "prefix": "SetViewMode",
        "description": "This function specifies how a particle's facing direction is determined.",
        "body": [
            "SetViewMode($viewmode)"
        ]
    },
    "Listener:Create": {
        "prefix": "Listener:Create",
        "description": "This function creates and returns a new listener.",
        "body": [
            "Listener Create($parent)"
        ]
    },
    "Create        ": {
        "prefix": "Create        ",
        "description": "This function creates and returns a new listener.",
        "body": [
            "Listener Create($parent)"
        ]
    },
    "LensFlare:Create": {
        "prefix": "LensFlare:Create",
        "description": "This function returns creates and returns a new LensFlare.",
        "body": [
            "LensFlare Create($parent)"
        ]
    },
    "Create         ": {
        "prefix": "Create         ",
        "description": "This function returns creates and returns a new LensFlare.",
        "body": [
            "LensFlare Create($parent)"
        ]
    },
    "LensFlare:SetRadius": {
        "prefix": "LensFlare:SetRadius",
        "description": "This function sets the near and far radius of the specified LensFlare. The near and far radius correspond to the radio of the LensFlare at its near and far range distances from the camera.",
        "body": [
            "SetRadius($near, $far)"
        ]
    },
    "SetRadius": {
        "prefix": "SetRadius",
        "description": "This function sets the near and far radius of the specified LensFlare. The near and far radius correspond to the radio of the LensFlare at its near and far range distances from the camera.",
        "body": [
            "SetRadius($near, $far)"
        ]
    },
    "LensFlare:SetRange": {
        "prefix": "LensFlare:SetRange",
        "description": "This function sets the near and far range of the LensFlare. The LensFlare will fade from visibility when its distance from the camera exceeds the far range. The LensFlare will stop shrinking when its distance to the camera becomes less than the near range.",
        "body": [
            "SetRange($nearrange, $farrange)"
        ]
    },
    "SetRange   ": {
        "prefix": "SetRange   ",
        "description": "This function sets the near and far range of the LensFlare. The LensFlare will fade from visibility when its distance from the camera exceeds the far range. The LensFlare will stop shrinking when its distance to the camera becomes less than the near range.",
        "body": [
            "SetRange($nearrange, $farrange)"
        ]
    },
    "Sprite:SetAngle": {
        "prefix": "Sprite:SetAngle",
        "description": "This function sets the rotation of a sprite's visible billboard. \r\n - angle: the rotation of the sprite's visible billboard, in degrees.",
        "body": [
            "SetAngle($angle)"
        ]
    },
    "SetAngle": {
        "prefix": "SetAngle",
        "description": "This function sets the rotation of a sprite's visible billboard. \r\n - angle: the rotation of the sprite's visible billboard, in degrees.",
        "body": [
            "SetAngle($angle)"
        ]
    },
    "Sprite:SetSize": {
        "prefix": "Sprite:SetSize",
        "description": "This function sets the size of a sprite's visible billboard.",
        "body": [
            "SetSize($width, $height)"
        ]
    },
    "SetSize": {
        "prefix": "SetSize",
        "description": "This function sets the size of a sprite's visible billboard.",
        "body": [
            "SetSize($width, $height)"
        ]
    },
    "Sprite:SetViewMode": {
        "prefix": "Sprite:SetViewMode",
        "description": "This function sets the view mode of a sprite. The view mode controls how the sprite reacts to camera movement.",
        "body": [
            "SetViewMode($viewmode)"
        ]
    },
    "SetViewMode ": {
        "prefix": "SetViewMode ",
        "description": "This function sets the view mode of a sprite. The view mode controls how the sprite reacts to camera movement.",
        "body": [
            "SetViewMode($viewmode)"
        ]
    },
    "Model:Box": {
        "prefix": "Model:Box",
        "description": "This function will create a new box model using the specified parameters.",
        "body": [
            "Model Box($parent)"
        ]
    },
    "Box ": {
        "prefix": "Box ",
        "description": "This function will create a new box model using the specified parameters.",
        "body": [
            "Model Box($parent)"
        ]
    },
    "Model:Box ": {
        "prefix": "Model:Box ",
        "description": "This function will create a new box model using the specified parameters.",
        "body": [
            "Model Box($width, $parent)"
        ]
    },
    "Box  ": {
        "prefix": "Box  ",
        "description": "This function will create a new box model using the specified parameters.",
        "body": [
            "Model Box($width, $parent)"
        ]
    },
    "Model:Box  ": {
        "prefix": "Model:Box  ",
        "description": "This function will create a new box model using the specified parameters.",
        "body": [
            "Model Box($width, $height, $depth, $parent)"
        ]
    },
    "Box   ": {
        "prefix": "Box   ",
        "description": "This function will create a new box model using the specified parameters.",
        "body": [
            "Model Box($width, $height, $depth, $parent)"
        ]
    },
    "Model:Cone": {
        "prefix": "Model:Cone",
        "description": "This function will create a new cone model using the specified parameters.",
        "body": [
            "Model Cone($sides, $parent)"
        ]
    },
    "Cone ": {
        "prefix": "Cone ",
        "description": "This function will create a new cone model using the specified parameters.",
        "body": [
            "Model Cone($sides, $parent)"
        ]
    },
    "Model:Create": {
        "prefix": "Model:Create",
        "description": "This function creates and returns a new model.",
        "body": [
            "Model Create($parent)"
        ]
    },
    "Create          ": {
        "prefix": "Create          ",
        "description": "This function creates and returns a new model.",
        "body": [
            "Model Create($parent)"
        ]
    },
    "Model:Cylinder": {
        "prefix": "Model:Cylinder",
        "description": "This function will create a new cylinder model using the specified parameters.",
        "body": [
            "Model Cylinder($sides, $parent)"
        ]
    },
    "Cylinder ": {
        "prefix": "Cylinder ",
        "description": "This function will create a new cylinder model using the specified parameters.",
        "body": [
            "Model Cylinder($sides, $parent)"
        ]
    },
    "Model:FindSurface": {
        "prefix": "Model:FindSurface",
        "description": "This function will search for and return a surface with the specified material. \r\n - material: the material to search for. This value may be NULL.",
        "body": [
            "Surface FindSurface($material)"
        ]
    },
    "FindSurface": {
        "prefix": "FindSurface",
        "description": "This function will search for and return a surface with the specified material. \r\n - material: the material to search for. This value may be NULL.",
        "body": [
            "Surface FindSurface($material)"
        ]
    },
    "Model:GetSurface": {
        "prefix": "Model:GetSurface",
        "description": "This function gets a model surface. \r\n - index: the surface index to get. This is a value from 0 to Model::CountSurfaces()-1.",
        "body": [
            "Surface GetSurface($index)"
        ]
    },
    "GetSurface": {
        "prefix": "GetSurface",
        "description": "This function gets a model surface. \r\n - index: the surface index to get. This is a value from 0 to Model::CountSurfaces()-1.",
        "body": [
            "Surface GetSurface($index)"
        ]
    },
    "Model:Load": {
        "prefix": "Model:Load",
        "description": "This function loads a model from a Leadwerks model (*.mdl) file.",
        "body": [
            "Model Load($path, $flags)"
        ]
    },
    "Load    ": {
        "prefix": "Load    ",
        "description": "This function loads a model from a Leadwerks model (*.mdl) file.",
        "body": [
            "Model Load($path, $flags)"
        ]
    },
    "Model:Sphere": {
        "prefix": "Model:Sphere",
        "description": "This function will create a new sphere model using the specified parameters.",
        "body": [
            "Model Sphere($sides, $parent)"
        ]
    },
    "Sphere ": {
        "prefix": "Sphere ",
        "description": "This function will create a new sphere model using the specified parameters.",
        "body": [
            "Model Sphere($sides, $parent)"
        ]
    },
    "Pivot:Create": {
        "prefix": "Pivot:Create",
        "description": "This function creates and returns a new pivot.",
        "body": [
            "Pivot Create($parent)"
        ]
    },
    "Create           ": {
        "prefix": "Create           ",
        "description": "This function creates and returns a new pivot.",
        "body": [
            "Pivot Create($parent)"
        ]
    },
    "Entity:AddForce": {
        "prefix": "Entity:AddForce",
        "description": "This function applies a force to an entity. \r\n - x: the x component of the force to apply. \r\n - Y: the y component of the force to apply. \r\n - z: the z component of the force to apply. \r\n - Force: the force to apply",
        "body": [
            "AddForce($x, $y, $z, $global)"
        ]
    },
    "AddForce": {
        "prefix": "AddForce",
        "description": "This function applies a force to an entity. \r\n - x: the x component of the force to apply. \r\n - Y: the y component of the force to apply. \r\n - z: the z component of the force to apply. \r\n - Force: the force to apply",
        "body": [
            "AddForce($x, $y, $z, $global)"
        ]
    },
    "Entity:AddForce ": {
        "prefix": "Entity:AddForce ",
        "description": "This function applies a force to an entity. \r\n - x: the x component of the force to apply. \r\n - Y: the y component of the force to apply. \r\n - z: the z component of the force to apply. \r\n - Force: the force to apply",
        "body": [
            "AddForce($force, $global)"
        ]
    },
    "AddForce ": {
        "prefix": "AddForce ",
        "description": "This function applies a force to an entity. \r\n - x: the x component of the force to apply. \r\n - Y: the y component of the force to apply. \r\n - z: the z component of the force to apply. \r\n - Force: the force to apply",
        "body": [
            "AddForce($force, $global)"
        ]
    },
    "Entity:AddPointForce": {
        "prefix": "Entity:AddPointForce",
        "description": "This function adds a force at a specific position on an entity, transforming the force into both a force and torque value. This can be used to simulate realistic impacts like bullets hitting an object. \r\n - Force: the force to add. \r\n - fx: the x component of the force to add. \r\n - fy: the y component of the force to add. \r\n - fz: the z component of the force to add. \r\n - px: the x component of the position to add the force at. \r\n - py: the y component of the position to add the force at. \r\n - pz: the z component of the position to add the force at. \r\n - position: the position to add the force at.",
        "body": [
            "AddPointForce($fx, $fy, $fz, $px, $py, $pz, $global)"
        ]
    },
    "AddPointForce": {
        "prefix": "AddPointForce",
        "description": "This function adds a force at a specific position on an entity, transforming the force into both a force and torque value. This can be used to simulate realistic impacts like bullets hitting an object. \r\n - Force: the force to add. \r\n - fx: the x component of the force to add. \r\n - fy: the y component of the force to add. \r\n - fz: the z component of the force to add. \r\n - px: the x component of the position to add the force at. \r\n - py: the y component of the position to add the force at. \r\n - pz: the z component of the position to add the force at. \r\n - position: the position to add the force at.",
        "body": [
            "AddPointForce($fx, $fy, $fz, $px, $py, $pz, $global)"
        ]
    },
    "Entity:AddPointForce ": {
        "prefix": "Entity:AddPointForce ",
        "description": "This function adds a force at a specific position on an entity, transforming the force into both a force and torque value. This can be used to simulate realistic impacts like bullets hitting an object. \r\n - Force: the force to add. \r\n - fx: the x component of the force to add. \r\n - fy: the y component of the force to add. \r\n - fz: the z component of the force to add. \r\n - px: the x component of the position to add the force at. \r\n - py: the y component of the position to add the force at. \r\n - pz: the z component of the position to add the force at. \r\n - position: the position to add the force at.",
        "body": [
            "AddPointForce($force, $position, $global)"
        ]
    },
    "AddPointForce ": {
        "prefix": "AddPointForce ",
        "description": "This function adds a force at a specific position on an entity, transforming the force into both a force and torque value. This can be used to simulate realistic impacts like bullets hitting an object. \r\n - Force: the force to add. \r\n - fx: the x component of the force to add. \r\n - fy: the y component of the force to add. \r\n - fz: the z component of the force to add. \r\n - px: the x component of the position to add the force at. \r\n - py: the y component of the position to add the force at. \r\n - pz: the z component of the position to add the force at. \r\n - position: the position to add the force at.",
        "body": [
            "AddPointForce($force, $position, $global)"
        ]
    },
    "Entity:AddTorque": {
        "prefix": "Entity:AddTorque",
        "description": "This function adds torque (angular force) to an entity. \r\n - x: x component of the torque to add. \r\n - Y: y component of the torque to add. \r\n - z: z component of the torque to add. \r\n - torque: the torque to add.",
        "body": [
            "AddTorque($x, $y, $z, $global)"
        ]
    },
    "AddTorque": {
        "prefix": "AddTorque",
        "description": "This function adds torque (angular force) to an entity. \r\n - x: x component of the torque to add. \r\n - Y: y component of the torque to add. \r\n - z: z component of the torque to add. \r\n - torque: the torque to add.",
        "body": [
            "AddTorque($x, $y, $z, $global)"
        ]
    },
    "Entity:AddTorque ": {
        "prefix": "Entity:AddTorque ",
        "description": "This function adds torque (angular force) to an entity. \r\n - x: x component of the torque to add. \r\n - Y: y component of the torque to add. \r\n - z: z component of the torque to add. \r\n - torque: the torque to add.",
        "body": [
            "AddTorque($torque, $global)"
        ]
    },
    "AddTorque ": {
        "prefix": "AddTorque ",
        "description": "This function adds torque (angular force) to an entity. \r\n - x: x component of the torque to add. \r\n - Y: y component of the torque to add. \r\n - z: z component of the torque to add. \r\n - torque: the torque to add.",
        "body": [
            "AddTorque($torque, $global)"
        ]
    },
    "Entity:AlignToVector": {
        "prefix": "Entity:AlignToVector",
        "description": "This function can be used to orient an entity's axis to match a user-defined axis in world space. \r\n - x: the X component of the axis. \r\n - Y: the Y component of the axis. \r\n - z: the X component of the axis. \r\n - axis: the entity axis to align. This may be 0, 1, or 2 for the X, Y, and Z axes, respectively. \r\n - rate: if less than 1.0, this will be used to interpolate between the entity's current rotation and the new rotation. \r\n - roll: the rotation value around the specified axis to orient the entity to.",
        "body": [
            "AlignToVector($x, $y, $z, $axis, $rate, $roll)"
        ]
    },
    "AlignToVector": {
        "prefix": "AlignToVector",
        "description": "This function can be used to orient an entity's axis to match a user-defined axis in world space. \r\n - x: the X component of the axis. \r\n - Y: the Y component of the axis. \r\n - z: the X component of the axis. \r\n - axis: the entity axis to align. This may be 0, 1, or 2 for the X, Y, and Z axes, respectively. \r\n - rate: if less than 1.0, this will be used to interpolate between the entity's current rotation and the new rotation. \r\n - roll: the rotation value around the specified axis to orient the entity to.",
        "body": [
            "AlignToVector($x, $y, $z, $axis, $rate, $roll)"
        ]
    },
    "Entity:AlignToVector ": {
        "prefix": "Entity:AlignToVector ",
        "description": "This function can be used to orient an entity's axis to match a user-defined axis in world space. \r\n - x: the X component of the axis. \r\n - Y: the Y component of the axis. \r\n - z: the X component of the axis. \r\n - axis: the entity axis to align. This may be 0, 1, or 2 for the X, Y, and Z axes, respectively. \r\n - rate: if less than 1.0, this will be used to interpolate between the entity's current rotation and the new rotation. \r\n - roll: the rotation value around the specified axis to orient the entity to.",
        "body": [
            "void AlignToVector($v, $axis, $rate, $roll)"
        ]
    },
    "AlignToVector ": {
        "prefix": "AlignToVector ",
        "description": "This function can be used to orient an entity's axis to match a user-defined axis in world space. \r\n - x: the X component of the axis. \r\n - Y: the Y component of the axis. \r\n - z: the X component of the axis. \r\n - axis: the entity axis to align. This may be 0, 1, or 2 for the X, Y, and Z axes, respectively. \r\n - rate: if less than 1.0, this will be used to interpolate between the entity's current rotation and the new rotation. \r\n - roll: the rotation value around the specified axis to orient the entity to.",
        "body": [
            "void AlignToVector($v, $axis, $rate, $roll)"
        ]
    },
    "Entity:Copy": {
        "prefix": "Entity:Copy",
        "description": "This function creates and returns a unique duplicate of the specified entity. \r\n - recursive: if set to true, copies of the entity's children will be made and parented to the new entity.",
        "body": [
            "Entity Copy($recursive)"
        ]
    },
    "Copy": {
        "prefix": "Copy",
        "description": "This function creates and returns a unique duplicate of the specified entity. \r\n - recursive: if set to true, copies of the entity's children will be made and parented to the new entity.",
        "body": [
            "Entity Copy($recursive)"
        ]
    },
    "Entity:EmitSound": {
        "prefix": "Entity:EmitSound",
        "description": "This function plays a sound at an entity's position in 3D space. Spatialized sounds must be in mono format. \r\n - sound: the new pick radius to set. \r\n - range: the new pick radius to set. \r\n - volume: the new pick radius to set. \r\n - pitch: the new pick radius to set. \r\n - loopmode: the new pick radius to set.",
        "body": [
            "number EmitSound($sound, $range, $volume, $pitch, $loopmode)"
        ]
    },
    "EmitSound": {
        "prefix": "EmitSound",
        "description": "This function plays a sound at an entity's position in 3D space. Spatialized sounds must be in mono format. \r\n - sound: the new pick radius to set. \r\n - range: the new pick radius to set. \r\n - volume: the new pick radius to set. \r\n - pitch: the new pick radius to set. \r\n - loopmode: the new pick radius to set.",
        "body": [
            "number EmitSound($sound, $range, $volume, $pitch, $loopmode)"
        ]
    },
    "Entity:EmitSound ": {
        "prefix": "Entity:EmitSound ",
        "description": "This function plays a sound at an entity's position in 3D space. Spatialized sounds must be in mono format. \r\n - sound: the new pick radius to set. \r\n - range: the new pick radius to set. \r\n - volume: the new pick radius to set. \r\n - pitch: the new pick radius to set. \r\n - loopmode: the new pick radius to set.",
        "body": [
            "EmitSound($source)"
        ]
    },
    "EmitSound ": {
        "prefix": "EmitSound ",
        "description": "This function plays a sound at an entity's position in 3D space. Spatialized sounds must be in mono format. \r\n - sound: the new pick radius to set. \r\n - range: the new pick radius to set. \r\n - volume: the new pick radius to set. \r\n - pitch: the new pick radius to set. \r\n - loopmode: the new pick radius to set.",
        "body": [
            "EmitSound($source)"
        ]
    },
    "Entity:FindChild": {
        "prefix": "Entity:FindChild",
        "description": "This function performs a recursive search and returns the first child entity it finds with the specified name. \r\n - name: the name of the child entity to search for.",
        "body": [
            "Entity FindChild($name)"
        ]
    },
    "FindChild": {
        "prefix": "FindChild",
        "description": "This function performs a recursive search and returns the first child entity it finds with the specified name. \r\n - name: the name of the child entity to search for.",
        "body": [
            "Entity FindChild($name)"
        ]
    },
    "Entity:GetAABB": {
        "prefix": "Entity:GetAABB",
        "description": "This function returns an entity's axis-aligned bounding box (AABB). \r\n - mode: this may be any of the following values:            LocalAABB: the entity AABB in local space will be returned.            GlobalAABB: the entity AABB in global space will be returned.            RecursiveAABB: the recursive bounding box will be returned, encompassing the global bounding box of this entity, and the global bounding boxes of all its children.",
        "body": [
            "AABB GetAABB($mode)"
        ]
    },
    "GetAABB": {
        "prefix": "GetAABB",
        "description": "This function returns an entity's axis-aligned bounding box (AABB). \r\n - mode: this may be any of the following values:            LocalAABB: the entity AABB in local space will be returned.            GlobalAABB: the entity AABB in global space will be returned.            RecursiveAABB: the recursive bounding box will be returned, encompassing the global bounding box of this entity, and the global bounding boxes of all its children.",
        "body": [
            "AABB GetAABB($mode)"
        ]
    },
    "Entity:GetAnimationLength": {
        "prefix": "Entity:GetAnimationLength",
        "description": "This function gets the number of frames in an entity's animation sequence. \r\n - index: the animation sequence to get the length of. \r\n - name: the name of the animation sequence to use, i.e. 'walk', 'run', 'attack', etc.",
        "body": [
            "number GetAnimationLength($index)"
        ]
    },
    "GetAnimationLength": {
        "prefix": "GetAnimationLength",
        "description": "This function gets the number of frames in an entity's animation sequence. \r\n - index: the animation sequence to get the length of. \r\n - name: the name of the animation sequence to use, i.e. 'walk', 'run', 'attack', etc.",
        "body": [
            "number GetAnimationLength($index)"
        ]
    },
    "Entity:GetAnimationLength ": {
        "prefix": "Entity:GetAnimationLength ",
        "description": "This function gets the number of frames in an entity's animation sequence. \r\n - index: the animation sequence to get the length of. \r\n - name: the name of the animation sequence to use, i.e. 'walk', 'run', 'attack', etc.",
        "body": [
            "number GetAnimationLength($name)"
        ]
    },
    "GetAnimationLength ": {
        "prefix": "GetAnimationLength ",
        "description": "This function gets the number of frames in an entity's animation sequence. \r\n - index: the animation sequence to get the length of. \r\n - name: the name of the animation sequence to use, i.e. 'walk', 'run', 'attack', etc.",
        "body": [
            "number GetAnimationLength($name)"
        ]
    },
    "Entity:GetChild": {
        "prefix": "Entity:GetChild",
        "description": "This function gets the entity child at the specified index. \r\n - index: the index of the child entity to retrieve. Entity children are numbered from 0 to CountChildren()-1",
        "body": [
            "Entity GetChild($index)"
        ]
    },
    "GetChild": {
        "prefix": "GetChild",
        "description": "This function gets the entity child at the specified index. \r\n - index: the index of the child entity to retrieve. Entity children are numbered from 0 to CountChildren()-1",
        "body": [
            "Entity GetChild($index)"
        ]
    },
    "Entity:GetColor": {
        "prefix": "Entity:GetColor",
        "description": "This function gets an entity's color. \r\n - mode: (number): the color to get. This may be Color.Diffuse or Color.Specular.",
        "body": [
            "GetColor($mode)"
        ]
    },
    "GetColor ": {
        "prefix": "GetColor ",
        "description": "This function gets an entity's color. \r\n - mode: (number): the color to get. This may be Color.Diffuse or Color.Specular.",
        "body": [
            "GetColor($mode)"
        ]
    },
    "Entity:GetCulled": {
        "prefix": "Entity:GetCulled",
        "description": "This function indicates whether an entity has been culled from rendering or not.",
        "body": [
            "bool GetCulled($camera)"
        ]
    },
    "GetCulled": {
        "prefix": "GetCulled",
        "description": "This function indicates whether an entity has been culled from rendering or not.",
        "body": [
            "bool GetCulled($camera)"
        ]
    },
    "Entity:GetDistance": {
        "prefix": "Entity:GetDistance",
        "description": "This function returns the distance between two entities in global space. \r\n - entity: the entity to find the distance to.",
        "body": [
            "number GetDistance($entity)"
        ]
    },
    "GetDistance": {
        "prefix": "GetDistance",
        "description": "This function returns the distance between two entities in global space. \r\n - entity: the entity to find the distance to.",
        "body": [
            "number GetDistance($entity)"
        ]
    },
    "Entity:GetDistance ": {
        "prefix": "Entity:GetDistance ",
        "description": "This function returns the distance between two entities in global space. \r\n - entity: the entity to find the distance to.",
        "body": [
            "number GetDistance($position, $useshape)"
        ]
    },
    "GetDistance ": {
        "prefix": "GetDistance ",
        "description": "This function returns the distance between two entities in global space. \r\n - entity: the entity to find the distance to.",
        "body": [
            "number GetDistance($position, $useshape)"
        ]
    },
    "Entity:GetIntensity": {
        "prefix": "Entity:GetIntensity",
        "description": "This function gets the intensity of an entity's color. The intensity is a multiplier used to increase or decrease the brightness of an entity's color. \r\n - mode: (number): the color mode to use. This may be Entity::DiffuseColor or Entity::SpecularColor.",
        "body": [
            "GetIntensity($mode)"
        ]
    },
    "GetIntensity": {
        "prefix": "GetIntensity",
        "description": "This function gets the intensity of an entity's color. The intensity is a multiplier used to increase or decrease the brightness of an entity's color. \r\n - mode: (number): the color mode to use. This may be Entity::DiffuseColor or Entity::SpecularColor.",
        "body": [
            "GetIntensity($mode)"
        ]
    },
    "Entity:GetMatrix": {
        "prefix": "Entity:GetMatrix",
        "description": "This function gets an entity's 4x4 matrix.",
        "body": [
            "Mat4 GetMatrix($global)"
        ]
    },
    "GetMatrix": {
        "prefix": "GetMatrix",
        "description": "This function gets an entity's 4x4 matrix.",
        "body": [
            "Mat4 GetMatrix($global)"
        ]
    },
    "Entity:GetOmega": {
        "prefix": "Entity:GetOmega",
        "description": "This function gets entity's omega (angular velocity), in global or local space.",
        "body": [
            "Vec3 GetOmega($global)"
        ]
    },
    "GetOmega": {
        "prefix": "GetOmega",
        "description": "This function gets entity's omega (angular velocity), in global or local space.",
        "body": [
            "Vec3 GetOmega($global)"
        ]
    },
    "Entity:GetPickMode": {
        "prefix": "Entity:GetPickMode",
        "description": "This function gets an entity's pick mode.",
        "body": [
            "number GetPickMode()"
        ]
    },
    "GetPickMode": {
        "prefix": "GetPickMode",
        "description": "This function gets an entity's pick mode.",
        "body": [
            "number GetPickMode()"
        ]
    },
    "Entity:GetVelocity": {
        "prefix": "Entity:GetVelocity",
        "description": "This function gets entity's velocity, in global or local space.",
        "body": [
            "Vec3 GetVelocity($global)"
        ]
    },
    "GetVelocity ": {
        "prefix": "GetVelocity ",
        "description": "This function gets entity's velocity, in global or local space.",
        "body": [
            "Vec3 GetVelocity($global)"
        ]
    },
    "Entity:GetQuaternion": {
        "prefix": "Entity:GetQuaternion",
        "description": "This function gets the quaternion rotation of an entity. A quaternion is a special rotation value that is more accurate than Euler angles in some situations.",
        "body": [
            "Quat GetQuaterion($global)"
        ]
    },
    "GetQuaternion": {
        "prefix": "GetQuaternion",
        "description": "This function gets the quaternion rotation of an entity. A quaternion is a special rotation value that is more accurate than Euler angles in some situations.",
        "body": [
            "Quat GetQuaterion($global)"
        ]
    },
    "Entity:GetVelocity ": {
        "prefix": "Entity:GetVelocity ",
        "description": "This function gets entity's velocity, in global or local space.",
        "body": [
            "Vec3 GetVelocity($global)"
        ]
    },
    "GetVelocity  ": {
        "prefix": "GetVelocity  ",
        "description": "This function gets entity's velocity, in global or local space.",
        "body": [
            "Vec3 GetVelocity($global)"
        ]
    },
    "Entity:Instance": {
        "prefix": "Entity:Instance",
        "description": "This function creates and returns a new instance of the specified entity. Because the function will not duplicate model surfaces, it is generally fast enough for real-time use.",
        "body": [
            "Entity Instance($recursive)"
        ]
    },
    "Instance": {
        "prefix": "Instance",
        "description": "This function creates and returns a new instance of the specified entity. Because the function will not duplicate model surfaces, it is generally fast enough for real-time use.",
        "body": [
            "Entity Instance($recursive)"
        ]
    },
    "Entity:Move": {
        "prefix": "Entity:Move",
        "description": "Sets the position of an entity in 3-dimensional space, using local or global coordinates. \r\n - x: the X component of the movement to add. \r\n - Y: the Y component of the movement to add. \r\n - z: the Z component of the movement to add. \r\n - position: the movement to add.",
        "body": [
            "void Move($position, $global)"
        ]
    },
    "Move": {
        "prefix": "Move",
        "description": "Sets the position of an entity in 3-dimensional space, using local or global coordinates. \r\n - x: the X component of the movement to add. \r\n - Y: the Y component of the movement to add. \r\n - z: the Z component of the movement to add. \r\n - position: the movement to add.",
        "body": [
            "void Move($position, $global)"
        ]
    },
    "Entity:Move ": {
        "prefix": "Entity:Move ",
        "description": "Sets the position of an entity in 3-dimensional space, using local or global coordinates. \r\n - x: the X component of the movement to add. \r\n - Y: the Y component of the movement to add. \r\n - z: the Z component of the movement to add. \r\n - position: the movement to add.",
        "body": [
            "void Move($x, $y, $z, $global)"
        ]
    },
    "Move ": {
        "prefix": "Move ",
        "description": "Sets the position of an entity in 3-dimensional space, using local or global coordinates. \r\n - x: the X component of the movement to add. \r\n - Y: the Y component of the movement to add. \r\n - z: the Z component of the movement to add. \r\n - position: the movement to add.",
        "body": [
            "void Move($x, $y, $z, $global)"
        ]
    },
    "Entity:Pick": {
        "prefix": "Entity:Pick",
        "description": "This function performs a pick operation on a single entity. \r\n - p0: the origin of the ray in global coordinates. \r\n - p1: the terminal end of the ray in global coordinates. \r\n - pick: a pick object to contain pick information. \r\n - radius: the radius of the ray. If the radius is greater than 0.0, a slower swept sphere collision will be performed. \r\n - closest: if set to true, the closest intersection will be found, otherwise the operation will return as soon as a single intersection is found. \r\n - recursive: if set to true, the entity's sub-hierarchy will be tested recursively. \r\n - collisiontype: if specified, the entity collision type of all children will be tested against this, and non-colliding entities will be skipped.",
        "body": [
            "bool Pick($p0, $p1, $pick, $radius, $closest, $recursive, $collisiontype)"
        ]
    },
    "Pick ": {
        "prefix": "Pick ",
        "description": "This function performs a pick operation on a single entity. \r\n - p0: the origin of the ray in global coordinates. \r\n - p1: the terminal end of the ray in global coordinates. \r\n - pick: a pick object to contain pick information. \r\n - radius: the radius of the ray. If the radius is greater than 0.0, a slower swept sphere collision will be performed. \r\n - closest: if set to true, the closest intersection will be found, otherwise the operation will return as soon as a single intersection is found. \r\n - recursive: if set to true, the entity's sub-hierarchy will be tested recursively. \r\n - collisiontype: if specified, the entity collision type of all children will be tested against this, and non-colliding entities will be skipped.",
        "body": [
            "bool Pick($p0, $p1, $pick, $radius, $closest, $recursive, $collisiontype)"
        ]
    },
    "Entity:PlayAnimation": {
        "prefix": "Entity:PlayAnimation",
        "description": "This command makes an entity automatically play an animation sequence. \r\n - sequence: the sequence name or index of the animation to be played. \r\n - speed: the speed at which to play the animation. \r\n - blend: a blend amount to modulate the current rotation and position with. This can be used to smoothly transition between two animation sequences, or to blend two animations together. \r\n - mode: set to zero for looping animation or one for one-shot animation. When one-shot animation mode is used, the script or actor function EndAnimation() will be called when the sequence is completed, passing the sequence number in as an argument.",
        "body": [
            "PlayAnimation($sequence, $speed, $blendtime, $mode)"
        ]
    },
    "PlayAnimation": {
        "prefix": "PlayAnimation",
        "description": "This command makes an entity automatically play an animation sequence. \r\n - sequence: the sequence name or index of the animation to be played. \r\n - speed: the speed at which to play the animation. \r\n - blend: a blend amount to modulate the current rotation and position with. This can be used to smoothly transition between two animation sequences, or to blend two animations together. \r\n - mode: set to zero for looping animation or one for one-shot animation. When one-shot animation mode is used, the script or actor function EndAnimation() will be called when the sequence is completed, passing the sequence number in as an argument.",
        "body": [
            "PlayAnimation($sequence, $speed, $blendtime, $mode)"
        ]
    },
    "Entity:PlayAnimation ": {
        "prefix": "Entity:PlayAnimation ",
        "description": "This command makes an entity automatically play an animation sequence. \r\n - sequence: the sequence name or index of the animation to be played. \r\n - speed: the speed at which to play the animation. \r\n - blend: a blend amount to modulate the current rotation and position with. This can be used to smoothly transition between two animation sequences, or to blend two animations together. \r\n - mode: set to zero for looping animation or one for one-shot animation. When one-shot animation mode is used, the script or actor function EndAnimation() will be called when the sequence is completed, passing the sequence number in as an argument.",
        "body": [
            "PlayAnimation($sequence, $speed, $blendtime, $mode)"
        ]
    },
    "PlayAnimation ": {
        "prefix": "PlayAnimation ",
        "description": "This command makes an entity automatically play an animation sequence. \r\n - sequence: the sequence name or index of the animation to be played. \r\n - speed: the speed at which to play the animation. \r\n - blend: a blend amount to modulate the current rotation and position with. This can be used to smoothly transition between two animation sequences, or to blend two animations together. \r\n - mode: set to zero for looping animation or one for one-shot animation. When one-shot animation mode is used, the script or actor function EndAnimation() will be called when the sequence is completed, passing the sequence number in as an argument.",
        "body": [
            "PlayAnimation($sequence, $speed, $blendtime, $mode)"
        ]
    },
    "Entity:Point": {
        "prefix": "Entity:Point",
        "description": "This function points an entity at another entity. \r\n - axis: the entity's axis to orient. This may be 0, 1, or 2, for the X, Y, and Z axes, respectively. \r\n - rate: a multiplier to indicate how quickly the entity should orient itself. \r\n - entity: the target entity to point towards. \r\n - roll: the rotation around the specified axis.",
        "body": [
            "Point($entity, $axis, $rate, $roll)"
        ]
    },
    "Point": {
        "prefix": "Point",
        "description": "This function points an entity at another entity. \r\n - axis: the entity's axis to orient. This may be 0, 1, or 2, for the X, Y, and Z axes, respectively. \r\n - rate: a multiplier to indicate how quickly the entity should orient itself. \r\n - entity: the target entity to point towards. \r\n - roll: the rotation around the specified axis.",
        "body": [
            "Point($entity, $axis, $rate, $roll)"
        ]
    },
    "Entity:SetAnimationFrame": {
        "prefix": "Entity:SetAnimationFrame",
        "description": "Sets an entity to a specific animation frame. \r\n - index: the animation sequence to use. \r\n - recursive: if set to true, the animation will be applied to all the entity's children recursively. \r\n - blend: a blend amount to modulate the current rotation and position with. This can be used to smoothly transition between two animation sequences, or to blend two animations together. \r\n - time: the frame number to set. If a fractional number is used, the animation will be interpolated between the closest two frames. \r\n - name: the name of the animation sequence to use, i.e. 'walk', 'run', 'attack', etc.",
        "body": [
            "SetAnimationFrame($time, $blend, $index, $recursive)"
        ]
    },
    "SetAnimationFrame": {
        "prefix": "SetAnimationFrame",
        "description": "Sets an entity to a specific animation frame. \r\n - index: the animation sequence to use. \r\n - recursive: if set to true, the animation will be applied to all the entity's children recursively. \r\n - blend: a blend amount to modulate the current rotation and position with. This can be used to smoothly transition between two animation sequences, or to blend two animations together. \r\n - time: the frame number to set. If a fractional number is used, the animation will be interpolated between the closest two frames. \r\n - name: the name of the animation sequence to use, i.e. 'walk', 'run', 'attack', etc.",
        "body": [
            "SetAnimationFrame($time, $blend, $index, $recursive)"
        ]
    },
    "Entity:SetAnimationFrame ": {
        "prefix": "Entity:SetAnimationFrame ",
        "description": "Sets an entity to a specific animation frame. \r\n - index: the animation sequence to use. \r\n - recursive: if set to true, the animation will be applied to all the entity's children recursively. \r\n - blend: a blend amount to modulate the current rotation and position with. This can be used to smoothly transition between two animation sequences, or to blend two animations together. \r\n - time: the frame number to set. If a fractional number is used, the animation will be interpolated between the closest two frames. \r\n - name: the name of the animation sequence to use, i.e. 'walk', 'run', 'attack', etc.",
        "body": [
            "SetAnimationFrame($time, $blend, $name, $recursive)"
        ]
    },
    "SetAnimationFrame ": {
        "prefix": "SetAnimationFrame ",
        "description": "Sets an entity to a specific animation frame. \r\n - index: the animation sequence to use. \r\n - recursive: if set to true, the animation will be applied to all the entity's children recursively. \r\n - blend: a blend amount to modulate the current rotation and position with. This can be used to smoothly transition between two animation sequences, or to blend two animations together. \r\n - time: the frame number to set. If a fractional number is used, the animation will be interpolated between the closest two frames. \r\n - name: the name of the animation sequence to use, i.e. 'walk', 'run', 'attack', etc.",
        "body": [
            "SetAnimationFrame($time, $blend, $name, $recursive)"
        ]
    },
    "Entity:SetCollisionType": {
        "prefix": "Entity:SetCollisionType",
        "description": "Sets an entity's collision type. Collision types are used to control what kind of objects will register collisions when they come into contact. \r\n - recursive: if set to true, the collision type of all sub-objects will be set as well. \r\n - collisiontype: the entity collision type. This can be any integer between 0 and 99.",
        "body": [
            "SetCollisionType($collisiontype, $recursive)"
        ]
    },
    "SetCollisionType": {
        "prefix": "SetCollisionType",
        "description": "Sets an entity's collision type. Collision types are used to control what kind of objects will register collisions when they come into contact. \r\n - recursive: if set to true, the collision type of all sub-objects will be set as well. \r\n - collisiontype: the entity collision type. This can be any integer between 0 and 99.",
        "body": [
            "SetCollisionType($collisiontype, $recursive)"
        ]
    },
    "Entity:SetFriction": {
        "prefix": "Entity:SetFriction",
        "description": "Sets an entity's static and kinetic friction. \r\n - recursive: kineticfriction: the resistance that must be continually overcome as an object slides along a surface. \r\n - collisiontype: staticfriction: the resistance that must be overcome when an object at rest begins moving.",
        "body": [
            "SetFriction($staticfriction, $kineticfriction)"
        ]
    },
    "SetFriction": {
        "prefix": "SetFriction",
        "description": "Sets an entity's static and kinetic friction. \r\n - recursive: kineticfriction: the resistance that must be continually overcome as an object slides along a surface. \r\n - collisiontype: staticfriction: the resistance that must be overcome when an object at rest begins moving.",
        "body": [
            "SetFriction($staticfriction, $kineticfriction)"
        ]
    },
    "Entity:SetGravityMode": {
        "prefix": "Entity:SetGravityMode",
        "description": "This functions sets the entity gravity mode, which controls whether gravity affects the entity. \r\n - mode: if set to true, the entity will be affected by gravity, otherwise it will not.",
        "body": [
            "SetGravityMode($mode)"
        ]
    },
    "SetGravityMode": {
        "prefix": "SetGravityMode",
        "description": "This functions sets the entity gravity mode, which controls whether gravity affects the entity. \r\n - mode: if set to true, the entity will be affected by gravity, otherwise it will not.",
        "body": [
            "SetGravityMode($mode)"
        ]
    },
    "Entity:SetInput": {
        "prefix": "Entity:SetInput",
        "description": "This functions set the movement parameters of an entity that uses the CharacterPhysics physics mode.        When an entity uses character physics, the physics will control the object's rotation, and calls to Entity::SetRotation() and similar functions will have no effect. \r\n - angle: the angle the character faces. \r\n - move: the forward movement of the character. \r\n - strafe: the horizontal movement of the character. \r\n - jump: the jumping force to apply. \r\n - crouch: set to true for crouching mode (included for future development) \r\n - maxacceleration: the maximum acceleration the character may use to speed up. \r\n - maxdecelleration: the maximum acceleration the character may use to slow down. \r\n - detailed: set this to true for characters that have a camera mounted on them. This will provide more accurate physics, but will also be more expensive to calculate.",
        "body": [
            "SetInput($angle, $move, $strafe, $jump, $crouch, $maxaccel, $maxdecel, $detailed, $maxrotationspeed)"
        ]
    },
    "SetInput": {
        "prefix": "SetInput",
        "description": "This functions set the movement parameters of an entity that uses the CharacterPhysics physics mode.        When an entity uses character physics, the physics will control the object's rotation, and calls to Entity::SetRotation() and similar functions will have no effect. \r\n - angle: the angle the character faces. \r\n - move: the forward movement of the character. \r\n - strafe: the horizontal movement of the character. \r\n - jump: the jumping force to apply. \r\n - crouch: set to true for crouching mode (included for future development) \r\n - maxacceleration: the maximum acceleration the character may use to speed up. \r\n - maxdecelleration: the maximum acceleration the character may use to slow down. \r\n - detailed: set this to true for characters that have a camera mounted on them. This will provide more accurate physics, but will also be more expensive to calculate.",
        "body": [
            "SetInput($angle, $move, $strafe, $jump, $crouch, $maxaccel, $maxdecel, $detailed, $maxrotationspeed)"
        ]
    },
    "Entity:SetIntensity": {
        "prefix": "Entity:SetIntensity",
        "description": "This function sets the entity color intensity. \r\n - recursive: if set to true, the entity's children's intensities will be recursively set. \r\n - mode: the color to set. This may be Color::Diffuse or Color::Specular. \r\n - intensity: the intensity to set. The entity color will be multiplied by this value to calculate the final color.",
        "body": [
            "SetIntensity($intensity, $mode, $recursive)"
        ]
    },
    "SetIntensity": {
        "prefix": "SetIntensity",
        "description": "This function sets the entity color intensity. \r\n - recursive: if set to true, the entity's children's intensities will be recursively set. \r\n - mode: the color to set. This may be Color::Diffuse or Color::Specular. \r\n - intensity: the intensity to set. The entity color will be multiplied by this value to calculate the final color.",
        "body": [
            "SetIntensity($intensity, $mode, $recursive)"
        ]
    },
    "Entity:SetMass": {
        "prefix": "Entity:SetMass",
        "description": "Sets an entity's mass. \r\n - mass: the mass to set. When an entity is created, its mass is 0.0. \r\n - cx: center of mass x position. \r\n - cy: center of mass y position. \r\n - cz: center of mass z position. \r\n - ixx: center of mass x position. \r\n - iyy: center of mass y position.",
        "body": [
            "SetMass($mass)"
        ]
    },
    "SetMass": {
        "prefix": "SetMass",
        "description": "Sets an entity's mass. \r\n - mass: the mass to set. When an entity is created, its mass is 0.0. \r\n - cx: center of mass x position. \r\n - cy: center of mass y position. \r\n - cz: center of mass z position. \r\n - ixx: center of mass x position. \r\n - iyy: center of mass y position.",
        "body": [
            "SetMass($mass)"
        ]
    },
    "Entity:SetMass ": {
        "prefix": "Entity:SetMass ",
        "description": "Sets an entity's mass. \r\n - mass: the mass to set. When an entity is created, its mass is 0.0. \r\n - cx: center of mass x position. \r\n - cy: center of mass y position. \r\n - cz: center of mass z position. \r\n - ixx: center of mass x position. \r\n - iyy: center of mass y position.",
        "body": [
            "SetMass($mass, $cx, $cy, $cz, $ixx, $iyy, $izz)"
        ]
    },
    "SetMass ": {
        "prefix": "SetMass ",
        "description": "Sets an entity's mass. \r\n - mass: the mass to set. When an entity is created, its mass is 0.0. \r\n - cx: center of mass x position. \r\n - cy: center of mass y position. \r\n - cz: center of mass z position. \r\n - ixx: center of mass x position. \r\n - iyy: center of mass y position.",
        "body": [
            "SetMass($mass, $cx, $cy, $cz, $ixx, $iyy, $izz)"
        ]
    },
    "Entity:SetMaterial": {
        "prefix": "Entity:SetMaterial",
        "description": "This function sets an entity's material. \r\n - recursive: if set to true, the function will be called recursively for all children. \r\n - material: the new material to set. This value may be NULL if no material is to be used.",
        "body": [
            "SetMaterial($material, $recursive)"
        ]
    },
    "SetMaterial": {
        "prefix": "SetMaterial",
        "description": "This function sets an entity's material. \r\n - recursive: if set to true, the function will be called recursively for all children. \r\n - material: the new material to set. This value may be NULL if no material is to be used.",
        "body": [
            "SetMaterial($material, $recursive)"
        ]
    },
    "Entity:SetMatrix": {
        "prefix": "Entity:SetMatrix",
        "description": "This function sets an entity's 4x4 matrix and updates the position, rotation, and scale.",
        "body": [
            "SetMatrix($matrix, $global)"
        ]
    },
    "SetMatrix": {
        "prefix": "SetMatrix",
        "description": "This function sets an entity's 4x4 matrix and updates the position, rotation, and scale.",
        "body": [
            "SetMatrix($matrix, $global)"
        ]
    },
    "Entity:SetOmega": {
        "prefix": "Entity:SetOmega",
        "description": "This function sets an entity's angular velocity, without interrupting the physics simulation. \r\n - omega: the new angular velocity.",
        "body": [
            "SetOmega($omega, $global)"
        ]
    },
    "SetOmega": {
        "prefix": "SetOmega",
        "description": "This function sets an entity's angular velocity, without interrupting the physics simulation. \r\n - omega: the new angular velocity.",
        "body": [
            "SetOmega($omega, $global)"
        ]
    },
    "Entity:SetOmega ": {
        "prefix": "Entity:SetOmega ",
        "description": "This function sets an entity's angular velocity, without interrupting the physics simulation. \r\n - omega: the new angular velocity.",
        "body": [
            "SetOmega($x, $y, $z, $global)"
        ]
    },
    "SetOmega ": {
        "prefix": "SetOmega ",
        "description": "This function sets an entity's angular velocity, without interrupting the physics simulation. \r\n - omega: the new angular velocity.",
        "body": [
            "SetOmega($x, $y, $z, $global)"
        ]
    },
    "Entity:SetPhysicsMode": {
        "prefix": "Entity:SetPhysicsMode",
        "description": "Sets the entity physics mode. \r\n - mode: the physics mode to set. This value may be Entity::RigidBodyPhysics or Entity::CharacterPhysics.",
        "body": [
            "SetPhysicsMode($mode)"
        ]
    },
    "SetPhysicsMode": {
        "prefix": "SetPhysicsMode",
        "description": "Sets the entity physics mode. \r\n - mode: the physics mode to set. This value may be Entity::RigidBodyPhysics or Entity::CharacterPhysics.",
        "body": [
            "SetPhysicsMode($mode)"
        ]
    },
    "Entity:SetNavigationMode": {
        "prefix": "Entity:SetNavigationMode",
        "description": "This function sets an entity's pathfinding navigation mode. \r\n - recursive: set to true to recursively call this function for all the entity's children. \r\n - mode: if set to true, the entity will affect character pathfinding, otherwise the entity will be ignored when plotting paths.",
        "body": [
            "SetNavigationMode($mode, $recursive)"
        ]
    },
    "SetNavigationMode": {
        "prefix": "SetNavigationMode",
        "description": "This function sets an entity's pathfinding navigation mode. \r\n - recursive: set to true to recursively call this function for all the entity's children. \r\n - mode: if set to true, the entity will affect character pathfinding, otherwise the entity will be ignored when plotting paths.",
        "body": [
            "SetNavigationMode($mode, $recursive)"
        ]
    },
    "Entity:SetOcclusionCullingMode": {
        "prefix": "Entity:SetOcclusionCullingMode",
        "description": "This function sets the entity occlusion testing mode.",
        "body": [
            "SetOcclusionCullingMode($occlusionmode)"
        ]
    },
    "SetOcclusionCullingMode": {
        "prefix": "SetOcclusionCullingMode",
        "description": "This function sets the entity occlusion testing mode.",
        "body": [
            "SetOcclusionCullingMode($occlusionmode)"
        ]
    },
    "Entity:SetPickRadius": {
        "prefix": "Entity:SetPickRadius",
        "description": "This function sets an entity's pick radius, for use with the Pick::Sphere pick mode. \r\n - radius: the new pick radius to set.",
        "body": [
            "SetPickRadius($radius)"
        ]
    },
    "SetPickRadius": {
        "prefix": "SetPickRadius",
        "description": "This function sets an entity's pick radius, for use with the Pick::Sphere pick mode. \r\n - radius: the new pick radius to set.",
        "body": [
            "SetPickRadius($radius)"
        ]
    },
    "Entity:SetPosition": {
        "prefix": "Entity:SetPosition",
        "description": "Sets the position of an entity in 3-dimensional space, using local or global coordinates. \r\n - x: X component of the specified position. \r\n - Y: Y component of the specified position. \r\n - z: Z component of the specified position. \r\n - position: the position to set.",
        "body": [
            "SetPosition($x_number_y, $z, $global)"
        ]
    },
    "SetPosition": {
        "prefix": "SetPosition",
        "description": "Sets the position of an entity in 3-dimensional space, using local or global coordinates. \r\n - x: X component of the specified position. \r\n - Y: Y component of the specified position. \r\n - z: Z component of the specified position. \r\n - position: the position to set.",
        "body": [
            "SetPosition($x_number_y, $z, $global)"
        ]
    },
    "Entity:SetPosition ": {
        "prefix": "Entity:SetPosition ",
        "description": "Sets the position of an entity in 3-dimensional space, using local or global coordinates. \r\n - x: X component of the specified position. \r\n - Y: Y component of the specified position. \r\n - z: Z component of the specified position. \r\n - position: the position to set.",
        "body": [
            "SetPosition($position, $global)"
        ]
    },
    "SetPosition ": {
        "prefix": "SetPosition ",
        "description": "Sets the position of an entity in 3-dimensional space, using local or global coordinates. \r\n - x: X component of the specified position. \r\n - Y: Y component of the specified position. \r\n - z: Z component of the specified position. \r\n - position: the position to set.",
        "body": [
            "SetPosition($position, $global)"
        ]
    },
    "Entity:SetShadowMode": {
        "prefix": "Entity:SetShadowMode",
        "description": "This functions sets the entity shadow mode, which controls whether the entity casts shadows. \r\n - mode: this value may be 0 or a combination of the Light::None, Light::Static, Light::Dynamic, and Light::Buffered flags.",
        "body": [
            "SetShadowMode($mode)"
        ]
    },
    "SetShadowMode ": {
        "prefix": "SetShadowMode ",
        "description": "This functions sets the entity shadow mode, which controls whether the entity casts shadows. \r\n - mode: this value may be 0 or a combination of the Light::None, Light::Static, Light::Dynamic, and Light::Buffered flags.",
        "body": [
            "SetShadowMode($mode)"
        ]
    },
    "Entity:SetShape": {
        "prefix": "Entity:SetShape",
        "description": "This function sets the physics shape of an entity. \r\n - shape: the new shape to set.",
        "body": [
            "SetShape($shape)"
        ]
    },
    "SetShape": {
        "prefix": "SetShape",
        "description": "This function sets the physics shape of an entity. \r\n - shape: the new shape to set.",
        "body": [
            "SetShape($shape)"
        ]
    },
    "Entity:SetShape ": {
        "prefix": "Entity:SetShape ",
        "description": "This function sets the physics shape of an entity. \r\n - shape: the new shape to set.",
        "body": [
            "SetShape($shape, $mat)"
        ]
    },
    "SetShape ": {
        "prefix": "SetShape ",
        "description": "This function sets the physics shape of an entity. \r\n - shape: the new shape to set.",
        "body": [
            "SetShape($shape, $mat)"
        ]
    },
    "Entity:SetSweptCollisionMode": {
        "prefix": "Entity:SetSweptCollisionMode",
        "description": "This function sets the swept collision mode of an entity. Entities with swept collision enabled will have more accurate collisions that are more computationally expensive to process. Use this for small and thin objects if you have problems with them going through other entities. \r\n - mode: if set to true swept collision will be enabled, otherwise it will be disabled.",
        "body": [
            "SetSweptCollisionMode($mode)"
        ]
    },
    "SetSweptCollisionMode": {
        "prefix": "SetSweptCollisionMode",
        "description": "This function sets the swept collision mode of an entity. Entities with swept collision enabled will have more accurate collisions that are more computationally expensive to process. Use this for small and thin objects if you have problems with them going through other entities. \r\n - mode: if set to true swept collision will be enabled, otherwise it will be disabled.",
        "body": [
            "SetSweptCollisionMode($mode)"
        ]
    },
    "Entity:SetVelocity": {
        "prefix": "Entity:SetVelocity",
        "description": "This function sets an entity's velocity, without interrupting the physics simulation. \r\n - velocity: the new velocity vector.",
        "body": [
            "SetVelocity($velocity, $global)"
        ]
    },
    "SetVelocity ": {
        "prefix": "SetVelocity ",
        "description": "This function sets an entity's velocity, without interrupting the physics simulation. \r\n - velocity: the new velocity vector.",
        "body": [
            "SetVelocity($velocity, $global)"
        ]
    },
    "Entity:SetVelocity ": {
        "prefix": "Entity:SetVelocity ",
        "description": "This function sets an entity's velocity, without interrupting the physics simulation. \r\n - velocity: the new velocity vector.",
        "body": [
            "SetVelocity($x, $y, $z, $global)"
        ]
    },
    "SetVelocity  ": {
        "prefix": "SetVelocity  ",
        "description": "This function sets an entity's velocity, without interrupting the physics simulation. \r\n - velocity: the new velocity vector.",
        "body": [
            "SetVelocity($x, $y, $z, $global)"
        ]
    },
    "Entity:Translate": {
        "prefix": "Entity:Translate",
        "description": "Moves an entity along its parent axes in local or global space. \r\n - x: the X component of the translation to apply. \r\n - Y: the Y component of the translation to apply. \r\n - z: the Z component of the translation to apply.",
        "body": [
            "Translate($x, $y, $z, $global)"
        ]
    },
    "Translate": {
        "prefix": "Translate",
        "description": "Moves an entity along its parent axes in local or global space. \r\n - x: the X component of the translation to apply. \r\n - Y: the Y component of the translation to apply. \r\n - z: the Z component of the translation to apply.",
        "body": [
            "Translate($x, $y, $z, $global)"
        ]
    },
    "Entity:Turn": {
        "prefix": "Entity:Turn",
        "description": "Turns an entity by the specified euler rotation in local or global space. This function is more accurate than simply adding units to the rotation axes and will avoid problems with Gimbal lock. \r\n - pitch: the X component of the rotation to apply.. \r\n - yaw: the Y component of the rotation to apply. \r\n - roll: the Z component of the rotation to apply.",
        "body": [
            "Turn($pitch, $yaw, $roll, $global);"
        ]
    },
    "Turn": {
        "prefix": "Turn",
        "description": "Turns an entity by the specified euler rotation in local or global space. This function is more accurate than simply adding units to the rotation axes and will avoid problems with Gimbal lock. \r\n - pitch: the X component of the rotation to apply.. \r\n - yaw: the Y component of the rotation to apply. \r\n - roll: the Z component of the rotation to apply.",
        "body": [
            "Turn($pitch, $yaw, $roll, $global);"
        ]
    },
    "FileSystem:CopyFile": {
        "prefix": "FileSystem:CopyFile",
        "description": "This function copies a file from one location to another.",
        "body": [
            "bool CopyFile($src, $dst)"
        ]
    },
    "CopyFile": {
        "prefix": "CopyFile",
        "description": "This function copies a file from one location to another.",
        "body": [
            "bool CopyFile($src, $dst)"
        ]
    },
    "FileSystem:CreateDir": {
        "prefix": "FileSystem:CreateDir",
        "description": "This function creates a new directory. \r\n - recursive: if set to true, this will create any missing folders in the specified path.",
        "body": [
            "bool CreateDir($path, $recursive)"
        ]
    },
    "CreateDir": {
        "prefix": "CreateDir",
        "description": "This function creates a new directory. \r\n - recursive: if set to true, this will create any missing folders in the specified path.",
        "body": [
            "bool CreateDir($path, $recursive)"
        ]
    },
    "FileSystem:CopyDir": {
        "prefix": "FileSystem:CopyDir",
        "description": "This function copies a directory from one location to another.",
        "body": [
            "bool CopyDir($src, $dst)"
        ]
    },
    "CopyDir": {
        "prefix": "CopyDir",
        "description": "This function copies a directory from one location to another.",
        "body": [
            "bool CopyDir($src, $dst)"
        ]
    },
    "FileSystem:DeleteDir": {
        "prefix": "FileSystem:DeleteDir",
        "description": "This function deletes a directory. \r\n - recursive: if set to true, the function will delete all contents of the directory, otherwise the directory will not be deleted if it contains files.",
        "body": [
            "bool DeleteDir($path, $recursive)"
        ]
    },
    "DeleteDir": {
        "prefix": "DeleteDir",
        "description": "This function deletes a directory. \r\n - recursive: if set to true, the function will delete all contents of the directory, otherwise the directory will not be deleted if it contains files.",
        "body": [
            "bool DeleteDir($path, $recursive)"
        ]
    },
    "FileSystem:DeleteFile": {
        "prefix": "FileSystem:DeleteFile",
        "description": "This function deletes a file.",
        "body": [
            "bool DeleteFile($path)"
        ]
    },
    "DeleteFile": {
        "prefix": "DeleteFile",
        "description": "This function deletes a file.",
        "body": [
            "bool DeleteFile($path)"
        ]
    },
    "FileSystem:ExtractDir": {
        "prefix": "FileSystem:ExtractDir",
        "description": "This function returns the directory part of a file path.",
        "body": [
            "string ExtractDir($path)"
        ]
    },
    "ExtractDir": {
        "prefix": "ExtractDir",
        "description": "This function returns the directory part of a file path.",
        "body": [
            "string ExtractDir($path)"
        ]
    },
    "FileSystem:GetFileSize": {
        "prefix": "FileSystem:GetFileSize",
        "description": "This functions gets a file's size.",
        "body": [
            "int GetFileSize($path)"
        ]
    },
    "GetFileSize": {
        "prefix": "GetFileSize",
        "description": "This functions gets a file's size.",
        "body": [
            "int GetFileSize($path)"
        ]
    },
    "FileSystem:GetFileTime": {
        "prefix": "FileSystem:GetFileTime",
        "description": "This function returns the time a file was last modified.",
        "body": [
            "number GetFileTime($path)"
        ]
    },
    "GetFileTime": {
        "prefix": "GetFileTime",
        "description": "This function returns the time a file was last modified.",
        "body": [
            "number GetFileTime($path)"
        ]
    },
    "FileSystem:GetFileType": {
        "prefix": "FileSystem:GetFileType",
        "description": "This function gets the file type of a file.",
        "body": [
            "number GetFileType($path)"
        ]
    },
    "GetFileType": {
        "prefix": "GetFileType",
        "description": "This function gets the file type of a file.",
        "body": [
            "number GetFileType($path)"
        ]
    },
    "FileSystem:OpenFile": {
        "prefix": "FileSystem:OpenFile",
        "description": "This function opens a file with read and write access.",
        "body": [
            "Stream OpenFile($path)"
        ]
    },
    "OpenFile": {
        "prefix": "OpenFile",
        "description": "This function opens a file with read and write access.",
        "body": [
            "Stream OpenFile($path)"
        ]
    },
    "FileSystem:ReadFile": {
        "prefix": "FileSystem:ReadFile",
        "description": "This function opens a file with read access.",
        "body": [
            "static Stream ReadFile($path)"
        ]
    },
    "ReadFile": {
        "prefix": "ReadFile",
        "description": "This function opens a file with read access.",
        "body": [
            "static Stream ReadFile($path)"
        ]
    },
    "FileSystem:RealPath": {
        "prefix": "FileSystem:RealPath",
        "description": "This function returns a formatted file path name.",
        "body": [
            "string RealPath($path)"
        ]
    },
    "RealPath": {
        "prefix": "RealPath",
        "description": "This function returns a formatted file path name.",
        "body": [
            "string RealPath($path)"
        ]
    },
    "FileSystem:RenameDir": {
        "prefix": "FileSystem:RenameDir",
        "description": "This function renames a directory.",
        "body": [
            "bool RenameDir($src, $dst)"
        ]
    },
    "RenameDir": {
        "prefix": "RenameDir",
        "description": "This function renames a directory.",
        "body": [
            "bool RenameDir($src, $dst)"
        ]
    },
    "FileSystem:RenameFile": {
        "prefix": "FileSystem:RenameFile",
        "description": "This function renames a file.",
        "body": [
            "static bool RenameFile($src, $dst)"
        ]
    },
    "RenameFile": {
        "prefix": "RenameFile",
        "description": "This function renames a file.",
        "body": [
            "static bool RenameFile($src, $dst)"
        ]
    },
    "FileSystem:SetDir": {
        "prefix": "FileSystem:SetDir",
        "description": "This function sets the current directory.",
        "body": [
            "bool SetDir($path)"
        ]
    },
    "SetDir": {
        "prefix": "SetDir",
        "description": "This function sets the current directory.",
        "body": [
            "bool SetDir($path)"
        ]
    },
    "FileSystem:StripAll": {
        "prefix": "FileSystem:StripAll",
        "description": "This function removes the directory and extension parts of a file path.",
        "body": [
            "string StripAll($path)"
        ]
    },
    "StripAll": {
        "prefix": "StripAll",
        "description": "This function removes the directory and extension parts of a file path.",
        "body": [
            "string StripAll($path)"
        ]
    },
    "FileSystem:StripDir": {
        "prefix": "FileSystem:StripDir",
        "description": "This function removes the directory part of a file path.",
        "body": [
            "string StripDir($path)"
        ]
    },
    "StripDir": {
        "prefix": "StripDir",
        "description": "This function removes the directory part of a file path.",
        "body": [
            "string StripDir($path)"
        ]
    },
    "FileSystem:StripExt": {
        "prefix": "FileSystem:StripExt",
        "description": "This function removes the file extension from a file path.",
        "body": [
            "string StripExt($path)"
        ]
    },
    "StripExt": {
        "prefix": "StripExt",
        "description": "This function removes the file extension from a file path.",
        "body": [
            "string StripExt($path)"
        ]
    },
    "FileSystem:WriteFile": {
        "prefix": "FileSystem:WriteFile",
        "description": "This function creates a new file and opens it with write access. If the file already exists, it will be overwritten.",
        "body": [
            "Stream WriteFile($path)"
        ]
    },
    "WriteFile": {
        "prefix": "WriteFile",
        "description": "This function creates a new file and opens it with write access. If the file already exists, it will be overwritten.",
        "body": [
            "Stream WriteFile($path)"
        ]
    },
    "GUI:Create": {
        "prefix": "GUI:Create",
        "description": "This function creates a new GUI on the specified context. A GUI must be created before widgets can be added to build the interface.",
        "body": [
            "global GUI Create($context)"
        ]
    },
    "Create            ": {
        "prefix": "Create            ",
        "description": "This function creates a new GUI on the specified context. A GUI must be created before widgets can be added to build the interface.",
        "body": [
            "global GUI Create($context)"
        ]
    },
    "Joint:Ball": {
        "prefix": "Joint:Ball",
        "description": "This function creates a new ball and socket joint.",
        "body": [
            "Joint Ball($posx, $posy, $posz, $child, $parent)"
        ]
    },
    "Ball": {
        "prefix": "Ball",
        "description": "This function creates a new ball and socket joint.",
        "body": [
            "Joint Ball($posx, $posy, $posz, $child, $parent)"
        ]
    },
    "Joint:Hinge": {
        "prefix": "Joint:Hinge",
        "description": "This function creates a new hinge joint.",
        "body": [
            "Joint Hinge($posx, $posy, $posz, $pinx, $piny, $pinz, $child, $parent)"
        ]
    },
    "Hinge": {
        "prefix": "Hinge",
        "description": "This function creates a new hinge joint.",
        "body": [
            "Joint Hinge($posx, $posy, $posz, $pinx, $piny, $pinz, $child, $parent)"
        ]
    },
    "Joint:Kinematic": {
        "prefix": "Joint:Kinematic",
        "description": "This function creates a new kinematic joint. A kinematic joint only attaches to one entity and can be used to force that entity to move to a specific position and rotation, using the SetTargetPosition, SetTargetRotation, and SetTargetMatrix commands. The SetFriction command can be used to control the maximum friction the joint can apply, to make a kinematic controller that only affects the position, rotation, or both. \r\n - entity: the entity to attach to.",
        "body": [
            "Joint Kinematic($posx, $posy, $posz, $entity)"
        ]
    },
    "Kinematic": {
        "prefix": "Kinematic",
        "description": "This function creates a new kinematic joint. A kinematic joint only attaches to one entity and can be used to force that entity to move to a specific position and rotation, using the SetTargetPosition, SetTargetRotation, and SetTargetMatrix commands. The SetFriction command can be used to control the maximum friction the joint can apply, to make a kinematic controller that only affects the position, rotation, or both. \r\n - entity: the entity to attach to.",
        "body": [
            "Joint Kinematic($posx, $posy, $posz, $entity)"
        ]
    },
    "Joint:SetFriction": {
        "prefix": "Joint:SetFriction",
        "description": "This function is used to set the friction level for a hinge or kinematic joint.",
        "body": [
            "SetFriction($angularfriction)"
        ]
    },
    "SetFriction ": {
        "prefix": "SetFriction ",
        "description": "This function is used to set the friction level for a hinge or kinematic joint.",
        "body": [
            "SetFriction($angularfriction)"
        ]
    },
    "Joint:SetFriction ": {
        "prefix": "Joint:SetFriction ",
        "description": "This function is used to set the friction level for a hinge or kinematic joint.",
        "body": [
            "SetFriction($angularfriction, $linearfriction)"
        ]
    },
    "SetFriction  ": {
        "prefix": "SetFriction  ",
        "description": "This function is used to set the friction level for a hinge or kinematic joint.",
        "body": [
            "SetFriction($angularfriction, $linearfriction)"
        ]
    },
    "Joint:SetLimits": {
        "prefix": "Joint:SetLimits",
        "description": "This functions sets the limits of a joint. The joint must have limits enabled using the EnableLimits command for this to have any effect.",
        "body": [
            "SetLimits($limit0, $limit1)"
        ]
    },
    "SetLimits": {
        "prefix": "SetLimits",
        "description": "This functions sets the limits of a joint. The joint must have limits enabled using the EnableLimits command for this to have any effect.",
        "body": [
            "SetLimits($limit0, $limit1)"
        ]
    },
    "Joint:SetMotorSpeed": {
        "prefix": "Joint:SetMotorSpeed",
        "description": "This sets the speed at which a hinge or slider actuator moves towards its target angle or position. \r\n - speed: the speed at which the motor moves. This is in degrees per second for hinge joints and meters per second for slider joints.",
        "body": [
            "SetMotorSpeed($speed)"
        ]
    },
    "SetMotorSpeed": {
        "prefix": "SetMotorSpeed",
        "description": "This sets the speed at which a hinge or slider actuator moves towards its target angle or position. \r\n - speed: the speed at which the motor moves. This is in degrees per second for hinge joints and meters per second for slider joints.",
        "body": [
            "SetMotorSpeed($speed)"
        ]
    },
    "Joint:SetSpring": {
        "prefix": "Joint:SetSpring",
        "description": "This function sets the spring value of a slider or hinge joint. A value of zero will disable the spring behavior.",
        "body": [
            "SetSpring($spring)"
        ]
    },
    "SetSpring": {
        "prefix": "SetSpring",
        "description": "This function sets the spring value of a slider or hinge joint. A value of zero will disable the spring behavior.",
        "body": [
            "SetSpring($spring)"
        ]
    },
    "Joint:SetTargetAngle": {
        "prefix": "Joint:SetTargetAngle",
        "description": "This function sets the angle a joint motor will move towards. The joint motor must be enabled with the EnableMotor command for this to have any effect. \r\n - angle: For hinges, this is the angle the joint will rotate to match. For sliders, this is the position the joint will move to match.",
        "body": [
            "SetTargetAngle($angle)"
        ]
    },
    "SetTargetAngle": {
        "prefix": "SetTargetAngle",
        "description": "This function sets the angle a joint motor will move towards. The joint motor must be enabled with the EnableMotor command for this to have any effect. \r\n - angle: For hinges, this is the angle the joint will rotate to match. For sliders, this is the position the joint will move to match.",
        "body": [
            "SetTargetAngle($angle)"
        ]
    },
    "Joint:SetTargetPosition": {
        "prefix": "Joint:SetTargetPosition",
        "description": "This function is used to set the position a kinematic joint moves the attached entity to. \r\n - x: x component of the position to move the attached entity to. \r\n - Y: y component of the position to move the attached entity to. \r\n - z: z component of the position to move the attached entity to. \r\n - position: position to move the attached entity to.",
        "body": [
            "SetTargetPosition($x, $y, $z, $blend)"
        ]
    },
    "SetTargetPosition": {
        "prefix": "SetTargetPosition",
        "description": "This function is used to set the position a kinematic joint moves the attached entity to. \r\n - x: x component of the position to move the attached entity to. \r\n - Y: y component of the position to move the attached entity to. \r\n - z: z component of the position to move the attached entity to. \r\n - position: position to move the attached entity to.",
        "body": [
            "SetTargetPosition($x, $y, $z, $blend)"
        ]
    },
    "Joint:SetTargetPosition ": {
        "prefix": "Joint:SetTargetPosition ",
        "description": "This function is used to set the position a kinematic joint moves the attached entity to. \r\n - x: x component of the position to move the attached entity to. \r\n - Y: y component of the position to move the attached entity to. \r\n - z: z component of the position to move the attached entity to. \r\n - position: position to move the attached entity to.",
        "body": [
            "SetTargetPosition($position, $blend)"
        ]
    },
    "SetTargetPosition ": {
        "prefix": "SetTargetPosition ",
        "description": "This function is used to set the position a kinematic joint moves the attached entity to. \r\n - x: x component of the position to move the attached entity to. \r\n - Y: y component of the position to move the attached entity to. \r\n - z: z component of the position to move the attached entity to. \r\n - position: position to move the attached entity to.",
        "body": [
            "SetTargetPosition($position, $blend)"
        ]
    },
    "Joint:SetTargetRotation": {
        "prefix": "Joint:SetTargetRotation",
        "description": "This function is used to set the rotation a kinematic joint turns the attached entity to. \r\n - x: pitch of the rotation to turn the attached entity to. \r\n - Y: yaw of the rotation to turn the attached entity to. \r\n - z: roll of the rotation to turn the attached entity to.",
        "body": [
            "SetTargetRotation($x, $y, $z, $blend)"
        ]
    },
    "SetTargetRotation": {
        "prefix": "SetTargetRotation",
        "description": "This function is used to set the rotation a kinematic joint turns the attached entity to. \r\n - x: pitch of the rotation to turn the attached entity to. \r\n - Y: yaw of the rotation to turn the attached entity to. \r\n - z: roll of the rotation to turn the attached entity to.",
        "body": [
            "SetTargetRotation($x, $y, $z, $blend)"
        ]
    },
    "Joint:SetTargetRotation ": {
        "prefix": "Joint:SetTargetRotation ",
        "description": "This function is used to set the rotation a kinematic joint turns the attached entity to. \r\n - x: pitch of the rotation to turn the attached entity to. \r\n - Y: yaw of the rotation to turn the attached entity to. \r\n - z: roll of the rotation to turn the attached entity to.",
        "body": [
            "SetTargetRotation($rotation, $blend)"
        ]
    },
    "SetTargetRotation ": {
        "prefix": "SetTargetRotation ",
        "description": "This function is used to set the rotation a kinematic joint turns the attached entity to. \r\n - x: pitch of the rotation to turn the attached entity to. \r\n - Y: yaw of the rotation to turn the attached entity to. \r\n - z: roll of the rotation to turn the attached entity to.",
        "body": [
            "SetTargetRotation($rotation, $blend)"
        ]
    },
    "Joint:SetTargetMatrix": {
        "prefix": "Joint:SetTargetMatrix",
        "description": "This function is used to set the matrix a kinematic joint uses to orient the attached entity.",
        "body": [
            "SetTargetMatrix($matrix)"
        ]
    },
    "SetTargetMatrix": {
        "prefix": "SetTargetMatrix",
        "description": "This function is used to set the matrix a kinematic joint uses to orient the attached entity.",
        "body": [
            "SetTargetMatrix($matrix)"
        ]
    },
    "Joint:Slider": {
        "prefix": "Joint:Slider",
        "description": "static Joint* Slider(float posx, float posy, float posz, float pinx, float piny, float pinz, Entity* child, Entity* parent=NULL)",
        "body": [
            "Shape PolyMesh($surface)"
        ]
    },
    "Slider": {
        "prefix": "Slider",
        "description": "static Joint* Slider(float posx, float posy, float posz, float pinx, float piny, float pinz, Entity* child, Entity* parent=NULL)",
        "body": [
            "Shape PolyMesh($surface)"
        ]
    },
    "Map:Load": {
        "prefix": "Map:Load",
        "description": "This function loads a Leadwerks map (*.map) file.",
        "body": [
            "bool Load($path, $flags)"
        ]
    },
    "Load     ": {
        "prefix": "Load     ",
        "description": "This function loads a Leadwerks map (*.map) file.",
        "body": [
            "bool Load($path, $flags)"
        ]
    },
    "Map:Load ": {
        "prefix": "Map:Load ",
        "description": "This function loads a Leadwerks map (*.map) file.",
        "body": [
            "bool Load($path, $entity, $extra), Object extra=NULL, number flags=LoadScripts);"
        ]
    },
    "Load      ": {
        "prefix": "Load      ",
        "description": "This function loads a Leadwerks map (*.map) file.",
        "body": [
            "bool Load($path, $entity, $extra), Object extra=NULL, number flags=LoadScripts);"
        ]
    },
    "Map:Load  ": {
        "prefix": "Map:Load  ",
        "description": "This function loads a Leadwerks map (*.map) file.",
        "body": [
            "bool Load($path, $hookname, $extra, $flags);"
        ]
    },
    "Load       ": {
        "prefix": "Load       ",
        "description": "This function loads a Leadwerks map (*.map) file.",
        "body": [
            "bool Load($path, $hookname, $extra, $flags);"
        ]
    },
    "AABB:DistanceToPoint": {
        "prefix": "AABB:DistanceToPoint",
        "description": "This function returns the shortest distance between the point and the AABB. \r\n - radius: an optional radius value can be used to test a sphere.",
        "body": [
            "number DistanceToPoint($point, $radius)"
        ]
    },
    "DistanceToPoint": {
        "prefix": "DistanceToPoint",
        "description": "This function returns the shortest distance between the point and the AABB. \r\n - radius: an optional radius value can be used to test a sphere.",
        "body": [
            "number DistanceToPoint($point, $radius)"
        ]
    },
    "AABB:IntersectsPlane": {
        "prefix": "AABB:IntersectsPlane",
        "description": "This function performs an intersection test between an AABB and a plane.",
        "body": [
            "number IntersectsPlane($plane)"
        ]
    },
    "IntersectsPlane": {
        "prefix": "IntersectsPlane",
        "description": "This function performs an intersection test between an AABB and a plane.",
        "body": [
            "number IntersectsPlane($plane)"
        ]
    },
    "AABB:IntersectsPoint": {
        "prefix": "AABB:IntersectsPoint",
        "description": "This function performs an intersection test between an AABB and a point. \r\n - radius: an optional radius value can be used to test a sphere.",
        "body": [
            "bool IntersectsPoint($p, $radius)"
        ]
    },
    "IntersectsPoint": {
        "prefix": "IntersectsPoint",
        "description": "This function performs an intersection test between an AABB and a point. \r\n - radius: an optional radius value can be used to test a sphere.",
        "body": [
            "bool IntersectsPoint($p, $radius)"
        ]
    },
    "AABB:IntersectsRay": {
        "prefix": "AABB:IntersectsRay",
        "description": "This function performs an intersection test between an AABB and a line. \r\n - p0: the starting point of the line. \r\n - p1: the end point of the line. \r\n - radius: an optional radius value can be used to test intersection with a cylinder.",
        "body": [
            "bool IntersectsLine($p0, $p1, $radius)"
        ]
    },
    "IntersectsRay": {
        "prefix": "IntersectsRay",
        "description": "This function performs an intersection test between an AABB and a line. \r\n - p0: the starting point of the line. \r\n - p1: the end point of the line. \r\n - radius: an optional radius value can be used to test intersection with a cylinder.",
        "body": [
            "bool IntersectsLine($p0, $p1, $radius)"
        ]
    },
    "Plane:DistanceToPoint": {
        "prefix": "Plane:DistanceToPoint",
        "description": "This function returns the shortest distance between a plane and a point in space. If the distance is less then one, the point is behind the plane. If the distance is greater than one, the point is in front of the plane. If the distance is zero, the point lies directly on the plane. \r\n - x: the X component of the point to check the distance to. \r\n - Y: the Y component of the point to check the distance to. \r\n - z: the Z component of the point to check the distance to.",
        "body": [
            "number DistanceToPoint($p)"
        ]
    },
    "DistanceToPoint ": {
        "prefix": "DistanceToPoint ",
        "description": "This function returns the shortest distance between a plane and a point in space. If the distance is less then one, the point is behind the plane. If the distance is greater than one, the point is in front of the plane. If the distance is zero, the point lies directly on the plane. \r\n - x: the X component of the point to check the distance to. \r\n - Y: the Y component of the point to check the distance to. \r\n - z: the Z component of the point to check the distance to.",
        "body": [
            "number DistanceToPoint($p)"
        ]
    },
    "Plane:DistanceToPoint ": {
        "prefix": "Plane:DistanceToPoint ",
        "description": "This function returns the shortest distance between a plane and a point in space. If the distance is less then one, the point is behind the plane. If the distance is greater than one, the point is in front of the plane. If the distance is zero, the point lies directly on the plane. \r\n - x: the X component of the point to check the distance to. \r\n - Y: the Y component of the point to check the distance to. \r\n - z: the Z component of the point to check the distance to.",
        "body": [
            "number DistanceToPoint($x, $y, $z)"
        ]
    },
    "DistanceToPoint  ": {
        "prefix": "DistanceToPoint  ",
        "description": "This function returns the shortest distance between a plane and a point in space. If the distance is less then one, the point is behind the plane. If the distance is greater than one, the point is in front of the plane. If the distance is zero, the point lies directly on the plane. \r\n - x: the X component of the point to check the distance to. \r\n - Y: the Y component of the point to check the distance to. \r\n - z: the Z component of the point to check the distance to.",
        "body": [
            "number DistanceToPoint($x, $y, $z)"
        ]
    },
    "Plane:IntersectsLine": {
        "prefix": "Plane:IntersectsLine",
        "description": "This function performs an intersection test between a plane and a line in space. \r\n - p0: the starting point of the line. \r\n - p1: the terminal point of the line.",
        "body": [
            "bool IntersectsLine($p0, $p1, $result)"
        ]
    },
    "IntersectsLine": {
        "prefix": "IntersectsLine",
        "description": "This function performs an intersection test between a plane and a line in space. \r\n - p0: the starting point of the line. \r\n - p1: the terminal point of the line.",
        "body": [
            "bool IntersectsLine($p0, $p1, $result)"
        ]
    },
    "Quat:Slerp": {
        "prefix": "Quat:Slerp",
        "description": "'Slerp' is shorthand for for Spherical Linear Interpolation. This command provides a way to smoothly interpolate between two arbitrary quaternion rotations. This provides accurate results when dealing with rotations on multiple axes.",
        "body": [
            "Quat Slerp($target, $distance)"
        ]
    },
    "Slerp": {
        "prefix": "Slerp",
        "description": "'Slerp' is shorthand for for Spherical Linear Interpolation. This command provides a way to smoothly interpolate between two arbitrary quaternion rotations. This provides accurate results when dealing with rotations on multiple axes.",
        "body": [
            "Quat Slerp($target, $distance)"
        ]
    },
    "Transform:Normal": {
        "prefix": "Transform:Normal",
        "description": "This function transforms a normal from one space to another. It will give the same results as Transform::Vector except the resulting vector will be normalized. \r\n - x: the X component of the normal to be transformed. \r\n - Y: the Y component of the normal to be transformed. \r\n - z: the Z component of the normal to be transformed.",
        "body": [
            "Vec3 Normal($normal, $src, $dst)"
        ]
    },
    "Normal": {
        "prefix": "Normal",
        "description": "This function transforms a normal from one space to another. It will give the same results as Transform::Vector except the resulting vector will be normalized. \r\n - x: the X component of the normal to be transformed. \r\n - Y: the Y component of the normal to be transformed. \r\n - z: the Z component of the normal to be transformed.",
        "body": [
            "Vec3 Normal($normal, $src, $dst)"
        ]
    },
    "Transform:Normal ": {
        "prefix": "Transform:Normal ",
        "description": "This function transforms a normal from one space to another. It will give the same results as Transform::Vector except the resulting vector will be normalized. \r\n - x: the X component of the normal to be transformed. \r\n - Y: the Y component of the normal to be transformed. \r\n - z: the Z component of the normal to be transformed.",
        "body": [
            "Vec3 Normal($x, $y, $z, $src, $dst)"
        ]
    },
    "Normal ": {
        "prefix": "Normal ",
        "description": "This function transforms a normal from one space to another. It will give the same results as Transform::Vector except the resulting vector will be normalized. \r\n - x: the X component of the normal to be transformed. \r\n - Y: the Y component of the normal to be transformed. \r\n - z: the Z component of the normal to be transformed.",
        "body": [
            "Vec3 Normal($x, $y, $z, $src, $dst)"
        ]
    },
    "Transform:Normal  ": {
        "prefix": "Transform:Normal  ",
        "description": "This function transforms a normal from one space to another. It will give the same results as Transform::Vector except the resulting vector will be normalized. \r\n - x: the X component of the normal to be transformed. \r\n - Y: the Y component of the normal to be transformed. \r\n - z: the Z component of the normal to be transformed.",
        "body": [
            "Vec3 Normal($normal, $src, $dst)"
        ]
    },
    "Normal  ": {
        "prefix": "Normal  ",
        "description": "This function transforms a normal from one space to another. It will give the same results as Transform::Vector except the resulting vector will be normalized. \r\n - x: the X component of the normal to be transformed. \r\n - Y: the Y component of the normal to be transformed. \r\n - z: the Z component of the normal to be transformed.",
        "body": [
            "Vec3 Normal($normal, $src, $dst)"
        ]
    },
    "Transform:Normal   ": {
        "prefix": "Transform:Normal   ",
        "description": "This function transforms a normal from one space to another. It will give the same results as Transform::Vector except the resulting vector will be normalized. \r\n - x: the X component of the normal to be transformed. \r\n - Y: the Y component of the normal to be transformed. \r\n - z: the Z component of the normal to be transformed.",
        "body": [
            "Vec3 Normal($x, $y, $z, $src, $dst)"
        ]
    },
    "Normal   ": {
        "prefix": "Normal   ",
        "description": "This function transforms a normal from one space to another. It will give the same results as Transform::Vector except the resulting vector will be normalized. \r\n - x: the X component of the normal to be transformed. \r\n - Y: the Y component of the normal to be transformed. \r\n - z: the Z component of the normal to be transformed.",
        "body": [
            "Vec3 Normal($x, $y, $z, $src, $dst)"
        ]
    },
    "Transform:Plane": {
        "prefix": "Transform:Plane",
        "description": "This function transforms a plane from one space to another. \r\n - x: the X component of the normal to be transformed. \r\n - Y: the Y component of the normal to be transformed. \r\n - z: the Z component of the normal to be transformed.",
        "body": [
            "Plane Plane($plane, $src, $dst)"
        ]
    },
    "Plane": {
        "prefix": "Plane",
        "description": "This function transforms a plane from one space to another. \r\n - x: the X component of the normal to be transformed. \r\n - Y: the Y component of the normal to be transformed. \r\n - z: the Z component of the normal to be transformed.",
        "body": [
            "Plane Plane($plane, $src, $dst)"
        ]
    },
    "Transform:Plane ": {
        "prefix": "Transform:Plane ",
        "description": "This function transforms a plane from one space to another. \r\n - x: the X component of the normal to be transformed. \r\n - Y: the Y component of the normal to be transformed. \r\n - z: the Z component of the normal to be transformed.",
        "body": [
            "Plane Plane($plane, $src, $dst)"
        ]
    },
    "Plane ": {
        "prefix": "Plane ",
        "description": "This function transforms a plane from one space to another. \r\n - x: the X component of the normal to be transformed. \r\n - Y: the Y component of the normal to be transformed. \r\n - z: the Z component of the normal to be transformed.",
        "body": [
            "Plane Plane($plane, $src, $dst)"
        ]
    },
    "Transform:Plane  ": {
        "prefix": "Transform:Plane  ",
        "description": "This function transforms a plane from one space to another. \r\n - x: the X component of the normal to be transformed. \r\n - Y: the Y component of the normal to be transformed. \r\n - z: the Z component of the normal to be transformed.",
        "body": [
            "Plane Plane($x, $y, $z, $w, $src, $dst)"
        ]
    },
    "Plane  ": {
        "prefix": "Plane  ",
        "description": "This function transforms a plane from one space to another. \r\n - x: the X component of the normal to be transformed. \r\n - Y: the Y component of the normal to be transformed. \r\n - z: the Z component of the normal to be transformed.",
        "body": [
            "Plane Plane($x, $y, $z, $w, $src, $dst)"
        ]
    },
    "Transform:Plane   ": {
        "prefix": "Transform:Plane   ",
        "description": "This function transforms a plane from one space to another. \r\n - x: the X component of the normal to be transformed. \r\n - Y: the Y component of the normal to be transformed. \r\n - z: the Z component of the normal to be transformed.",
        "body": [
            "Plane Plane($x, $y, $z, $w, $src, $dst)"
        ]
    },
    "Plane   ": {
        "prefix": "Plane   ",
        "description": "This function transforms a plane from one space to another. \r\n - x: the X component of the normal to be transformed. \r\n - Y: the Y component of the normal to be transformed. \r\n - z: the Z component of the normal to be transformed.",
        "body": [
            "Plane Plane($x, $y, $z, $w, $src, $dst)"
        ]
    },
    "Transform:Point": {
        "prefix": "Transform:Point",
        "description": "This function transforms a point from one space to another. \r\n - x: the X component of the point to be transformed. \r\n - Y: the Y component of the point to be transformed. \r\n - z: the Z component of the point to be transformed.",
        "body": [
            "Vec3 Point($point, $src, $dst)"
        ]
    },
    "Point ": {
        "prefix": "Point ",
        "description": "This function transforms a point from one space to another. \r\n - x: the X component of the point to be transformed. \r\n - Y: the Y component of the point to be transformed. \r\n - z: the Z component of the point to be transformed.",
        "body": [
            "Vec3 Point($point, $src, $dst)"
        ]
    },
    "Transform:Point ": {
        "prefix": "Transform:Point ",
        "description": "This function transforms a point from one space to another. \r\n - x: the X component of the point to be transformed. \r\n - Y: the Y component of the point to be transformed. \r\n - z: the Z component of the point to be transformed.",
        "body": [
            "Vec3 Point($x, $y, $z, $src, $dst)"
        ]
    },
    "Point  ": {
        "prefix": "Point  ",
        "description": "This function transforms a point from one space to another. \r\n - x: the X component of the point to be transformed. \r\n - Y: the Y component of the point to be transformed. \r\n - z: the Z component of the point to be transformed.",
        "body": [
            "Vec3 Point($x, $y, $z, $src, $dst)"
        ]
    },
    "Transform:Point  ": {
        "prefix": "Transform:Point  ",
        "description": "This function transforms a point from one space to another. \r\n - x: the X component of the point to be transformed. \r\n - Y: the Y component of the point to be transformed. \r\n - z: the Z component of the point to be transformed.",
        "body": [
            "Vec3 Point($point, $src, $dst)"
        ]
    },
    "Point   ": {
        "prefix": "Point   ",
        "description": "This function transforms a point from one space to another. \r\n - x: the X component of the point to be transformed. \r\n - Y: the Y component of the point to be transformed. \r\n - z: the Z component of the point to be transformed.",
        "body": [
            "Vec3 Point($point, $src, $dst)"
        ]
    },
    "Transform:Point   ": {
        "prefix": "Transform:Point   ",
        "description": "This function transforms a point from one space to another. \r\n - x: the X component of the point to be transformed. \r\n - Y: the Y component of the point to be transformed. \r\n - z: the Z component of the point to be transformed.",
        "body": [
            "Vec3 Point($x, $y, $z, $src, $dst)"
        ]
    },
    "Point    ": {
        "prefix": "Point    ",
        "description": "This function transforms a point from one space to another. \r\n - x: the X component of the point to be transformed. \r\n - Y: the Y component of the point to be transformed. \r\n - z: the Z component of the point to be transformed.",
        "body": [
            "Vec3 Point($x, $y, $z, $src, $dst)"
        ]
    },
    "Transform:Rotation": {
        "prefix": "Transform:Rotation",
        "description": "This function transforms a Euler rotation from one space to another. \r\n - x: the X component of the rotation to be transformed. \r\n - Y: the Y component of the rotation to be transformed. \r\n - z: the Z component of the rotation to be transformed.",
        "body": [
            "Vec3 Rotation($rotation, $src, $dst)"
        ]
    },
    "Rotation": {
        "prefix": "Rotation",
        "description": "This function transforms a Euler rotation from one space to another. \r\n - x: the X component of the rotation to be transformed. \r\n - Y: the Y component of the rotation to be transformed. \r\n - z: the Z component of the rotation to be transformed.",
        "body": [
            "Vec3 Rotation($rotation, $src, $dst)"
        ]
    },
    "Transform:Rotation ": {
        "prefix": "Transform:Rotation ",
        "description": "This function transforms a Euler rotation from one space to another. \r\n - x: the X component of the rotation to be transformed. \r\n - Y: the Y component of the rotation to be transformed. \r\n - z: the Z component of the rotation to be transformed.",
        "body": [
            "Vec3 Rotation($pitch, $yaw, $roll, $src, $dst)"
        ]
    },
    "Rotation ": {
        "prefix": "Rotation ",
        "description": "This function transforms a Euler rotation from one space to another. \r\n - x: the X component of the rotation to be transformed. \r\n - Y: the Y component of the rotation to be transformed. \r\n - z: the Z component of the rotation to be transformed.",
        "body": [
            "Vec3 Rotation($pitch, $yaw, $roll, $src, $dst)"
        ]
    },
    "Transform:Rotation  ": {
        "prefix": "Transform:Rotation  ",
        "description": "This function transforms a Euler rotation from one space to another. \r\n - x: the X component of the rotation to be transformed. \r\n - Y: the Y component of the rotation to be transformed. \r\n - z: the Z component of the rotation to be transformed.",
        "body": [
            "Quat Rotation($rotation, $src, $dst)"
        ]
    },
    "Rotation  ": {
        "prefix": "Rotation  ",
        "description": "This function transforms a Euler rotation from one space to another. \r\n - x: the X component of the rotation to be transformed. \r\n - Y: the Y component of the rotation to be transformed. \r\n - z: the Z component of the rotation to be transformed.",
        "body": [
            "Quat Rotation($rotation, $src, $dst)"
        ]
    },
    "Transform:Rotation   ": {
        "prefix": "Transform:Rotation   ",
        "description": "This function transforms a Euler rotation from one space to another. \r\n - x: the X component of the rotation to be transformed. \r\n - Y: the Y component of the rotation to be transformed. \r\n - z: the Z component of the rotation to be transformed.",
        "body": [
            "Vec3 Rotation($rotation, $src, $dst)"
        ]
    },
    "Rotation   ": {
        "prefix": "Rotation   ",
        "description": "This function transforms a Euler rotation from one space to another. \r\n - x: the X component of the rotation to be transformed. \r\n - Y: the Y component of the rotation to be transformed. \r\n - z: the Z component of the rotation to be transformed.",
        "body": [
            "Vec3 Rotation($rotation, $src, $dst)"
        ]
    },
    "Transform:Rotation    ": {
        "prefix": "Transform:Rotation    ",
        "description": "This function transforms a Euler rotation from one space to another. \r\n - x: the X component of the rotation to be transformed. \r\n - Y: the Y component of the rotation to be transformed. \r\n - z: the Z component of the rotation to be transformed.",
        "body": [
            "Vec3 Rotation($pitch, $yaw, $roll, $src, $dst)"
        ]
    },
    "Rotation    ": {
        "prefix": "Rotation    ",
        "description": "This function transforms a Euler rotation from one space to another. \r\n - x: the X component of the rotation to be transformed. \r\n - Y: the Y component of the rotation to be transformed. \r\n - z: the Z component of the rotation to be transformed.",
        "body": [
            "Vec3 Rotation($pitch, $yaw, $roll, $src, $dst)"
        ]
    },
    "Transform:Rotation     ": {
        "prefix": "Transform:Rotation     ",
        "description": "This function transforms a Euler rotation from one space to another. \r\n - x: the X component of the rotation to be transformed. \r\n - Y: the Y component of the rotation to be transformed. \r\n - z: the Z component of the rotation to be transformed.",
        "body": [
            "Quat Rotation($rotation, $src, $dst)"
        ]
    },
    "Rotation     ": {
        "prefix": "Rotation     ",
        "description": "This function transforms a Euler rotation from one space to another. \r\n - x: the X component of the rotation to be transformed. \r\n - Y: the Y component of the rotation to be transformed. \r\n - z: the Z component of the rotation to be transformed.",
        "body": [
            "Quat Rotation($rotation, $src, $dst)"
        ]
    },
    "Transform:Vector": {
        "prefix": "Transform:Vector",
        "description": "This function transforms a vector from one space to another. \r\n - x: the X component of the vector to be transformed. \r\n - Y: the Y component of the vector to be transformed. \r\n - z: the Z component of the vector to be transformed.",
        "body": [
            "Vec3 Vector($vector, $src, $dst)"
        ]
    },
    "Vector": {
        "prefix": "Vector",
        "description": "This function transforms a vector from one space to another. \r\n - x: the X component of the vector to be transformed. \r\n - Y: the Y component of the vector to be transformed. \r\n - z: the Z component of the vector to be transformed.",
        "body": [
            "Vec3 Vector($vector, $src, $dst)"
        ]
    },
    "Transform:Vector ": {
        "prefix": "Transform:Vector ",
        "description": "This function transforms a vector from one space to another. \r\n - x: the X component of the vector to be transformed. \r\n - Y: the Y component of the vector to be transformed. \r\n - z: the Z component of the vector to be transformed.",
        "body": [
            "Vec3 Vector($x, $y, $z, $src, $dst)"
        ]
    },
    "Vector ": {
        "prefix": "Vector ",
        "description": "This function transforms a vector from one space to another. \r\n - x: the X component of the vector to be transformed. \r\n - Y: the Y component of the vector to be transformed. \r\n - z: the Z component of the vector to be transformed.",
        "body": [
            "Vec3 Vector($x, $y, $z, $src, $dst)"
        ]
    },
    "Transform:Vector  ": {
        "prefix": "Transform:Vector  ",
        "description": "This function transforms a vector from one space to another. \r\n - x: the X component of the vector to be transformed. \r\n - Y: the Y component of the vector to be transformed. \r\n - z: the Z component of the vector to be transformed.",
        "body": [
            "Vec3 Vector($vector, $src, $dst)"
        ]
    },
    "Vector  ": {
        "prefix": "Vector  ",
        "description": "This function transforms a vector from one space to another. \r\n - x: the X component of the vector to be transformed. \r\n - Y: the Y component of the vector to be transformed. \r\n - z: the Z component of the vector to be transformed.",
        "body": [
            "Vec3 Vector($vector, $src, $dst)"
        ]
    },
    "Transform:Vector   ": {
        "prefix": "Transform:Vector   ",
        "description": "This function transforms a vector from one space to another. \r\n - x: the X component of the vector to be transformed. \r\n - Y: the Y component of the vector to be transformed. \r\n - z: the Z component of the vector to be transformed.",
        "body": [
            "Vec3 Vector($x, $y, $z, $src, $dst)"
        ]
    },
    "Vector   ": {
        "prefix": "Vector   ",
        "description": "This function transforms a vector from one space to another. \r\n - x: the X component of the vector to be transformed. \r\n - Y: the Y component of the vector to be transformed. \r\n - z: the Z component of the vector to be transformed.",
        "body": [
            "Vec3 Vector($x, $y, $z, $src, $dst)"
        ]
    },
    "Vec3:Cross": {
        "prefix": "Vec3:Cross",
        "description": "This function returns the cross product of two vectors.",
        "body": [
            "Vec3 Cross($v)"
        ]
    },
    "Cross": {
        "prefix": "Cross",
        "description": "This function returns the cross product of two vectors.",
        "body": [
            "Vec3 Cross($v)"
        ]
    },
    "Vec3:DistanceToPoint": {
        "prefix": "Vec3:DistanceToPoint",
        "description": "This function returns the distance between two positions in space.",
        "body": [
            "number DistanceToPoint($p)"
        ]
    },
    "DistanceToPoint   ": {
        "prefix": "DistanceToPoint   ",
        "description": "This function returns the distance between two positions in space.",
        "body": [
            "number DistanceToPoint($p)"
        ]
    },
    "Vec3:Dot": {
        "prefix": "Vec3:Dot",
        "description": "This function returns the dot product of two vectors.",
        "body": [
            "number Dot($v)"
        ]
    },
    "Dot": {
        "prefix": "Dot",
        "description": "This function returns the dot product of two vectors.",
        "body": [
            "number Dot($v)"
        ]
    },
    "Math:ACos": {
        "prefix": "Math:ACos",
        "description": "This function returns the arccosine of an angle. \r\n - a: an angle in degrees.",
        "body": [
            "number ACos($a)"
        ]
    },
    "ACos": {
        "prefix": "ACos",
        "description": "This function returns the arccosine of an angle. \r\n - a: an angle in degrees.",
        "body": [
            "number ACos($a)"
        ]
    },
    "Math:ASin": {
        "prefix": "Math:ASin",
        "description": "This function returns the arcsine of an angle. \r\n - a: an angle in degrees.",
        "body": [
            "number ASin($a)"
        ]
    },
    "ASin": {
        "prefix": "ASin",
        "description": "This function returns the arcsine of an angle. \r\n - a: an angle in degrees.",
        "body": [
            "number ASin($a)"
        ]
    },
    "Math:ATan": {
        "prefix": "Math:ATan",
        "description": "This function returns the arctangent of an angle. \r\n - a: an angle in degrees.",
        "body": [
            "number ATan($a)"
        ]
    },
    "ATan": {
        "prefix": "ATan",
        "description": "This function returns the arctangent of an angle. \r\n - a: an angle in degrees.",
        "body": [
            "number ATan($a)"
        ]
    },
    "Math:ATan2": {
        "prefix": "Math:ATan2",
        "description": "This function gets angle a 2D point forms relative to the origin. \r\n - x: the X coordinate of the point. \r\n - Y: the Y coordinate of the point.",
        "body": [
            "number ATan2($y, $x)"
        ]
    },
    "ATan2": {
        "prefix": "ATan2",
        "description": "This function gets angle a 2D point forms relative to the origin. \r\n - x: the X coordinate of the point. \r\n - Y: the Y coordinate of the point.",
        "body": [
            "number ATan2($y, $x)"
        ]
    },
    "Math:Clamp": {
        "prefix": "Math:Clamp",
        "description": "This function clamps a number between a minimum and maximum limit and returns the result.",
        "body": [
            "number Clamp($f, $min, $max)"
        ]
    },
    "Clamp": {
        "prefix": "Clamp",
        "description": "This function clamps a number between a minimum and maximum limit and returns the result.",
        "body": [
            "number Clamp($f, $min, $max)"
        ]
    },
    "Math:Cos": {
        "prefix": "Math:Cos",
        "description": "This function returns the cosine of an angle. \r\n - a: an angle in degrees",
        "body": [
            "number Cos($a)"
        ]
    },
    "Cos": {
        "prefix": "Cos",
        "description": "This function returns the cosine of an angle. \r\n - a: an angle in degrees",
        "body": [
            "number Cos($a)"
        ]
    },
    "Math:Curve": {
        "prefix": "Math:Curve",
        "description": "This function returns an value interpolated between a current and target value.",
        "body": [
            "number Curve($target, $current, $divisions)"
        ]
    },
    "Curve": {
        "prefix": "Curve",
        "description": "This function returns an value interpolated between a current and target value.",
        "body": [
            "number Curve($target, $current, $divisions)"
        ]
    },
    "Math:CurveAngle": {
        "prefix": "Math:CurveAngle",
        "description": "This function returns an value interpolated between a current and target angle.",
        "body": [
            "number CurveAngle($target, $current, $divisions)"
        ]
    },
    "CurveAngle": {
        "prefix": "CurveAngle",
        "description": "This function returns an value interpolated between a current and target angle.",
        "body": [
            "number CurveAngle($target, $current, $divisions)"
        ]
    },
    "Math:Degrees": {
        "prefix": "Math:Degrees",
        "description": "This function converts an angle in radians to degrees. \r\n - a: an angle in radians.",
        "body": [
            "number Degrees($a)"
        ]
    },
    "Degrees": {
        "prefix": "Degrees",
        "description": "This function converts an angle in radians to degrees. \r\n - a: an angle in radians.",
        "body": [
            "number Degrees($a)"
        ]
    },
    "Math:DeltaAngle": {
        "prefix": "Math:DeltaAngle",
        "description": "This function returns the shortest distance between the two angles, relative to the first angle.",
        "body": [
            "number DeltaAngle($angle0, $angle1)"
        ]
    },
    "DeltaAngle": {
        "prefix": "DeltaAngle",
        "description": "This function returns the shortest distance between the two angles, relative to the first angle.",
        "body": [
            "number DeltaAngle($angle0, $angle1)"
        ]
    },
    "Math:Hex": {
        "prefix": "Math:Hex",
        "description": "This function converts a number to a hexadecimal value.",
        "body": [
            "string Hex($n)"
        ]
    },
    "Hex": {
        "prefix": "Hex",
        "description": "This function converts a number to a hexadecimal value.",
        "body": [
            "string Hex($n)"
        ]
    },
    "Math:Inc": {
        "prefix": "Math:Inc",
        "description": "This function can be used to move a value steadily towards a target value at a specified rate. The return value will stop changing when it reaches the target value.",
        "body": [
            "number Inc($target, $current, $increments)"
        ]
    },
    "Inc": {
        "prefix": "Inc",
        "description": "This function can be used to move a value steadily towards a target value at a specified rate. The return value will stop changing when it reaches the target value.",
        "body": [
            "number Inc($target, $current, $increments)"
        ]
    },
    "Math:Lerp": {
        "prefix": "Math:Lerp",
        "description": "This function performs a linear interpolation between two values. The amount value controls what percent of the start and stop values the returned value consists of.",
        "body": [
            "number Lerp($start, $stop, $amount)"
        ]
    },
    "Lerp": {
        "prefix": "Lerp",
        "description": "This function performs a linear interpolation between two values. The amount value controls what percent of the start and stop values the returned value consists of.",
        "body": [
            "number Lerp($start, $stop, $amount)"
        ]
    },
    "Math:Log2": {
        "prefix": "Math:Log2",
        "description": "This function returns the binary logarithm of a value. For example, 2^8 = 256, and Log2(256) = 8.",
        "body": [
            "number Log2($f)"
        ]
    },
    "Log2": {
        "prefix": "Log2",
        "description": "This function returns the binary logarithm of a value. For example, 2^8 = 256, and Log2(256) = 8.",
        "body": [
            "number Log2($f)"
        ]
    },
    "Math:Max": {
        "prefix": "Math:Max",
        "description": "This function returns the maxima of the two input values.",
        "body": [
            "number Max($f0, $f1)"
        ]
    },
    "Max": {
        "prefix": "Max",
        "description": "This function returns the maxima of the two input values.",
        "body": [
            "number Max($f0, $f1)"
        ]
    },
    "Math:Min": {
        "prefix": "Math:Min",
        "description": "This function returns the minima of the two input values.",
        "body": [
            "number Min($f0, $f1)"
        ]
    },
    "Min": {
        "prefix": "Min",
        "description": "This function returns the minima of the two input values.",
        "body": [
            "number Min($f0, $f1)"
        ]
    },
    "Math:Mod": {
        "prefix": "Math:Mod",
        "description": "This function returns the modulus. The modulus operation divides num by div until num is less than div. This is useful for values that wrap, like the number of minutes on the hour.",
        "body": [
            "number Mod($num, $div)"
        ]
    },
    "Mod": {
        "prefix": "Mod",
        "description": "This function returns the modulus. The modulus operation divides num by div until num is less than div. This is useful for values that wrap, like the number of minutes on the hour.",
        "body": [
            "number Mod($num, $div)"
        ]
    },
    "Math:Pow2": {
        "prefix": "Math:Pow2",
        "description": "This function rounds a value off to the nearest power of two number. For example, Pow2(254) will return 256.",
        "body": [
            "number Pow2($f)"
        ]
    },
    "Pow2": {
        "prefix": "Pow2",
        "description": "This function rounds a value off to the nearest power of two number. For example, Pow2(254) will return 256.",
        "body": [
            "number Pow2($f)"
        ]
    },
    "Math:Radians": {
        "prefix": "Math:Radians",
        "description": "This function converts degrees to radians. \r\n - a: the angle to convert, in degrees.",
        "body": [
            "number Radians($a)"
        ]
    },
    "Radians": {
        "prefix": "Radians",
        "description": "This function converts degrees to radians. \r\n - a: the angle to convert, in degrees.",
        "body": [
            "number Radians($a)"
        ]
    },
    "Math:Random": {
        "prefix": "Math:Random",
        "description": "This function returns a random number.",
        "body": [
            "number Random($min, $max)"
        ]
    },
    "Random": {
        "prefix": "Random",
        "description": "This function returns a random number.",
        "body": [
            "number Random($min, $max)"
        ]
    },
    "Math:Round": {
        "prefix": "Math:Round",
        "description": "This function rounds a decimal value off to the nearest integer.",
        "body": [
            "number Round($f)"
        ]
    },
    "Round": {
        "prefix": "Round",
        "description": "This function rounds a decimal value off to the nearest integer.",
        "body": [
            "number Round($f)"
        ]
    },
    "Math:Sgn": {
        "prefix": "Math:Sgn",
        "description": "This function returns the sign of the input value.",
        "body": [
            "number Sgn($f)"
        ]
    },
    "Sgn": {
        "prefix": "Sgn",
        "description": "This function returns the sign of the input value.",
        "body": [
            "number Sgn($f)"
        ]
    },
    "Math:Sin": {
        "prefix": "Math:Sin",
        "description": "This function returns the sine of an angle. \r\n - a: an angle, in degrees",
        "body": [
            "number Degrees($a)"
        ]
    },
    "Sin": {
        "prefix": "Sin",
        "description": "This function returns the sine of an angle. \r\n - a: an angle, in degrees",
        "body": [
            "number Degrees($a)"
        ]
    },
    "Math:Tan": {
        "prefix": "Math:Tan",
        "description": "This function returns the tangent of an angle. \r\n - a: an angle, in degrees.",
        "body": [
            "number Tan($a)"
        ]
    },
    "Tan": {
        "prefix": "Tan",
        "description": "This function returns the tangent of an angle. \r\n - a: an angle, in degrees.",
        "body": [
            "number Tan($a)"
        ]
    },
    "Prefab:Load": {
        "prefix": "Prefab:Load",
        "description": "This function loads a prefab from a .pfb prefab file. When the prefab is loaded, any entities in the hierarchy with a script attached to them will have the Start() function called.",
        "body": [
            "Entity Load($path, $flags)"
        ]
    },
    "Load        ": {
        "prefix": "Load        ",
        "description": "This function loads a prefab from a .pfb prefab file. When the prefab is loaded, any entities in the hierarchy with a script attached to them will have the Start() function called.",
        "body": [
            "Entity Load($path, $flags)"
        ]
    },
    "Server:Broadcast": {
        "prefix": "Server:Broadcast",
        "description": "This function sends a message to all connected clients.",
        "body": [
            "boolean Broadcast($int_message, $text, $channel, $flags)"
        ]
    },
    "Broadcast": {
        "prefix": "Broadcast",
        "description": "This function sends a message to all connected clients.",
        "body": [
            "boolean Broadcast($int_message, $text, $channel, $flags)"
        ]
    },
    "Server:Broadcast ": {
        "prefix": "Server:Broadcast ",
        "description": "This function sends a message to all connected clients.",
        "body": [
            "boolean Broadcast($int_message, $bank, $channel, $flags)"
        ]
    },
    "Broadcast ": {
        "prefix": "Broadcast ",
        "description": "This function sends a message to all connected clients.",
        "body": [
            "boolean Broadcast($int_message, $bank, $channel, $flags)"
        ]
    },
    "Server:Create": {
        "prefix": "Server:Create",
        "description": "This function creates a new server for hosting games.",
        "body": [
            "Server Create($port)"
        ]
    },
    "Create             ": {
        "prefix": "Create             ",
        "description": "This function creates a new server for hosting games.",
        "body": [
            "Server Create($port)"
        ]
    },
    "Server:Disconnect": {
        "prefix": "Server:Disconnect",
        "description": "This function disconnects a client from the server. \r\n - Force: if set to true, the client will be immediately disconnected. This should not be used unless the connection is 'stuck'.",
        "body": [
            "Disconnect($peer, $force)"
        ]
    },
    "Disconnect ": {
        "prefix": "Disconnect ",
        "description": "This function disconnects a client from the server. \r\n - Force: if set to true, the client will be immediately disconnected. This should not be used unless the connection is 'stuck'.",
        "body": [
            "Disconnect($peer, $force)"
        ]
    },
    "Server:Send": {
        "prefix": "Server:Send",
        "description": "This function sends a message to a specific client.",
        "body": [
            "boolean Send($client, $int_message, $text, $channel, $flags)"
        ]
    },
    "Send  ": {
        "prefix": "Send  ",
        "description": "This function sends a message to a specific client.",
        "body": [
            "boolean Send($client, $int_message, $text, $channel, $flags)"
        ]
    },
    "Server:Send ": {
        "prefix": "Server:Send ",
        "description": "This function sends a message to a specific client.",
        "body": [
            "boolean Send($client, $int_message, $bank, $channel, $flags)"
        ]
    },
    "Send   ": {
        "prefix": "Send   ",
        "description": "This function sends a message to a specific client.",
        "body": [
            "boolean Send($client, $int_message, $bank, $channel, $flags)"
        ]
    },
    "Server:Update": {
        "prefix": "Server:Update",
        "description": "This function updates the network connection and checks for new messages. If a message is received, it should be read and then immediately released to free up resources.",
        "body": [
            "Message Update($timeout)"
        ]
    },
    "Update ": {
        "prefix": "Update ",
        "description": "This function updates the network connection and checks for new messages. If a message is received, it should be read and then immediately released to free up resources.",
        "body": [
            "Message Update($timeout)"
        ]
    },
    "Source:SetLoopMode": {
        "prefix": "Source:SetLoopMode",
        "description": "This function sets the looping mode for a source.",
        "body": [
            "SetLoopMode($loop)"
        ]
    },
    "SetLoopMode ": {
        "prefix": "SetLoopMode ",
        "description": "This function sets the looping mode for a source.",
        "body": [
            "SetLoopMode($loop)"
        ]
    },
    "Source:SetPitch": {
        "prefix": "Source:SetPitch",
        "description": "This function modulates the frequency of a playing sound. This affects the speed it plays at, as well as the perceived pitch. \r\n - pitch: the new pitch to set.",
        "body": [
            "SetPitch($pitch)"
        ]
    },
    "SetPitch": {
        "prefix": "SetPitch",
        "description": "This function modulates the frequency of a playing sound. This affects the speed it plays at, as well as the perceived pitch. \r\n - pitch: the new pitch to set.",
        "body": [
            "SetPitch($pitch)"
        ]
    },
    "Source:SetPosition": {
        "prefix": "Source:SetPosition",
        "description": "This function sets a source's position in global space. \r\n - position: the position to set.",
        "body": [
            "SetPosition($position)"
        ]
    },
    "SetPosition  ": {
        "prefix": "SetPosition  ",
        "description": "This function sets a source's position in global space. \r\n - position: the position to set.",
        "body": [
            "SetPosition($position)"
        ]
    },
    "Source:SetRange": {
        "prefix": "Source:SetRange",
        "description": "This function sets the audible range of a sound source. \r\n - range: the range beyond which the source will be inaudible.",
        "body": [
            "SetRange($range)"
        ]
    },
    "SetRange    ": {
        "prefix": "SetRange    ",
        "description": "This function sets the audible range of a sound source. \r\n - range: the range beyond which the source will be inaudible.",
        "body": [
            "SetRange($range)"
        ]
    },
    "Source:SetSound": {
        "prefix": "Source:SetSound",
        "description": "This function sets the sound a source will play. \r\n - sound: the sound to set.",
        "body": [
            "SetSound($sound)"
        ]
    },
    "SetSound": {
        "prefix": "SetSound",
        "description": "This function sets the sound a source will play. \r\n - sound: the sound to set.",
        "body": [
            "SetSound($sound)"
        ]
    },
    "Source:SetTime": {
        "prefix": "Source:SetTime",
        "description": "This function will set the time a source is playing at. \r\n - time: the time to set, in seconds.",
        "body": [
            "SetTime($time)"
        ]
    },
    "SetTime": {
        "prefix": "SetTime",
        "description": "This function will set the time a source is playing at. \r\n - time: the time to set, in seconds.",
        "body": [
            "SetTime($time)"
        ]
    },
    "Source:SetVolume": {
        "prefix": "Source:SetVolume",
        "description": "This function will set a source's volume. The default volume is 1.0. \r\n - volume: the volume to set.",
        "body": [
            "SetVolume($volume)"
        ]
    },
    "SetVolume": {
        "prefix": "SetVolume",
        "description": "This function will set a source's volume. The default volume is 1.0. \r\n - volume: the volume to set.",
        "body": [
            "SetVolume($volume)"
        ]
    },
    "Source:Stop": {
        "prefix": "Source:Stop",
        "description": "This function will stop and rewind a source that is playing. \r\n - volume: the volume to set.",
        "body": [
            "Stop()"
        ]
    },
    "Stop": {
        "prefix": "Stop",
        "description": "This function will stop and rewind a source that is playing. \r\n - volume: the volume to set.",
        "body": [
            "Stop()"
        ]
    },
    "Surface:Add": {
        "prefix": "Surface:Add",
        "description": "This function adds the contents of one surface to another. This can be used to collapse multiple surfaces into one.",
        "body": [
            "Add($surface, $mat)"
        ]
    },
    "Add": {
        "prefix": "Add",
        "description": "This function adds the contents of one surface to another. This can be used to collapse multiple surfaces into one.",
        "body": [
            "Add($surface, $mat)"
        ]
    },
    "Surface:AddTriangle": {
        "prefix": "Surface:AddTriangle",
        "description": "This function adds a single triangle to the surface indice buffer. The indice values must be greater than -1 and less than Surface::CountVertices(). \r\n - b: the second vertex indice to add. \r\n - a: the first vertex indice to add.",
        "body": [
            "number AddTriangle($a, $b, $c)"
        ]
    },
    "AddTriangle": {
        "prefix": "AddTriangle",
        "description": "This function adds a single triangle to the surface indice buffer. The indice values must be greater than -1 and less than Surface::CountVertices(). \r\n - b: the second vertex indice to add. \r\n - a: the first vertex indice to add.",
        "body": [
            "number AddTriangle($a, $b, $c)"
        ]
    },
    "Surface:AddVertex": {
        "prefix": "Surface:AddVertex",
        "description": "This function adds a new triangle to a surface. \r\n - x: the X component of the vertex position. \r\n - Y: the Y component of the vertex position. \r\n - z: the Z component of the vertex position. \r\n - position: the vertex position. \r\n - r: the red component of the vertex color. \r\n - g: the green component of the vertex color. \r\n - b: the blue component of the vertex color. \r\n - a: the alpha component of the vertex color. \r\n - color: the vertex color.",
        "body": [
            "number AddVertex($x, $y, $z, $nx, $ny, $nz, $u0, $v0, $u1, $v1, $r, $g, $b, $a)"
        ]
    },
    "AddVertex": {
        "prefix": "AddVertex",
        "description": "This function adds a new triangle to a surface. \r\n - x: the X component of the vertex position. \r\n - Y: the Y component of the vertex position. \r\n - z: the Z component of the vertex position. \r\n - position: the vertex position. \r\n - r: the red component of the vertex color. \r\n - g: the green component of the vertex color. \r\n - b: the blue component of the vertex color. \r\n - a: the alpha component of the vertex color. \r\n - color: the vertex color.",
        "body": [
            "number AddVertex($x, $y, $z, $nx, $ny, $nz, $u0, $v0, $u1, $v1, $r, $g, $b, $a)"
        ]
    },
    "Surface:AddVertex ": {
        "prefix": "Surface:AddVertex ",
        "description": "This function adds a new triangle to a surface. \r\n - x: the X component of the vertex position. \r\n - Y: the Y component of the vertex position. \r\n - z: the Z component of the vertex position. \r\n - position: the vertex position. \r\n - r: the red component of the vertex color. \r\n - g: the green component of the vertex color. \r\n - b: the blue component of the vertex color. \r\n - a: the alpha component of the vertex color. \r\n - color: the vertex color.",
        "body": [
            "number AddVertex($position, $normal), Vec2 texcoords0=Vec2(0), Vec2 texcoords1=Vec2(0), Vec4 color=Vec4(1))"
        ]
    },
    "AddVertex ": {
        "prefix": "AddVertex ",
        "description": "This function adds a new triangle to a surface. \r\n - x: the X component of the vertex position. \r\n - Y: the Y component of the vertex position. \r\n - z: the Z component of the vertex position. \r\n - position: the vertex position. \r\n - r: the red component of the vertex color. \r\n - g: the green component of the vertex color. \r\n - b: the blue component of the vertex color. \r\n - a: the alpha component of the vertex color. \r\n - color: the vertex color.",
        "body": [
            "number AddVertex($position, $normal), Vec2 texcoords0=Vec2(0), Vec2 texcoords1=Vec2(0), Vec4 color=Vec4(1))"
        ]
    },
    "Surface:GetTriangleNormal": {
        "prefix": "Surface:GetTriangleNormal",
        "description": "This function calculates a normal based on the positions of a triangle's vertices. This value will not necessarily be the same as the vertex normals, though the values are likely to be similar. \r\n - index: the index of the triangle, from 0 to Surface::CountTriangles()-1.",
        "body": [
            "Vec3 GetTriangleNormal($index)"
        ]
    },
    "GetTriangleNormal": {
        "prefix": "GetTriangleNormal",
        "description": "This function calculates a normal based on the positions of a triangle's vertices. This value will not necessarily be the same as the vertex normals, though the values are likely to be similar. \r\n - index: the index of the triangle, from 0 to Surface::CountTriangles()-1.",
        "body": [
            "Vec3 GetTriangleNormal($index)"
        ]
    },
    "Surface:GetTriangleVertex": {
        "prefix": "Surface:GetTriangleVertex",
        "description": "This functions gets the vertex index of a triangle corner. \r\n - a: the index of the triangle to return the vertex of.",
        "body": [
            "number GetTriangleVertex($t, $c)"
        ]
    },
    "GetTriangleVertex": {
        "prefix": "GetTriangleVertex",
        "description": "This functions gets the vertex index of a triangle corner. \r\n - a: the index of the triangle to return the vertex of.",
        "body": [
            "number GetTriangleVertex($t, $c)"
        ]
    },
    "Surface:GetVertexColor": {
        "prefix": "Surface:GetVertexColor",
        "description": "This function returns a surface vertex color. \r\n - index: the vertex index, from 0 to Surface::CountVertices()-1.",
        "body": [
            "Vec4 GetVertexColor($index)"
        ]
    },
    "GetVertexColor": {
        "prefix": "GetVertexColor",
        "description": "This function returns a surface vertex color. \r\n - index: the vertex index, from 0 to Surface::CountVertices()-1.",
        "body": [
            "Vec4 GetVertexColor($index)"
        ]
    },
    "Surface:GetVertexNormal": {
        "prefix": "Surface:GetVertexNormal",
        "description": "This function returns a surface vertex normal. \r\n - index: the vertex index, from 0 to Surface::CountVertices()-1.",
        "body": [
            "Vec3 GetVertexNormal($index)"
        ]
    },
    "GetVertexNormal": {
        "prefix": "GetVertexNormal",
        "description": "This function returns a surface vertex normal. \r\n - index: the vertex index, from 0 to Surface::CountVertices()-1.",
        "body": [
            "Vec3 GetVertexNormal($index)"
        ]
    },
    "Surface:GetVertexPosition": {
        "prefix": "Surface:GetVertexPosition",
        "description": "This function returns a surface vertex position. \r\n - index: the vertex index, from 0 to Surface::CountVertices()-1.",
        "body": [
            "Vec3 GetVertexPosition($index)"
        ]
    },
    "GetVertexPosition": {
        "prefix": "GetVertexPosition",
        "description": "This function returns a surface vertex position. \r\n - index: the vertex index, from 0 to Surface::CountVertices()-1.",
        "body": [
            "Vec3 GetVertexPosition($index)"
        ]
    },
    "Surface:GetVertexTexCoords": {
        "prefix": "Surface:GetVertexTexCoords",
        "description": "This function returns the texcoords of a vertex. \r\n - index: the vertex index, from 0 to Surface::CountVertices()-1.",
        "body": [
            "Vec2 GetVertexTexCoords($index, $texcoordset)"
        ]
    },
    "GetVertexTexCoords": {
        "prefix": "GetVertexTexCoords",
        "description": "This function returns the texcoords of a vertex. \r\n - index: the vertex index, from 0 to Surface::CountVertices()-1.",
        "body": [
            "Vec2 GetVertexTexCoords($index, $texcoordset)"
        ]
    },
    "Surface:Pick": {
        "prefix": "Surface:Pick",
        "description": "This function performs a pick operation on a single surface. The start and end pick positions should be in local space. If a radius is specified, it will also be in considered local space. \r\n - p0: the origin of the ray. \r\n - p1: the terminal end of the ray. \r\n - pick: a pick object to contain pick information. \r\n - radius: the radius of the ray. If the radius is greater than 0.0, a slower swept sphere collision will be performed. \r\n - closest: if set to true, the closest intersection will be found, otherwise the operation will return as soon as a single intersection is found.",
        "body": [
            "bool Pick($p0, $p1, $pick, $radius, $closest)"
        ]
    },
    "Pick  ": {
        "prefix": "Pick  ",
        "description": "This function performs a pick operation on a single surface. The start and end pick positions should be in local space. If a radius is specified, it will also be in considered local space. \r\n - p0: the origin of the ray. \r\n - p1: the terminal end of the ray. \r\n - pick: a pick object to contain pick information. \r\n - radius: the radius of the ray. If the radius is greater than 0.0, a slower swept sphere collision will be performed. \r\n - closest: if set to true, the closest intersection will be found, otherwise the operation will return as soon as a single intersection is found.",
        "body": [
            "bool Pick($p0, $p1, $pick, $radius, $closest)"
        ]
    },
    "Surface:SetMaterial": {
        "prefix": "Surface:SetMaterial",
        "description": "This function sets a surface material. \r\n - material: the new material to set.",
        "body": [
            "SetMaterial($material)"
        ]
    },
    "SetMaterial ": {
        "prefix": "SetMaterial ",
        "description": "This function sets a surface material. \r\n - material: the new material to set.",
        "body": [
            "SetMaterial($material)"
        ]
    },
    "Surface:SetVertexColor": {
        "prefix": "Surface:SetVertexColor",
        "description": "This function sets a vertex color. \r\n - index: the surface index to set. \r\n - r: the red component of the color to set. \r\n - g: the green component of the color to set. \r\n - b: the blue component of the color to set. \r\n - a: the alpha component of the color to set. \r\n - color: the color to set.",
        "body": [
            "SetVertexColor($index, $r, $g, $b, $a)"
        ]
    },
    "SetVertexColor": {
        "prefix": "SetVertexColor",
        "description": "This function sets a vertex color. \r\n - index: the surface index to set. \r\n - r: the red component of the color to set. \r\n - g: the green component of the color to set. \r\n - b: the blue component of the color to set. \r\n - a: the alpha component of the color to set. \r\n - color: the color to set.",
        "body": [
            "SetVertexColor($index, $r, $g, $b, $a)"
        ]
    },
    "Surface:SetVertexColor ": {
        "prefix": "Surface:SetVertexColor ",
        "description": "This function sets a vertex color. \r\n - index: the surface index to set. \r\n - r: the red component of the color to set. \r\n - g: the green component of the color to set. \r\n - b: the blue component of the color to set. \r\n - a: the alpha component of the color to set. \r\n - color: the color to set.",
        "body": [
            "SetVertexColor($index, $color)"
        ]
    },
    "SetVertexColor ": {
        "prefix": "SetVertexColor ",
        "description": "This function sets a vertex color. \r\n - index: the surface index to set. \r\n - r: the red component of the color to set. \r\n - g: the green component of the color to set. \r\n - b: the blue component of the color to set. \r\n - a: the alpha component of the color to set. \r\n - color: the color to set.",
        "body": [
            "SetVertexColor($index, $color)"
        ]
    },
    "Surface:SetVertexNormal": {
        "prefix": "Surface:SetVertexNormal",
        "description": "This function sets a vertex normal. \r\n - x: the X component of the normal to set. \r\n - Y: the Y component of the normal to set. \r\n - z: the Z component of the color to set. \r\n - index: the index of the vertex to set.",
        "body": [
            "SetVertexNormal($v, $x, $y, $z)"
        ]
    },
    "SetVertexNormal": {
        "prefix": "SetVertexNormal",
        "description": "This function sets a vertex normal. \r\n - x: the X component of the normal to set. \r\n - Y: the Y component of the normal to set. \r\n - z: the Z component of the color to set. \r\n - index: the index of the vertex to set.",
        "body": [
            "SetVertexNormal($v, $x, $y, $z)"
        ]
    },
    "Surface:SetVertexNormal ": {
        "prefix": "Surface:SetVertexNormal ",
        "description": "This function sets a vertex normal. \r\n - x: the X component of the normal to set. \r\n - Y: the Y component of the normal to set. \r\n - z: the Z component of the color to set. \r\n - index: the index of the vertex to set.",
        "body": [
            "SetVertexNormal($v, $normal)"
        ]
    },
    "SetVertexNormal ": {
        "prefix": "SetVertexNormal ",
        "description": "This function sets a vertex normal. \r\n - x: the X component of the normal to set. \r\n - Y: the Y component of the normal to set. \r\n - z: the Z component of the color to set. \r\n - index: the index of the vertex to set.",
        "body": [
            "SetVertexNormal($v, $normal)"
        ]
    },
    "Surface:SetVertexPosition": {
        "prefix": "Surface:SetVertexPosition",
        "description": "This function sets a vertex position. \r\n - x: the X component of the position to set. \r\n - Y: the Y component of the position to set. \r\n - z: the Z component of the position to set. \r\n - position: the position to set. \r\n - index: the index of the vertex to set.",
        "body": [
            "SetVertexPosition($v, $x, $y, $z)"
        ]
    },
    "SetVertexPosition": {
        "prefix": "SetVertexPosition",
        "description": "This function sets a vertex position. \r\n - x: the X component of the position to set. \r\n - Y: the Y component of the position to set. \r\n - z: the Z component of the position to set. \r\n - position: the position to set. \r\n - index: the index of the vertex to set.",
        "body": [
            "SetVertexPosition($v, $x, $y, $z)"
        ]
    },
    "Surface:SetVertexPosition ": {
        "prefix": "Surface:SetVertexPosition ",
        "description": "This function sets a vertex position. \r\n - x: the X component of the position to set. \r\n - Y: the Y component of the position to set. \r\n - z: the Z component of the position to set. \r\n - position: the position to set. \r\n - index: the index of the vertex to set.",
        "body": [
            "SetVertexPosition($v, $position)"
        ]
    },
    "SetVertexPosition ": {
        "prefix": "SetVertexPosition ",
        "description": "This function sets a vertex position. \r\n - x: the X component of the position to set. \r\n - Y: the Y component of the position to set. \r\n - z: the Z component of the position to set. \r\n - position: the position to set. \r\n - index: the index of the vertex to set.",
        "body": [
            "SetVertexPosition($v, $position)"
        ]
    },
    "Surface:SetVertexTexCoords": {
        "prefix": "Surface:SetVertexTexCoords",
        "description": "This function sets a vertex texcoords. \r\n - index: the index of the vertex to set.",
        "body": [
            "SetVertexTexCoords($index, $x, $y, $texcoordset)"
        ]
    },
    "SetVertexTexCoords": {
        "prefix": "SetVertexTexCoords",
        "description": "This function sets a vertex texcoords. \r\n - index: the index of the vertex to set.",
        "body": [
            "SetVertexTexCoords($index, $x, $y, $texcoordset)"
        ]
    },
    "Surface:SetVertexTexCoords ": {
        "prefix": "Surface:SetVertexTexCoords ",
        "description": "This function sets a vertex texcoords. \r\n - index: the index of the vertex to set.",
        "body": [
            "SetVertextexCoords($index, $Vec2_texcoords, $texcoordset)"
        ]
    },
    "SetVertexTexCoords ": {
        "prefix": "SetVertexTexCoords ",
        "description": "This function sets a vertex texcoords. \r\n - index: the index of the vertex to set.",
        "body": [
            "SetVertextexCoords($index, $Vec2_texcoords, $texcoordset)"
        ]
    },
    "Surface:Update": {
        "prefix": "Surface:Update",
        "description": "This function updates a surface after it has been modified. This will update the binormals and tangents, update the AABB, and create a new shape for picking. \r\n - Force: if set to true everything will be updated, otherwise only required updates will be made.",
        "body": [
            "Update($force)"
        ]
    },
    "Update  ": {
        "prefix": "Update  ",
        "description": "This function updates a surface after it has been modified. This will update the binormals and tangents, update the AABB, and create a new shape for picking. \r\n - Force: if set to true everything will be updated, otherwise only required updates will be made.",
        "body": [
            "Update($force)"
        ]
    },
    "Surface:UpdateNormals": {
        "prefix": "Surface:UpdateNormals",
        "description": "This function calculates normals for a surface.",
        "body": [
            "UpdateNormals($soft, $distancetolerance, $angulartolerance)"
        ]
    },
    "UpdateNormals": {
        "prefix": "UpdateNormals",
        "description": "This function calculates normals for a surface.",
        "body": [
            "UpdateNormals($soft, $distancetolerance, $angulartolerance)"
        ]
    },
    "Stream:Read": {
        "prefix": "Stream:Read",
        "description": "This function reads raw data from a stream to a memory buffer.",
        "body": [
            "void Read($void*_buf, $size)"
        ]
    },
    "Read": {
        "prefix": "Read",
        "description": "This function reads raw data from a stream to a memory buffer.",
        "body": [
            "void Read($void*_buf, $size)"
        ]
    },
    "Stream:ReadString": {
        "prefix": "Stream:ReadString",
        "description": "This function reads a null-terminated string from a stream.",
        "body": [
            "string ReadString($maxlength)"
        ]
    },
    "ReadString": {
        "prefix": "ReadString",
        "description": "This function reads a null-terminated string from a stream.",
        "body": [
            "string ReadString($maxlength)"
        ]
    },
    "Stream:Seek": {
        "prefix": "Stream:Seek",
        "description": "This function sets the stream position for reading and writing.",
        "body": [
            "Seek($pos)"
        ]
    },
    "Seek": {
        "prefix": "Seek",
        "description": "This function sets the stream position for reading and writing.",
        "body": [
            "Seek($pos)"
        ]
    },
    "Stream:Write": {
        "prefix": "Stream:Write",
        "description": "This function writes raw data from a memory buffer to a stream.",
        "body": [
            "Write($b, $size)"
        ]
    },
    "Write": {
        "prefix": "Write",
        "description": "This function writes raw data from a memory buffer to a stream.",
        "body": [
            "Write($b, $size)"
        ]
    },
    "Stream:WriteFloat": {
        "prefix": "Stream:WriteFloat",
        "description": "This function writes a float value to a stream.",
        "body": [
            "WriteFloat($f)"
        ]
    },
    "WriteFloat": {
        "prefix": "WriteFloat",
        "description": "This function writes a float value to a stream.",
        "body": [
            "WriteFloat($f)"
        ]
    },
    "Stream:WriteInt": {
        "prefix": "Stream:WriteInt",
        "description": "This function writes an integer value to a stream.",
        "body": [
            "WriteInt($i)"
        ]
    },
    "WriteInt": {
        "prefix": "WriteInt",
        "description": "This function writes an integer value to a stream.",
        "body": [
            "WriteInt($i)"
        ]
    },
    "Stream:WriteLine": {
        "prefix": "Stream:WriteLine",
        "description": "This function writes a string to a stream, and adds the line return character at the end.",
        "body": [
            "WriteLine($s)"
        ]
    },
    "WriteLine": {
        "prefix": "WriteLine",
        "description": "This function writes a string to a stream, and adds the line return character at the end.",
        "body": [
            "WriteLine($s)"
        ]
    },
    "Stream:WriteString": {
        "prefix": "Stream:WriteString",
        "description": "This function writes a string to a stream and adds the null character at the end.",
        "body": [
            "WriteString($s)"
        ]
    },
    "WriteString": {
        "prefix": "WriteString",
        "description": "This function writes a string to a stream and adds the null character at the end.",
        "body": [
            "WriteString($s)"
        ]
    },
    "Stream:WriteUChar": {
        "prefix": "Stream:WriteUChar",
        "description": "This function writes an unsigned char value to a stream.",
        "body": [
            "WriteUChar($c)"
        ]
    },
    "WriteUChar": {
        "prefix": "WriteUChar",
        "description": "This function writes an unsigned char value to a stream.",
        "body": [
            "WriteUChar($c)"
        ]
    },
    "Stream:WriteUShort": {
        "prefix": "Stream:WriteUShort",
        "description": "This function writes an unsigned short value to a stream.",
        "body": [
            "WriteUShort($s)"
        ]
    },
    "WriteUShort": {
        "prefix": "WriteUShort",
        "description": "This function writes an unsigned short value to a stream.",
        "body": [
            "WriteUShort($s)"
        ]
    },
    "System:AddHook": {
        "prefix": "System:AddHook",
        "description": "This function adds a global hook. Hooks are callback functions that will be executed when certain events occur.",
        "body": [
            "AddHook($hookid, $hook)"
        ]
    },
    "AddHook": {
        "prefix": "AddHook",
        "description": "This function adds a global hook. Hooks are callback functions that will be executed when certain events occur.",
        "body": [
            "AddHook($hookid, $hook)"
        ]
    },
    "System:GetGraphicsMode": {
        "prefix": "System:GetGraphicsMode",
        "description": "This function returns the resolution of a supported graphics mode. Call System::CountGraphicsModes() to get the number of available screen resolutions, and then use this command to query the dimensions of each supported resolution. \r\n - index: the index of the graphics mode to return the resolution of. Graphics mode indexes are numbered from zero to CountGraphicsModes()-1.",
        "body": [
            "iVec2 GetGraphicsMode($index)"
        ]
    },
    "GetGraphicsMode": {
        "prefix": "GetGraphicsMode",
        "description": "This function returns the resolution of a supported graphics mode. Call System::CountGraphicsModes() to get the number of available screen resolutions, and then use this command to query the dimensions of each supported resolution. \r\n - index: the index of the graphics mode to return the resolution of. Graphics mode indexes are numbered from zero to CountGraphicsModes()-1.",
        "body": [
            "iVec2 GetGraphicsMode($index)"
        ]
    },
    "System:GetProperty": {
        "prefix": "System:GetProperty",
        "description": "This function gets a command line property.",
        "body": [
            "string GetProperty($key, $defaultvalue)"
        ]
    },
    "GetProperty": {
        "prefix": "GetProperty",
        "description": "This function gets a command line property.",
        "body": [
            "string GetProperty($key, $defaultvalue)"
        ]
    },
    "System:Print": {
        "prefix": "System:Print",
        "description": "This functions prints text to the application console. It is useful for revealing debug information.",
        "body": [
            "Print($value)"
        ]
    },
    "Print": {
        "prefix": "Print",
        "description": "This functions prints text to the application console. It is useful for revealing debug information.",
        "body": [
            "Print($value)"
        ]
    },
    "System:Print ": {
        "prefix": "System:Print ",
        "description": "This functions prints text to the application console. It is useful for revealing debug information.",
        "body": [
            "Print($value)"
        ]
    },
    "Print ": {
        "prefix": "Print ",
        "description": "This functions prints text to the application console. It is useful for revealing debug information.",
        "body": [
            "Print($value)"
        ]
    },
    "System:Print  ": {
        "prefix": "System:Print  ",
        "description": "This functions prints text to the application console. It is useful for revealing debug information.",
        "body": [
            "Print($value)"
        ]
    },
    "Print  ": {
        "prefix": "Print  ",
        "description": "This functions prints text to the application console. It is useful for revealing debug information.",
        "body": [
            "Print($value)"
        ]
    },
    "System:Print   ": {
        "prefix": "System:Print   ",
        "description": "This functions prints text to the application console. It is useful for revealing debug information.",
        "body": [
            "Print($value)"
        ]
    },
    "Print   ": {
        "prefix": "Print   ",
        "description": "This functions prints text to the application console. It is useful for revealing debug information.",
        "body": [
            "Print($value)"
        ]
    },
    "System:Print    ": {
        "prefix": "System:Print    ",
        "description": "This functions prints text to the application console. It is useful for revealing debug information.",
        "body": [
            "Print($value)"
        ]
    },
    "Print    ": {
        "prefix": "Print    ",
        "description": "This functions prints text to the application console. It is useful for revealing debug information.",
        "body": [
            "Print($value)"
        ]
    },
    "System:Print     ": {
        "prefix": "System:Print     ",
        "description": "This functions prints text to the application console. It is useful for revealing debug information.",
        "body": [
            "Print($value)"
        ]
    },
    "Print     ": {
        "prefix": "Print     ",
        "description": "This functions prints text to the application console. It is useful for revealing debug information.",
        "body": [
            "Print($value)"
        ]
    },
    "System:Print      ": {
        "prefix": "System:Print      ",
        "description": "This functions prints text to the application console. It is useful for revealing debug information.",
        "body": [
            "Print($value)"
        ]
    },
    "Print      ": {
        "prefix": "Print      ",
        "description": "This functions prints text to the application console. It is useful for revealing debug information.",
        "body": [
            "Print($value)"
        ]
    },
    "System:Print       ": {
        "prefix": "System:Print       ",
        "description": "This functions prints text to the application console. It is useful for revealing debug information.",
        "body": [
            "Print($value)"
        ]
    },
    "Print       ": {
        "prefix": "Print       ",
        "description": "This functions prints text to the application console. It is useful for revealing debug information.",
        "body": [
            "Print($value)"
        ]
    },
    "System:RemoveHook": {
        "prefix": "System:RemoveHook",
        "description": "This function will remove the first instance of a global hook.",
        "body": [
            "RemoveHook($hookid, $hook)"
        ]
    },
    "RemoveHook": {
        "prefix": "RemoveHook",
        "description": "This function will remove the first instance of a global hook.",
        "body": [
            "RemoveHook($hookid, $hook)"
        ]
    },
    "Time:Delay": {
        "prefix": "Time:Delay",
        "description": "This function will pause the application for the specified amount of time.",
        "body": [
            "Delay($milliseconds)"
        ]
    },
    "Delay": {
        "prefix": "Delay",
        "description": "This function will pause the application for the specified amount of time.",
        "body": [
            "Delay($milliseconds)"
        ]
    },
    "Vehicle:AddAxle": {
        "prefix": "Vehicle:AddAxle",
        "description": "This functions adds an axle between a left and right tire. Vehicles with axles specified will have more accurate physics.",
        "body": [
            "AddAxle($lefttire, $righttire)"
        ]
    },
    "AddAxle": {
        "prefix": "AddAxle",
        "description": "This functions adds an axle between a left and right tire. Vehicles with axles specified will have more accurate physics.",
        "body": [
            "AddAxle($lefttire, $righttire)"
        ]
    },
    "Vehicle:AddTire": {
        "prefix": "Vehicle:AddTire",
        "description": "This command adds a tire to a vehicle. \r\n - x: x component of the tire position. \r\n - Y: y component of the tire position. \r\n - z: z component of the tire position. \r\n - radius: radius of the tire. \r\n - mass: mass of the tire.",
        "body": [
            "number AddTire($x, $y, $z, $mass, $radius, $width, $steering, $suspensionDamper, $suspensionSpring, $suspensionLength, $lateralStiffness, $longitudinalStiffness, $aligningMOmentTrail, $friction)"
        ]
    },
    "AddTire": {
        "prefix": "AddTire",
        "description": "This command adds a tire to a vehicle. \r\n - x: x component of the tire position. \r\n - Y: y component of the tire position. \r\n - z: z component of the tire position. \r\n - radius: radius of the tire. \r\n - mass: mass of the tire.",
        "body": [
            "number AddTire($x, $y, $z, $mass, $radius, $width, $steering, $suspensionDamper, $suspensionSpring, $suspensionLength, $lateralStiffness, $longitudinalStiffness, $aligningMOmentTrail, $friction)"
        ]
    },
    "Vehicle:Create": {
        "prefix": "Vehicle:Create",
        "description": "This command creates a new vehicle using the specified entity as the chassis. \r\n - entity: the entity to use as the vehicle chassis.",
        "body": [
            "Vehicle Create($entity)"
        ]
    },
    "Create              ": {
        "prefix": "Create              ",
        "description": "This command creates a new vehicle using the specified entity as the chassis. \r\n - entity: the entity to use as the vehicle chassis.",
        "body": [
            "Vehicle Create($entity)"
        ]
    },
    "Vehicle:GetTireLateralForce": {
        "prefix": "Vehicle:GetTireLateralForce",
        "description": "Returns the lateral force being exerted on the specified tire. This can be used to adjust steering angles and prevent flipping. \r\n - index: the index of the tire to return the values for.",
        "body": [
            "number GetTireLateralForce($index)"
        ]
    },
    "GetTireLateralForce": {
        "prefix": "GetTireLateralForce",
        "description": "Returns the lateral force being exerted on the specified tire. This can be used to adjust steering angles and prevent flipping. \r\n - index: the index of the tire to return the values for.",
        "body": [
            "number GetTireLateralForce($index)"
        ]
    },
    "Vehicle:GetTireMatrix": {
        "prefix": "Vehicle:GetTireMatrix",
        "description": "This command returns a 4x4 matrix describing the specified tire's position and rotation. This can be used to make your visual model of a tire match the orientation of the physics simulation. \r\n - index: the index of the tire to return the value for.",
        "body": [
            "Mat4 GetTireMatrix($index)"
        ]
    },
    "GetTireMatrix": {
        "prefix": "GetTireMatrix",
        "description": "This command returns a 4x4 matrix describing the specified tire's position and rotation. This can be used to make your visual model of a tire match the orientation of the physics simulation. \r\n - index: the index of the tire to return the value for.",
        "body": [
            "Mat4 GetTireMatrix($index)"
        ]
    },
    "Vehicle:GetTireSlip": {
        "prefix": "Vehicle:GetTireSlip",
        "description": "This function returns the specified tire's current slippage on the ground. This can be used to play tire skidding noises when a vehicle slides. \r\n - index: the index of the tire to return the value for.",
        "body": [
            "number GetTireSlip($index)"
        ]
    },
    "GetTireSlip": {
        "prefix": "GetTireSlip",
        "description": "This function returns the specified tire's current slippage on the ground. This can be used to play tire skidding noises when a vehicle slides. \r\n - index: the index of the tire to return the value for.",
        "body": [
            "number GetTireSlip($index)"
        ]
    },
    "Vehicle:SetAcceleration": {
        "prefix": "Vehicle:SetAcceleration",
        "description": "This command adjusts the amount of gas given to the vehicle engine, resulting in acceleration. A negative value will make the vehicle go in reverse.",
        "body": [
            "number SetAcceleration($engineGasPedal)"
        ]
    },
    "SetAcceleration": {
        "prefix": "SetAcceleration",
        "description": "This command adjusts the amount of gas given to the vehicle engine, resulting in acceleration. A negative value will make the vehicle go in reverse.",
        "body": [
            "number SetAcceleration($engineGasPedal)"
        ]
    },
    "Vehicle:SetBrakes": {
        "prefix": "Vehicle:SetBrakes",
        "description": "This command can be used to force a vehicle to slow down by applying brakes to each tire.",
        "body": [
            "SetBrakes($brakes)"
        ]
    },
    "SetBrakes": {
        "prefix": "SetBrakes",
        "description": "This command can be used to force a vehicle to slow down by applying brakes to each tire.",
        "body": [
            "SetBrakes($brakes)"
        ]
    },
    "Vehicle:SetHandBrakes": {
        "prefix": "Vehicle:SetHandBrakes",
        "description": "This command sets the brake force of the vehicle's emergency brake. Use this for keeping your car from rolling away when you park it.",
        "body": [
            "SetHandBrakes($brakes)"
        ]
    },
    "SetHandBrakes": {
        "prefix": "SetHandBrakes",
        "description": "This command sets the brake force of the vehicle's emergency brake. Use this for keeping your car from rolling away when you park it.",
        "body": [
            "SetHandBrakes($brakes)"
        ]
    },
    "Vehicle:SetEngineRunning": {
        "prefix": "Vehicle:SetEngineRunning",
        "description": "This command is used to turn the vehicle's engine on and off. You must turn a vehicle's engine on before it will start driving.",
        "body": [
            "SetEngineRunning($running)"
        ]
    },
    "SetEngineRunning": {
        "prefix": "SetEngineRunning",
        "description": "This command is used to turn the vehicle's engine on and off. You must turn a vehicle's engine on before it will start driving.",
        "body": [
            "SetEngineRunning($running)"
        ]
    },
    "Vehicle:SetSteering": {
        "prefix": "Vehicle:SetSteering",
        "description": "This command sets the steering angle of each steering tire on the vehicle. Tires must be created with the steering parameter set to true to respond to this command.",
        "body": [
            "SetSteering($steering)"
        ]
    },
    "SetSteering": {
        "prefix": "SetSteering",
        "description": "This command sets the steering angle of each steering tire on the vehicle. Tires must be created with the steering parameter set to true to respond to this command.",
        "body": [
            "SetSteering($steering)"
        ]
    },
    "VR:GetControllerAxis": {
        "prefix": "VR:GetControllerAxis",
        "description": "This function is used to retrieve the current input value for controller buttons that have analog input, like touchpads and triggers. \r\n - index: The index of the controller, either Left or Right.",
        "body": [
            "Vec2 GetControllerAxis($index, $button)"
        ]
    },
    "GetControllerAxis": {
        "prefix": "GetControllerAxis",
        "description": "This function is used to retrieve the current input value for controller buttons that have analog input, like touchpads and triggers. \r\n - index: The index of the controller, either Left or Right.",
        "body": [
            "Vec2 GetControllerAxis($index, $button)"
        ]
    },
    "VR:GetControllerButtonDown": {
        "prefix": "VR:GetControllerButtonDown",
        "description": "This function is used to retrieve the current input value for controller buttons. \r\n - index: The index of the controller, either Left or Right.",
        "body": [
            "bool GetControllerButtonDown($index, $button)"
        ]
    },
    "GetControllerButtonDown": {
        "prefix": "GetControllerButtonDown",
        "description": "This function is used to retrieve the current input value for controller buttons. \r\n - index: The index of the controller, either Left or Right.",
        "body": [
            "bool GetControllerButtonDown($index, $button)"
        ]
    },
    "VR:GetControllerButtonTouched": {
        "prefix": "VR:GetControllerButtonTouched",
        "description": "This function is used to tell if the user is currently touching a button. \r\n - index: The index of the controller, either Left or Right.",
        "body": [
            "bool GetControllerButtonTouched($index, $button)"
        ]
    },
    "GetControllerButtonTouched": {
        "prefix": "GetControllerButtonTouched",
        "description": "This function is used to tell if the user is currently touching a button. \r\n - index: The index of the controller, either Left or Right.",
        "body": [
            "bool GetControllerButtonTouched($index, $button)"
        ]
    },
    "VR:GetControllerButtonHit": {
        "prefix": "VR:GetControllerButtonHit",
        "description": "This function is used to tell if the user has pressed a button. \r\n - index: The index of the controller, either Left or Right.",
        "body": [
            "bool GetControllerButtonHit($index, $button)"
        ]
    },
    "GetControllerButtonHit": {
        "prefix": "GetControllerButtonHit",
        "description": "This function is used to tell if the user has pressed a button. \r\n - index: The index of the controller, either Left or Right.",
        "body": [
            "bool GetControllerButtonHit($index, $button)"
        ]
    },
    "VR:GetControllerModel": {
        "prefix": "VR:GetControllerModel",
        "description": "This function retrieves a VR controller model. It will display the correct model for all supported VR systems. The model will be positioned and rotated automatically according to the player's movements.Controllers take a moment to register in the VR environment, and the visual model is asynchronously loaded so as not to pause the game. Therefore your code should account for the possibility that this function will sometimes return NULL.By default a visual representation of the user's VR hardware will be displayed. If you want to replace the controllers with weapons or other items, simply hide the controller models. \r\n - index: The index of the controller, either Left or Right.",
        "body": [
            "Model GetControllerModel($index)"
        ]
    },
    "GetControllerModel": {
        "prefix": "GetControllerModel",
        "description": "This function retrieves a VR controller model. It will display the correct model for all supported VR systems. The model will be positioned and rotated automatically according to the player's movements.Controllers take a moment to register in the VR environment, and the visual model is asynchronously loaded so as not to pause the game. Therefore your code should account for the possibility that this function will sometimes return NULL.By default a visual representation of the user's VR hardware will be displayed. If you want to replace the controllers with weapons or other items, simply hide the controller models. \r\n - index: The index of the controller, either Left or Right.",
        "body": [
            "Model GetControllerModel($index)"
        ]
    },
    "VR:SetTrackingSpace": {
        "prefix": "VR:SetTrackingSpace",
        "description": "This function is used to select a room-space or seated VR tracking space.",
        "body": [
            "SetTrackingSpace($trackingspace)"
        ]
    },
    "SetTrackingSpace": {
        "prefix": "SetTrackingSpace",
        "description": "This function is used to select a room-space or seated VR tracking space.",
        "body": [
            "SetTrackingSpace($trackingspace)"
        ]
    },
    "VR:TriggerHapticPulse": {
        "prefix": "VR:TriggerHapticPulse",
        "description": "This function is used to send haptic feedback to a VR controller. \r\n - index: The controller index. This can be either Left or Right.",
        "body": [
            "TriggerHapticPulse($index, $duration)"
        ]
    },
    "TriggerHapticPulse": {
        "prefix": "TriggerHapticPulse",
        "description": "This function is used to send haptic feedback to a VR controller. \r\n - index: The controller index. This can be either Left or Right.",
        "body": [
            "TriggerHapticPulse($index, $duration)"
        ]
    },
    "Window:Create": {
        "prefix": "Window:Create",
        "description": "This function creates and returns a new window. \r\n - x: the x position of the new window. \r\n - Y: the y position of the new window.",
        "body": [
            "Window Create($title, $x, $y, $width, $height, $style)"
        ]
    },
    "Create               ": {
        "prefix": "Create               ",
        "description": "This function creates and returns a new window. \r\n - x: the x position of the new window. \r\n - Y: the y position of the new window.",
        "body": [
            "Window Create($title, $x, $y, $width, $height, $style)"
        ]
    },
    "Window:KeyDown": {
        "prefix": "Window:KeyDown",
        "description": "This function gets the keydown state of a window.",
        "body": [
            "bool KeyDown($keycode)"
        ]
    },
    "KeyDown": {
        "prefix": "KeyDown",
        "description": "This function gets the keydown state of a window.",
        "body": [
            "bool KeyDown($keycode)"
        ]
    },
    "Window:KeyHit": {
        "prefix": "Window:KeyHit",
        "description": "This function gets the keyhit state of a window.",
        "body": [
            "bool KeyHit($keycode)"
        ]
    },
    "KeyHit": {
        "prefix": "KeyHit",
        "description": "This function gets the keyhit state of a window.",
        "body": [
            "bool KeyHit($keycode)"
        ]
    },
    "Window:MouseDown": {
        "prefix": "Window:MouseDown",
        "description": "This function is used to tell if a mouse button is pressed.",
        "body": [
            "bool MouseDown($button)"
        ]
    },
    "MouseDown": {
        "prefix": "MouseDown",
        "description": "This function is used to tell if a mouse button is pressed.",
        "body": [
            "bool MouseDown($button)"
        ]
    },
    "Window:MouseHit": {
        "prefix": "Window:MouseHit",
        "description": "This function can be used to tell if a mouse button has been pressed since the last time it was tested.",
        "body": [
            "bool MouseHit($button)"
        ]
    },
    "MouseHit": {
        "prefix": "MouseHit",
        "description": "This function can be used to tell if a mouse button has been pressed since the last time it was tested.",
        "body": [
            "bool MouseHit($button)"
        ]
    },
    "Window:SetMousePosition": {
        "prefix": "Window:SetMousePosition",
        "description": "This function will move the mouse to the specified position. \r\n - x: the X component of the screen coordinate to move the mouse to. \r\n - Y: the Y component of the screen coordinate to move the mouse to. \r\n - z: the mouse wheel value to set.",
        "body": [
            "SetMousePosition($x, $y)"
        ]
    },
    "SetMousePosition": {
        "prefix": "SetMousePosition",
        "description": "This function will move the mouse to the specified position. \r\n - x: the X component of the screen coordinate to move the mouse to. \r\n - Y: the Y component of the screen coordinate to move the mouse to. \r\n - z: the mouse wheel value to set.",
        "body": [
            "SetMousePosition($x, $y)"
        ]
    },
    "Window:SetMousePosition ": {
        "prefix": "Window:SetMousePosition ",
        "description": "This function will move the mouse to the specified position. \r\n - x: the X component of the screen coordinate to move the mouse to. \r\n - Y: the Y component of the screen coordinate to move the mouse to. \r\n - z: the mouse wheel value to set.",
        "body": [
            "SetMousePosition($z, $y, $z)"
        ]
    },
    "SetMousePosition ": {
        "prefix": "SetMousePosition ",
        "description": "This function will move the mouse to the specified position. \r\n - x: the X component of the screen coordinate to move the mouse to. \r\n - Y: the Y component of the screen coordinate to move the mouse to. \r\n - z: the mouse wheel value to set.",
        "body": [
            "SetMousePosition($z, $y, $z)"
        ]
    },
    "Window:SetLayout": {
        "prefix": "Window:SetLayout",
        "description": "This function moves and resizes a window. \r\n - x: the X component of the screen position to move the window to. \r\n - Y: the Y component of the screen position to move the window to.",
        "body": [
            "SetLayout($x, $y, $width, $height)"
        ]
    },
    "SetLayout": {
        "prefix": "SetLayout",
        "description": "This function moves and resizes a window. \r\n - x: the X component of the screen position to move the window to. \r\n - Y: the Y component of the screen position to move the window to.",
        "body": [
            "SetLayout($x, $y, $width, $height)"
        ]
    },
    "World:BuildNavMesh": {
        "prefix": "World:BuildNavMesh",
        "description": "This function builds a navigation mesh for AI pathfinding.",
        "body": [
            "bool BuildNavMesh($maxedgelength, $maxedgeerror)"
        ]
    },
    "BuildNavMesh": {
        "prefix": "BuildNavMesh",
        "description": "This function builds a navigation mesh for AI pathfinding.",
        "body": [
            "bool BuildNavMesh($maxedgelength, $maxedgeerror)"
        ]
    },
    "World:Clear": {
        "prefix": "World:Clear",
        "description": "This function releases all entities in the specified world. \r\n - Force: if set to false, all top-level entities will have their reference count decremented by one, and deleted if their reference count reaches zero. If set to true, all entities in the world will have their reference count decremented until it reaches zero, and then they will be deleted. Unless you have manually incremented the reference count of any entity, the two modes will behave the same.",
        "body": [
            "Clear($force)"
        ]
    },
    "Clear": {
        "prefix": "Clear",
        "description": "This function releases all entities in the specified world. \r\n - Force: if set to false, all top-level entities will have their reference count decremented by one, and deleted if their reference count reaches zero. If set to true, all entities in the world will have their reference count decremented until it reaches zero, and then they will be deleted. Unless you have manually incremented the reference count of any entity, the two modes will behave the same.",
        "body": [
            "Clear($force)"
        ]
    },
    "World:ForEachEntityInAABBDo": {
        "prefix": "World:ForEachEntityInAABBDo",
        "description": "This command calls the specified function for all entities in the world that intersect the specified AABB. The optional extra parameter will be passed to the callback function each time it is called.",
        "body": [
            "ForEachEntityInAABBDo($aabb, $entity, $extra), Object extra=NULL)"
        ]
    },
    "ForEachEntityInAABBDo": {
        "prefix": "ForEachEntityInAABBDo",
        "description": "This command calls the specified function for all entities in the world that intersect the specified AABB. The optional extra parameter will be passed to the callback function each time it is called.",
        "body": [
            "ForEachEntityInAABBDo($aabb, $entity, $extra), Object extra=NULL)"
        ]
    },
    "World:ForEachEntityInAABBDo ": {
        "prefix": "World:ForEachEntityInAABBDo ",
        "description": "This command calls the specified function for all entities in the world that intersect the specified AABB. The optional extra parameter will be passed to the callback function each time it is called.",
        "body": [
            "void ForEachEntityInAABBDo($aabb, $funcname, $extra)"
        ]
    },
    "ForEachEntityInAABBDo ": {
        "prefix": "ForEachEntityInAABBDo ",
        "description": "This command calls the specified function for all entities in the world that intersect the specified AABB. The optional extra parameter will be passed to the callback function each time it is called.",
        "body": [
            "void ForEachEntityInAABBDo($aabb, $funcname, $extra)"
        ]
    },
    "World:ForEachVisibleEntityDo": {
        "prefix": "World:ForEachVisibleEntityDo",
        "description": "This command calls the specified function for all entities in the world that are visible to the specified camera. The optional extra parameter will be passed to the callback function each time it is called.",
        "body": [
            "ForEachVisibleEntityDo($camera, $camera, $entity, $extra), Object extra = NULL)"
        ]
    },
    "ForEachVisibleEntityDo": {
        "prefix": "ForEachVisibleEntityDo",
        "description": "This command calls the specified function for all entities in the world that are visible to the specified camera. The optional extra parameter will be passed to the callback function each time it is called.",
        "body": [
            "ForEachVisibleEntityDo($camera, $camera, $entity, $extra), Object extra = NULL)"
        ]
    },
    "World:ForEachVisibleEntityDo ": {
        "prefix": "World:ForEachVisibleEntityDo ",
        "description": "This command calls the specified function for all entities in the world that are visible to the specified camera. The optional extra parameter will be passed to the callback function each time it is called.",
        "body": [
            "ForEachVisibleEntityDo($camera, $functionname, $extra)"
        ]
    },
    "ForEachVisibleEntityDo ": {
        "prefix": "ForEachVisibleEntityDo ",
        "description": "This command calls the specified function for all entities in the world that are visible to the specified camera. The optional extra parameter will be passed to the callback function each time it is called.",
        "body": [
            "ForEachVisibleEntityDo($camera, $functionname, $extra)"
        ]
    },
    "World:Pick": {
        "prefix": "World:Pick",
        "description": "This function performs a pick operation on all entities in a world that intersect the specified line. \r\n - p0: the origin of the ray. \r\n - p1: the terminal end of the ray. \r\n - radius: the radius of the ray. If the radius is greater than 0.0, a slower swept sphere collision will be performed. \r\n - closest: if set to true, the closest intersection will be found, otherwise the operation will return as soon as a single intersection is found. \r\n - collisiontype: if specified, the entity collision type will be tested against this, and only colliding entities will be tested.",
        "body": [
            "bool Pick($p0, $p1, $pickinfo, $radius, $closest, $collisiontype)"
        ]
    },
    "Pick   ": {
        "prefix": "Pick   ",
        "description": "This function performs a pick operation on all entities in a world that intersect the specified line. \r\n - p0: the origin of the ray. \r\n - p1: the terminal end of the ray. \r\n - radius: the radius of the ray. If the radius is greater than 0.0, a slower swept sphere collision will be performed. \r\n - closest: if set to true, the closest intersection will be found, otherwise the operation will return as soon as a single intersection is found. \r\n - collisiontype: if specified, the entity collision type will be tested against this, and only colliding entities will be tested.",
        "body": [
            "bool Pick($p0, $p1, $pickinfo, $radius, $closest, $collisiontype)"
        ]
    },
    "World:SetAmbientLight": {
        "prefix": "World:SetAmbientLight",
        "description": "This function sets a world's ambient light level. This is the minimum light level a surface will be rendered with when no other lights are present. \r\n - r: red light level. \r\n - g: green light level. \r\n - b: blue light level. \r\n - a: alpha light level (unused).",
        "body": [
            "SetAmbientLight($l)"
        ]
    },
    "SetAmbientLight": {
        "prefix": "SetAmbientLight",
        "description": "This function sets a world's ambient light level. This is the minimum light level a surface will be rendered with when no other lights are present. \r\n - r: red light level. \r\n - g: green light level. \r\n - b: blue light level. \r\n - a: alpha light level (unused).",
        "body": [
            "SetAmbientLight($l)"
        ]
    },
    "World:SetAmbientLight ": {
        "prefix": "World:SetAmbientLight ",
        "description": "This function sets a world's ambient light level. This is the minimum light level a surface will be rendered with when no other lights are present. \r\n - r: red light level. \r\n - g: green light level. \r\n - b: blue light level. \r\n - a: alpha light level (unused).",
        "body": [
            "SetAmbientLight($r, $g, $b)"
        ]
    },
    "SetAmbientLight ": {
        "prefix": "SetAmbientLight ",
        "description": "This function sets a world's ambient light level. This is the minimum light level a surface will be rendered with when no other lights are present. \r\n - r: red light level. \r\n - g: green light level. \r\n - b: blue light level. \r\n - a: alpha light level (unused).",
        "body": [
            "SetAmbientLight($r, $g, $b)"
        ]
    },
    "World:SetAmbientLight  ": {
        "prefix": "World:SetAmbientLight  ",
        "description": "This function sets a world's ambient light level. This is the minimum light level a surface will be rendered with when no other lights are present. \r\n - r: red light level. \r\n - g: green light level. \r\n - b: blue light level. \r\n - a: alpha light level (unused).",
        "body": [
            "SetAmbientLight($r, $g, $b, $a)"
        ]
    },
    "SetAmbientLight  ": {
        "prefix": "SetAmbientLight  ",
        "description": "This function sets a world's ambient light level. This is the minimum light level a surface will be rendered with when no other lights are present. \r\n - r: red light level. \r\n - g: green light level. \r\n - b: blue light level. \r\n - a: alpha light level (unused).",
        "body": [
            "SetAmbientLight($r, $g, $b, $a)"
        ]
    },
    "World:SetCurrent": {
        "prefix": "World:SetCurrent",
        "description": "This function sets the current world. The current world is the world used when a new entity is created or loaded from a file.",
        "body": [
            "SetCurrent($world)"
        ]
    },
    "SetCurrent ": {
        "prefix": "SetCurrent ",
        "description": "This function sets the current world. The current world is the world used when a new entity is created or loaded from a file.",
        "body": [
            "SetCurrent($world)"
        ]
    },
    "World:SetGravity": {
        "prefix": "World:SetGravity",
        "description": "This function sets the world's gravity. \r\n - x: gravity value for this axis \r\n - Y: gravity value for this axis \r\n - z: gravity value for this axis",
        "body": [
            "SetGravity($x, $y, $z)"
        ]
    },
    "SetGravity": {
        "prefix": "SetGravity",
        "description": "This function sets the world's gravity. \r\n - x: gravity value for this axis \r\n - Y: gravity value for this axis \r\n - z: gravity value for this axis",
        "body": [
            "SetGravity($x, $y, $z)"
        ]
    },
    "World:SetLightQuality": {
        "prefix": "World:SetLightQuality",
        "description": "This function sets the world's light quality setting. This will effect the softness of shadow edges, and will also affect how far in the distance directional light shadows are visible.",
        "body": [
            "SetLightQuality($quality)"
        ]
    },
    "SetLightQuality": {
        "prefix": "SetLightQuality",
        "description": "This function sets the world's light quality setting. This will effect the softness of shadow edges, and will also affect how far in the distance directional light shadows are visible.",
        "body": [
            "SetLightQuality($quality)"
        ]
    },
    "World:SetPhysicsDetail": {
        "prefix": "World:SetPhysicsDetail",
        "description": "This function sets the accuracy of the physics solver. \r\n - mode: the new physics detail mode.",
        "body": [
            "SetPhysicsDetail($mode)"
        ]
    },
    "SetPhysicsDetail": {
        "prefix": "SetPhysicsDetail",
        "description": "This function sets the accuracy of the physics solver. \r\n - mode: the new physics detail mode.",
        "body": [
            "SetPhysicsDetail($mode)"
        ]
    },
    "World:SetWaterColor": {
        "prefix": "World:SetWaterColor",
        "description": "This command sets the diffuse color of the water.",
        "body": [
            "SetWaterColor($red, $green, $blue, $alpha)"
        ]
    },
    "SetWaterColor": {
        "prefix": "SetWaterColor",
        "description": "This command sets the diffuse color of the water.",
        "body": [
            "SetWaterColor($red, $green, $blue, $alpha)"
        ]
    },
    "World:SetWaterHeight": {
        "prefix": "World:SetWaterHeight",
        "description": "This command sets the water height. Water must be enabled for it to appear with World::SetWaterMode(true).",
        "body": [
            "SetWaterHeight($height)"
        ]
    },
    "SetWaterHeight": {
        "prefix": "SetWaterHeight",
        "description": "This command sets the water height. Water must be enabled for it to appear with World::SetWaterMode(true).",
        "body": [
            "SetWaterHeight($height)"
        ]
    },
    "World:SetWaterMode": {
        "prefix": "World:SetWaterMode",
        "description": "This command is used to toggle water on and off in the world. \r\n - mode: if set to true water is enabled, otherwise water is disabled.",
        "body": [
            "SetWaterMode($mode)"
        ]
    },
    "SetWaterMode": {
        "prefix": "SetWaterMode",
        "description": "This command is used to toggle water on and off in the world. \r\n - mode: if set to true water is enabled, otherwise water is disabled.",
        "body": [
            "SetWaterMode($mode)"
        ]
    },
    "World:SetWaterQuality": {
        "prefix": "World:SetWaterQuality",
        "description": "This command adjusts the quality of the world's water, when it is enabled.",
        "body": [
            "SetWaterQuality($quality)"
        ]
    },
    "SetWaterQuality": {
        "prefix": "SetWaterQuality",
        "description": "This command adjusts the quality of the world's water, when it is enabled.",
        "body": [
            "SetWaterQuality($quality)"
        ]
    },
    "Widget:AddItem": {
        "prefix": "Widget:AddItem",
        "description": "This function adds an item to a widget. Choiceboxes, listboxes, and tabbers will display their items and allow you to select one.",
        "body": [
            "number AddItem($text, $selected)"
        ]
    },
    "AddItem": {
        "prefix": "AddItem",
        "description": "This function adds an item to a widget. Choiceboxes, listboxes, and tabbers will display their items and allow you to select one.",
        "body": [
            "number AddItem($text, $selected)"
        ]
    },
    "Widget:Button": {
        "prefix": "Widget:Button",
        "description": "This function creates a button widget.The <i>style</i> value of the script can be set to any of the following:<ul><li>Push (default)</li><li>Checkbox</li><li>Link</li></ul> \r\n - x: X position of the widget, in logical units. \r\n - Y: Y position of the widget, in logical units.",
        "body": [
            "global Widget Button($text, $x, $y, $width, $height, $parent)"
        ]
    },
    "Button": {
        "prefix": "Button",
        "description": "This function creates a button widget.The <i>style</i> value of the script can be set to any of the following:<ul><li>Push (default)</li><li>Checkbox</li><li>Link</li></ul> \r\n - x: X position of the widget, in logical units. \r\n - Y: Y position of the widget, in logical units.",
        "body": [
            "global Widget Button($text, $x, $y, $width, $height, $parent)"
        ]
    },
    "Widget:Choicebox": {
        "prefix": "Widget:Choicebox",
        "description": "This function creates a choicebox widget. This allows the user to select from several options by clicking on the widget. \r\n - x: X position of the widget, in logical units. \r\n - Y: Y position of the widget, in logical units.",
        "body": [
            "global Widget Choicebox($x, $y, $width, $height, $parent)"
        ]
    },
    "Choicebox": {
        "prefix": "Choicebox",
        "description": "This function creates a choicebox widget. This allows the user to select from several options by clicking on the widget. \r\n - x: X position of the widget, in logical units. \r\n - Y: Y position of the widget, in logical units.",
        "body": [
            "global Widget Choicebox($x, $y, $width, $height, $parent)"
        ]
    },
    "Widget:Create": {
        "prefix": "Widget:Create",
        "description": "This function creates a custom widget.Set the script parameter to your own custom script. \r\n - x: X position of the widget, in logical units. \r\n - Y: Y position of the widget, in logical units.",
        "body": [
            "global Widget Create($text, $x, $y, $width, $height, $parent, $scriptfile)"
        ]
    },
    "Create                ": {
        "prefix": "Create                ",
        "description": "This function creates a custom widget.Set the script parameter to your own custom script. \r\n - x: X position of the widget, in logical units. \r\n - Y: Y position of the widget, in logical units.",
        "body": [
            "global Widget Create($text, $x, $y, $width, $height, $parent, $scriptfile)"
        ]
    },
    "Widget:GetClientSize": {
        "prefix": "Widget:GetClientSize",
        "description": "This function gets the client size of a widget. The client size is the padded area inside a widget in which child widgets can be created.By default the function will return logical coordinates that are unaffected by GUI scaling. You should always use logical coordinates when creating, positioning, and resizing widgets. Logical coordinates are based on typical sizing for a 1080p computer monitor.If scaled coordinates are specified, the actual pixel size will be returned.",
        "body": [
            "iVec2 GetClientSize($scaledCoords)"
        ]
    },
    "GetClientSize": {
        "prefix": "GetClientSize",
        "description": "This function gets the client size of a widget. The client size is the padded area inside a widget in which child widgets can be created.By default the function will return logical coordinates that are unaffected by GUI scaling. You should always use logical coordinates when creating, positioning, and resizing widgets. Logical coordinates are based on typical sizing for a 1080p computer monitor.If scaled coordinates are specified, the actual pixel size will be returned.",
        "body": [
            "iVec2 GetClientSize($scaledCoords)"
        ]
    },
    "Widget:GetItemText": {
        "prefix": "Widget:GetItemText",
        "description": "This function gets the text of the speficied widget item.",
        "body": [
            "string GetItemText($item)"
        ]
    },
    "GetItemText": {
        "prefix": "GetItemText",
        "description": "This function gets the text of the speficied widget item.",
        "body": [
            "string GetItemText($item)"
        ]
    },
    "Widget:GetPosition": {
        "prefix": "Widget:GetPosition",
        "description": "This function gets the position of a widget.By default the function will return logical coordinates that are unaffected by GUI scaling. You should always use logical coordinates when creating, positioning, and resizing widgets. Logical coordinates are based on typical sizing for a 1080p computer monitor.If scaled coordinates are specified, the actual pixel size will be returned.",
        "body": [
            "iVec2 GetPosition($scaledCoords)"
        ]
    },
    "GetPosition": {
        "prefix": "GetPosition",
        "description": "This function gets the position of a widget.By default the function will return logical coordinates that are unaffected by GUI scaling. You should always use logical coordinates when creating, positioning, and resizing widgets. Logical coordinates are based on typical sizing for a 1080p computer monitor.If scaled coordinates are specified, the actual pixel size will be returned.",
        "body": [
            "iVec2 GetPosition($scaledCoords)"
        ]
    },
    "Widget:GetSize": {
        "prefix": "Widget:GetSize",
        "description": "This function gets the size of a widget.By default the function will return logical coordinates that are unaffected by GUI scaling. You should always use logical coordinates when creating, positioning, and resizing widgets. Logical coordinates are based on typical sizing for a 1080p computer monitor.If scaled coordinates are specified, the actual pixel size will be returned.",
        "body": [
            "iVec2 GetSize($scaledCoords)"
        ]
    },
    "GetSize": {
        "prefix": "GetSize",
        "description": "This function gets the size of a widget.By default the function will return logical coordinates that are unaffected by GUI scaling. You should always use logical coordinates when creating, positioning, and resizing widgets. Logical coordinates are based on typical sizing for a 1080p computer monitor.If scaled coordinates are specified, the actual pixel size will be returned.",
        "body": [
            "iVec2 GetSize($scaledCoords)"
        ]
    },
    "Widget:Label": {
        "prefix": "Widget:Label",
        "description": "This function creates a label widget. A label is a non-interactive widget that displays a line of text.You can set the boolean value <i>border</i> to true to display a border around the label and increase the widget padding. \r\n - x: X position of the widget, in logical units. \r\n - Y: Y position of the widget, in logical units.",
        "body": [
            "global Widget Label($text, $x, $y, $width, $height, $parent)"
        ]
    },
    "Label": {
        "prefix": "Label",
        "description": "This function creates a label widget. A label is a non-interactive widget that displays a line of text.You can set the boolean value <i>border</i> to true to display a border around the label and increase the widget padding. \r\n - x: X position of the widget, in logical units. \r\n - Y: Y position of the widget, in logical units.",
        "body": [
            "global Widget Label($text, $x, $y, $width, $height, $parent)"
        ]
    },
    "Widget:ListBox": {
        "prefix": "Widget:ListBox",
        "description": "This function creates a listbox widget. The listbox will display a list of items the user can select from. \r\n - x: X position of the widget, in logical units. \r\n - Y: Y position of the widget, in logical units.",
        "body": [
            "global Widget ListBox($x, $y, $width, $height, $parent)"
        ]
    },
    "ListBox": {
        "prefix": "ListBox",
        "description": "This function creates a listbox widget. The listbox will display a list of items the user can select from. \r\n - x: X position of the widget, in logical units. \r\n - Y: Y position of the widget, in logical units.",
        "body": [
            "global Widget ListBox($x, $y, $width, $height, $parent)"
        ]
    },
    "Widget:Panel": {
        "prefix": "Widget:Panel",
        "description": "This function creates a panel widget. A panel is a blank non-interactive widget used to group other widgets.You can set the script boolean value <i>border</i> to true to enable a visible border and increase the widget padding. \r\n - x: X position of the widget, in logical units. \r\n - Y: Y position of the widget, in logical units.",
        "body": [
            "global Widget Panel($x, $y, $width, $height, $parent)"
        ]
    },
    "Panel": {
        "prefix": "Panel",
        "description": "This function creates a panel widget. A panel is a blank non-interactive widget used to group other widgets.You can set the script boolean value <i>border</i> to true to enable a visible border and increase the widget padding. \r\n - x: X position of the widget, in logical units. \r\n - Y: Y position of the widget, in logical units.",
        "body": [
            "global Widget Panel($x, $y, $width, $height, $parent)"
        ]
    },
    "Widget:ProgressBar": {
        "prefix": "Widget:ProgressBar",
        "description": "This function creates a progressbar widget. A progressbar displays the progress of a task that is being performed.You can set the script float value <i>progress</i> to adjust the displayed progress. \r\n - x: X position of the widget, in logical units. \r\n - Y: Y position of the widget, in logical units.",
        "body": [
            "global Widget ProgressBar($x, $y, $width, $height, $parent)"
        ]
    },
    "ProgressBar": {
        "prefix": "ProgressBar",
        "description": "This function creates a progressbar widget. A progressbar displays the progress of a task that is being performed.You can set the script float value <i>progress</i> to adjust the displayed progress. \r\n - x: X position of the widget, in logical units. \r\n - Y: Y position of the widget, in logical units.",
        "body": [
            "global Widget ProgressBar($x, $y, $width, $height, $parent)"
        ]
    },
    "Widget:SelectItem": {
        "prefix": "Widget:SelectItem",
        "description": "This function selects a widget item.",
        "body": [
            "SelectItem($item)"
        ]
    },
    "SelectItem": {
        "prefix": "SelectItem",
        "description": "This function selects a widget item.",
        "body": [
            "SelectItem($item)"
        ]
    },
    "Widget:SetAlignment": {
        "prefix": "Widget:SetAlignment",
        "description": "This function is used to control how a widget scales when its parent is resized.",
        "body": [
            "SetAlignment($left, $right, $top, $bottom)"
        ]
    },
    "SetAlignment": {
        "prefix": "SetAlignment",
        "description": "This function is used to control how a widget scales when its parent is resized.",
        "body": [
            "SetAlignment($left, $right, $top, $bottom)"
        ]
    },
    "Widget:SetBool": {
        "prefix": "Widget:SetBool",
        "description": "This function sets a user-defined boolean variable in a widget script. \r\n - name: name of the variable to set.",
        "body": [
            "SetBool($name, $value)"
        ]
    },
    "SetBool": {
        "prefix": "SetBool",
        "description": "This function sets a user-defined boolean variable in a widget script. \r\n - name: name of the variable to set.",
        "body": [
            "SetBool($name, $value)"
        ]
    },
    "Widget:SetFloat": {
        "prefix": "Widget:SetFloat",
        "description": "This function sets a user-defined number variable in a widget script. \r\n - name: name of the variable to set.",
        "body": [
            "SetFloat($name, $value)"
        ]
    },
    "SetFloat  ": {
        "prefix": "SetFloat  ",
        "description": "This function sets a user-defined number variable in a widget script. \r\n - name: name of the variable to set.",
        "body": [
            "SetFloat($name, $value)"
        ]
    },
    "Widget:SetLayout": {
        "prefix": "Widget:SetLayout",
        "description": "This function sets the position and size of a widget, in logical units. \r\n - x: X position of the widget. \r\n - Y: Y position of the widget.",
        "body": [
            "SetLayout($x, $y, $width, $height)"
        ]
    },
    "SetLayout ": {
        "prefix": "SetLayout ",
        "description": "This function sets the position and size of a widget, in logical units. \r\n - x: X position of the widget. \r\n - Y: Y position of the widget.",
        "body": [
            "SetLayout($x, $y, $width, $height)"
        ]
    },
    "Widget:SetString": {
        "prefix": "Widget:SetString",
        "description": "This function sets a user-defined string variable in a widget script. \r\n - name: name of the variable to set.",
        "body": [
            "SetString($name, $value)"
        ]
    },
    "SetString": {
        "prefix": "SetString",
        "description": "This function sets a user-defined string variable in a widget script. \r\n - name: name of the variable to set.",
        "body": [
            "SetString($name, $value)"
        ]
    },
    "Widget:SetState": {
        "prefix": "Widget:SetState",
        "description": "This function sets the state of a widget. This can be used to make a checkbox-style button checked or utilize other user-defined features.",
        "body": [
            "SetState($state)"
        ]
    },
    "SetState": {
        "prefix": "SetState",
        "description": "This function sets the state of a widget. This can be used to make a checkbox-style button checked or utilize other user-defined features.",
        "body": [
            "SetState($state)"
        ]
    },
    "Widget:SetText": {
        "prefix": "Widget:SetText",
        "description": "This function sets the text that is displayed on the widget.",
        "body": [
            "SetText($text)"
        ]
    },
    "SetText": {
        "prefix": "SetText",
        "description": "This function sets the text that is displayed on the widget.",
        "body": [
            "SetText($text)"
        ]
    },
    "Widget:Slider": {
        "prefix": "Widget:Slider",
        "description": "This function creates a slider widget. A slider allows the user to drag a knob to adjust a setting within a fixed range of allowed values. \r\n - x: X position of the widget, in logical units. \r\n - Y: Y position of the widget, in logical units.",
        "body": [
            "global Widget Slider($x, $y, $width, $height, $parent)"
        ]
    },
    "Slider ": {
        "prefix": "Slider ",
        "description": "This function creates a slider widget. A slider allows the user to drag a knob to adjust a setting within a fixed range of allowed values. \r\n - x: X position of the widget, in logical units. \r\n - Y: Y position of the widget, in logical units.",
        "body": [
            "global Widget Slider($x, $y, $width, $height, $parent)"
        ]
    },
    "Widget:Tabber": {
        "prefix": "Widget:Tabber",
        "description": "This function creates a tabber widget. A tabber is a panel with selecteable tabs displayed at the top. Use AddItem() to add a new tab. \r\n - x: X position of the widget, in logical units. \r\n - Y: Y position of the widget, in logical units.",
        "body": [
            "global Widget Tabber($x, $y, $width, $height, $parent)"
        ]
    },
    "Tabber": {
        "prefix": "Tabber",
        "description": "This function creates a tabber widget. A tabber is a panel with selecteable tabs displayed at the top. Use AddItem() to add a new tab. \r\n - x: X position of the widget, in logical units. \r\n - Y: Y position of the widget, in logical units.",
        "body": [
            "global Widget Tabber($x, $y, $width, $height, $parent)"
        ]
    },
    "Widget:TextArea": {
        "prefix": "Widget:TextArea",
        "description": "This function creates a textarea widget. A textarea is read-only widget that can display multiple lines of text. \r\n - x: X position of the widget, in logical units. \r\n - Y: Y position of the widget, in logical units.",
        "body": [
            "global Widget TextArea($x, $y, $width, $height, $parent)"
        ]
    },
    "TextArea": {
        "prefix": "TextArea",
        "description": "This function creates a textarea widget. A textarea is read-only widget that can display multiple lines of text. \r\n - x: X position of the widget, in logical units. \r\n - Y: Y position of the widget, in logical units.",
        "body": [
            "global Widget TextArea($x, $y, $width, $height, $parent)"
        ]
    },
    "Widget:TextField": {
        "prefix": "Widget:TextField",
        "description": "This function creates a textfield widget. A textfield is an editable line of text the user may modify with keyboard input. \r\n - x: X position of the widget, in logical units. \r\n - Y: Y position of the widget, in logical units.",
        "body": [
            "global Widget TextField($text, $x, $y, $width, $height, $parent)"
        ]
    },
    "TextField": {
        "prefix": "TextField",
        "description": "This function creates a textfield widget. A textfield is an editable line of text the user may modify with keyboard input. \r\n - x: X position of the widget, in logical units. \r\n - Y: Y position of the widget, in logical units.",
        "body": [
            "global Widget TextField($text, $x, $y, $width, $height, $parent)"
        ]
    }
}