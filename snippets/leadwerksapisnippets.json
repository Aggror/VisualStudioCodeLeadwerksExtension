{"Analytics:Disable": {
"prefix": "Analytics:Disable",
"description": "This function sends all queued events and disables analytics. Your game will automatically call this function on exit, so you do not generally need to call this.",
"body": ["bool Disable()"]
},
"Disable": {
"prefix": "Disable",
"description": "This function sends all queued events and disables analytics. Your game will automatically call this function on exit, so you do not generally need to call this.",
"body": ["bool Disable()"]
},
"Analytics:Enable": {
"prefix": "Analytics:Enable",
"description": "This function enables analytics. You must first call Analytics::SetKeys() to input your game keys before this is called.",
"body": ["bool Enable()"]
},
"Enable": {
"prefix": "Enable",
"description": "This function enables analytics. You must first call Analytics::SetKeys() to input your game keys before this is called.",
"body": ["bool Enable()"]
},
"Analytics:SendGenericEvent": {
"prefix": "Analytics:SendGenericEvent",
"description": "This function queues a user-defined event. You can include an optional numerical value.",
"body": ["bool SendGenericEvent($string_eventid)"]
},
"SendGenericEvent": {
"prefix": "SendGenericEvent",
"description": "This function queues a user-defined event. You can include an optional numerical value.",
"body": ["bool SendGenericEvent($string_eventid)"]
},
"Analytics:SendGenericEvent ": {
"prefix": "Analytics:SendGenericEvent ",
"description": "This function queues a user-defined event. You can include an optional numerical value.",
"body": ["bool SendGenericEvent($string_eventid, $number_value)"]
},
"SendGenericEvent ": {
"prefix": "SendGenericEvent ",
"description": "This function queues a user-defined event. You can include an optional numerical value.",
"body": ["bool SendGenericEvent($string_eventid, $number_value)"]
},
"Analytics:SendProgressEvent": {
"prefix": "Analytics:SendProgressEvent",
"description": "This function can be used to send a progression event to see how many users can make it through your game levels. By default, the main lua script includes code to manage these events.",
"body": ["static bool SendProgressEvent($string_status, $string_levelname)"]
},
"SendProgressEvent": {
"prefix": "SendProgressEvent",
"description": "This function can be used to send a progression event to see how many users can make it through your game levels. By default, the main lua script includes code to manage these events.",
"body": ["static bool SendProgressEvent($string_status, $string_levelname)"]
},
"Analytics:SendProgressEvent ": {
"prefix": "Analytics:SendProgressEvent ",
"description": "This function can be used to send a progression event to see how many users can make it through your game levels. By default, the main lua script includes code to manage these events.",
"body": ["static bool SendProgressEvent($string_status, $string_levelname, $number_score)"]
},
"SendProgressEvent ": {
"prefix": "SendProgressEvent ",
"description": "This function can be used to send a progression event to see how many users can make it through your game levels. By default, the main lua script includes code to manage these events.",
"body": ["static bool SendProgressEvent($string_status, $string_levelname, $number_score)"]
},
"Analytics:SendProgressEvent  ": {
"prefix": "Analytics:SendProgressEvent  ",
"description": "This function can be used to send a progression event to see how many users can make it through your game levels. By default, the main lua script includes code to manage these events.",
"body": ["static bool SendProgressEvent($string_status, $string_levelname, $number_score, $number_attempt_num)"]
},
"SendProgressEvent  ": {
"prefix": "SendProgressEvent  ",
"description": "This function can be used to send a progression event to see how many users can make it through your game levels. By default, the main lua script includes code to manage these events.",
"body": ["static bool SendProgressEvent($string_status, $string_levelname, $number_score, $number_attempt_num)"]
},
"Analytics:SetKeys": {
"prefix": "Analytics:SetKeys",
"description": "This function must be called before Analytics::Enable(). You can obtain your game key and secret key by creating an account at <a target='newwindow' href='http://www.GameAnalytics.com'>http://www.gameanalytics.com</a>",
"body": ["SetKeys($string_gamekey, $string_secretkey)"]
},
"SetKeys": {
"prefix": "SetKeys",
"description": "This function must be called before Analytics::Enable(). You can obtain your game key and secret key by creating an account at <a target='newwindow' href='http://www.GameAnalytics.com'>http://www.gameanalytics.com</a>",
"body": ["SetKeys($string_gamekey, $string_secretkey)"]
},
"Font:GetHeight": {
"prefix": "Font:GetHeight",
"description": "Returns the height of a font. The height is measured as the space between the font baseline and cap height.<img src='documentation/img/Font_GetHeight/image1.png' />",
"body": ["number GetHeight()"]
},
"GetHeight": {
"prefix": "GetHeight",
"description": "Returns the height of a font. The height is measured as the space between the font baseline and cap height.<img src='documentation/img/Font_GetHeight/image1.png' />",
"body": ["number GetHeight()"]
},
"Font:GetTextWidth": {
"prefix": "Font:GetTextWidth",
"description": "Returns the width of a line of text when drawn with this font. Use this to center text or calculate background dimensions.",
"body": ["number GetTextWidth($string_text)"]
},
"GetTextWidth": {
"prefix": "GetTextWidth",
"description": "Returns the width of a line of text when drawn with this font. Use this to center text or calculate background dimensions.",
"body": ["number GetTextWidth($string_text)"]
},
"Font:Load": {
"prefix": "Font:Load",
"description": "Loads a font from a True-Type Font (.ttf) file.",
"body": ["Font Load($string_path, $number_size, $number_style=Font.Smooth, $number_family=Font.English, $number_flags=0)"]
},
"Load": {
"prefix": "Load",
"description": "Loads a font from a True-Type Font (.ttf) file.",
"body": ["Font Load($string_path, $number_size, $number_style=Font.Smooth, $number_family=Font.English, $number_flags=0)"]
},
"Material:Create": {
"prefix": "Material:Create",
"description": "This function creates and returns a new blank material.",
"body": ["Material Create()"]
},
"Create": {
"prefix": "Create",
"description": "This function creates and returns a new blank material.",
"body": ["Material Create()"]
},
"Material:GetBackFaceCullMode": {
"prefix": "Material:GetBackFaceCullMode",
"description": "Gets the backface culling mode of the material. By default, a material will not render faces that point away from the camera. However, there are some special situations where it is desirable to always have a visible face. For example, this effect can be used to make plants with leaves that look like they are lit from their back side when pointing away from the camera.",
"body": ["bool GetBackFaceCullMode()"]
},
"GetBackFaceCullMode": {
"prefix": "GetBackFaceCullMode",
"description": "Gets the backface culling mode of the material. By default, a material will not render faces that point away from the camera. However, there are some special situations where it is desirable to always have a visible face. For example, this effect can be used to make plants with leaves that look like they are lit from their back side when pointing away from the camera.",
"body": ["bool GetBackFaceCullMode()"]
},
"Material:GetBlendMode": {
"prefix": "Material:GetBlendMode",
"description": "Gets the blend mode of the material.",
"body": ["number GetBlendMode()"]
},
"GetBlendMode": {
"prefix": "GetBlendMode",
"description": "Gets the blend mode of the material.",
"body": ["number GetBlendMode()"]
},
"Material:GetColor": {
"prefix": "Material:GetColor",
"description": "This functions gets the material color.",
"body": ["Vec4 GetColor($number_mode=Draw.DiffuseColor)"]
},
"GetColor": {
"prefix": "GetColor",
"description": "This functions gets the material color.",
"body": ["Vec4 GetColor($number_mode=Draw.DiffuseColor)"]
},
"Material:GetDepthMaskMode": {
"prefix": "Material:GetDepthMaskMode",
"description": "Gets the material depth mask mode. The depth mask mode indicates whether a surface with this material applied will write to the depth buffer.",
"body": ["GetDepthMaskMode()"]
},
"GetDepthMaskMode": {
"prefix": "GetDepthMaskMode",
"description": "Gets the material depth mask mode. The depth mask mode indicates whether a surface with this material applied will write to the depth buffer.",
"body": ["GetDepthMaskMode()"]
},
"Material:GetDepthTestMode": {
"prefix": "Material:GetDepthTestMode",
"description": "Gets the material depth test mode. The depth test mode indicates whether a surface with this material applied will use depth testing when rendered. If depth testing is disabled, the surface will appear on top of all other surfaces.",
"body": ["bool GetDepthTestMode()"]
},
"GetDepthTestMode": {
"prefix": "GetDepthTestMode",
"description": "Gets the material depth test mode. The depth test mode indicates whether a surface with this material applied will use depth testing when rendered. If depth testing is disabled, the surface will appear on top of all other surfaces.",
"body": ["bool GetDepthTestMode()"]
},
"Material:GetPickMode": {
"prefix": "Material:GetPickMode",
"description": "This function is used to retrieve the pick mode of a material. A material's pick mode is set to true by default. If it is set to false, then any surfaces with this material applied will be skipped during a pick operation.",
"body": ["bool GetPickMode()"]
},
"GetPickMode": {
"prefix": "GetPickMode",
"description": "This function is used to retrieve the pick mode of a material. A material's pick mode is set to true by default. If it is set to false, then any surfaces with this material applied will be skipped during a pick operation.",
"body": ["bool GetPickMode()"]
},
"Material:GetRoughness": {
"prefix": "Material:GetRoughness",
"description": "This command gets the roughness of a material. The roughness affects how the material displays reflections. A rough surface will display an indistinct blurred reflection, while a low roughness value will result in a sharp mirror-like reflection.",
"body": ["number GetRoughness()"]
},
"GetRoughness": {
"prefix": "GetRoughness",
"description": "This command gets the roughness of a material. The roughness affects how the material displays reflections. A rough surface will display an indistinct blurred reflection, while a low roughness value will result in a sharp mirror-like reflection.",
"body": ["number GetRoughness()"]
},
"Material:GetShader": {
"prefix": "Material:GetShader",
"description": "This function gets the material shader. This function does not increment the shader reference count.",
"body": ["Shader GetShader()"]
},
"GetShader": {
"prefix": "GetShader",
"description": "This function gets the material shader. This function does not increment the shader reference count.",
"body": ["Shader GetShader()"]
},
"Material:GetShadowMode": {
"prefix": "Material:GetShadowMode",
"description": "This function gets the material shadow mode.",
"body": ["bool GetShadowMode()"]
},
"GetShadowMode": {
"prefix": "GetShadowMode",
"description": "This function gets the material shadow mode.",
"body": ["bool GetShadowMode()"]
},
"Material:GetSortMode": {
"prefix": "Material:GetSortMode",
"description": "This function gets the material sort mode. Most materials with a blend mode other than Blend::Solid should use sorting to draw surfaces back to front.",
"body": ["bool GetSortMode()"]
},
"GetSortMode": {
"prefix": "GetSortMode",
"description": "This function gets the material sort mode. Most materials with a blend mode other than Blend::Solid should use sorting to draw surfaces back to front.",
"body": ["bool GetSortMode()"]
},
"Material:GetTexture": {
"prefix": "Material:GetTexture",
"description": "This function gets a material texture. The function does not increment the texture's reference count.",
"body": ["Texture GetTexture($number_index=0)"]
},
"GetTexture": {
"prefix": "GetTexture",
"description": "This function gets a material texture. The function does not increment the texture's reference count.",
"body": ["Texture GetTexture($number_index=0)"]
},
"Material:Load": {
"prefix": "Material:Load",
"description": "This function loads a material from a material (*.mat) file.",
"body": ["Material Load($string_path, $number_flags=0)"]
},
"Load ": {
"prefix": "Load ",
"description": "This function loads a material from a material (*.mat) file.",
"body": ["Material Load($string_path, $number_flags=0)"]
},
"Material:SetBackFaceCullMode": {
"prefix": "Material:SetBackFaceCullMode",
"description": "This function sets the back face culling mode of the material. By default, a material will not render faces that point away from the camera. However, there are some special situations where it is desirable to always have a visible face. For example, this effect can be used to make plants with leaves that look like they are lit from their back side when pointing away from the camera.",
"body": ["SetBackFaceCullMode($bool_mode)"]
},
"SetBackFaceCullMode": {
"prefix": "SetBackFaceCullMode",
"description": "This function sets the back face culling mode of the material. By default, a material will not render faces that point away from the camera. However, there are some special situations where it is desirable to always have a visible face. For example, this effect can be used to make plants with leaves that look like they are lit from their back side when pointing away from the camera.",
"body": ["SetBackFaceCullMode($bool_mode)"]
},
"Material:SetBlendMode": {
"prefix": "Material:SetBlendMode",
"description": "Sets the blend mode of the material.",
"body": ["SetBlendMode($number_mode)"]
},
"SetBlendMode": {
"prefix": "SetBlendMode",
"description": "Sets the blend mode of the material.",
"body": ["SetBlendMode($number_mode)"]
},
"Material:SetColor": {
"prefix": "Material:SetColor",
"description": "Sets the material color.",
"body": ["SetColor($Vec4_color, $number_mode=Draw.DiffuseColor)"]
},
"SetColor": {
"prefix": "SetColor",
"description": "Sets the material color.",
"body": ["SetColor($Vec4_color, $number_mode=Draw.DiffuseColor)"]
},
"Material:SetColor ": {
"prefix": "Material:SetColor ",
"description": "Sets the material color.",
"body": ["SetColor($number_r, $number_g, $number_b, $number_a, $number_mode=Draw.DiffuseColor)"]
},
"SetColor ": {
"prefix": "SetColor ",
"description": "Sets the material color.",
"body": ["SetColor($number_r, $number_g, $number_b, $number_a, $number_mode=Draw.DiffuseColor)"]
},
"Material:SetColor  ": {
"prefix": "Material:SetColor  ",
"description": "Sets the material color.",
"body": ["SetColor($number_r, $number_g, $number_b)"]
},
"SetColor  ": {
"prefix": "SetColor  ",
"description": "Sets the material color.",
"body": ["SetColor($number_r, $number_g, $number_b)"]
},
"Material:SetDepthMaskMode": {
"prefix": "Material:SetDepthMaskMode",
"description": "Sets the material depth mask mode. The depth mask mode indicates whether a surface with this material applied will write to the depth buffer.",
"body": ["SetDepthMaskMode($bool_mode)"]
},
"SetDepthMaskMode": {
"prefix": "SetDepthMaskMode",
"description": "Sets the material depth mask mode. The depth mask mode indicates whether a surface with this material applied will write to the depth buffer.",
"body": ["SetDepthMaskMode($bool_mode)"]
},
"Material:SetDepthTestMode": {
"prefix": "Material:SetDepthTestMode",
"description": "Sets the material depth test mode. The depth test mode indicates whether a surface with this material applied will use depth testing when rendered. If depth testing is disabled, the surface will appear on top of all other surfaces.",
"body": ["SetDepthTestMode($bool_mode)"]
},
"SetDepthTestMode": {
"prefix": "SetDepthTestMode",
"description": "Sets the material depth test mode. The depth test mode indicates whether a surface with this material applied will use depth testing when rendered. If depth testing is disabled, the surface will appear on top of all other surfaces.",
"body": ["SetDepthTestMode($bool_mode)"]
},
"Material:SetPickMode": {
"prefix": "Material:SetPickMode",
"description": "This function is used to set the pick mode of a material. A material's pick mode is set to true by default. If it is set to false, then any surfaces with this material applied will be skipped during a pick operation.",
"body": ["SetPickMode($bool_pickmode)"]
},
"SetPickMode": {
"prefix": "SetPickMode",
"description": "This function is used to set the pick mode of a material. A material's pick mode is set to true by default. If it is set to false, then any surfaces with this material applied will be skipped during a pick operation.",
"body": ["SetPickMode($bool_pickmode)"]
},
"Material:SetRoughness": {
"prefix": "Material:SetRoughness",
"description": "This command sets the roughness of a material. This affects how the material displays reflections. A rough surface will display an indistinct blurred reflection, while a low roughness value will result in a sharp mirror-like reflection.",
"body": ["SetRoughness($number_roughness)"]
},
"SetRoughness": {
"prefix": "SetRoughness",
"description": "This command sets the roughness of a material. This affects how the material displays reflections. A rough surface will display an indistinct blurred reflection, while a low roughness value will result in a sharp mirror-like reflection.",
"body": ["SetRoughness($number_roughness)"]
},
"Material:SetShader": {
"prefix": "Material:SetShader",
"description": "This function sets the material shader. If the shader is not NULL, this function will increment the shader reference count. If the previously set shader is not NULL, this function will decrement the previously set shader's reference count.",
"body": ["SetShader($Shader_shader)"]
},
"SetShader": {
"prefix": "SetShader",
"description": "This function sets the material shader. If the shader is not NULL, this function will increment the shader reference count. If the previously set shader is not NULL, this function will decrement the previously set shader's reference count.",
"body": ["SetShader($Shader_shader)"]
},
"Material:SetShadowMode": {
"prefix": "Material:SetShadowMode",
"description": "This function sets the material shadow mode.",
"body": ["SetShadowMode($bool_mode)"]
},
"SetShadowMode": {
"prefix": "SetShadowMode",
"description": "This function sets the material shadow mode.",
"body": ["SetShadowMode($bool_mode)"]
},
"Material:SetSortMode": {
"prefix": "Material:SetSortMode",
"description": "This function sets the material sort mode. Most materials with a blend mode other than Blend::Solid should use sorting to draw surfaces back to front.",
"body": ["SetSortMode($bool_mode)"]
},
"SetSortMode": {
"prefix": "SetSortMode",
"description": "This function sets the material sort mode. Most materials with a blend mode other than Blend::Solid should use sorting to draw surfaces back to front.",
"body": ["SetSortMode($bool_mode)"]
},
"Material:SetTexture": {
"prefix": "Material:SetTexture",
"description": "This function sets the material texture. If the texture is not NULL, this function will increment the texture reference count. If the previously set texture is not NULL, this function will decrement the previously set texture's reference count.",
"body": ["SetTexture($Texture_texture, $number_index_=_0)"]
},
"SetTexture": {
"prefix": "SetTexture",
"description": "This function sets the material texture. If the texture is not NULL, this function will increment the texture reference count. If the previously set texture is not NULL, this function will decrement the previously set texture's reference count.",
"body": ["SetTexture($Texture_texture, $number_index_=_0)"]
},
"Shader:Compile": {
"prefix": "Shader:Compile",
"description": "This function will compile a shader.",
"body": ["bool Compile($number_sourceid)"]
},
"Compile": {
"prefix": "Compile",
"description": "This function will compile a shader.",
"body": ["bool Compile($number_sourceid)"]
},
"Shader:Create": {
"prefix": "Shader:Create",
"description": "This function creates a new shader. The shader must have source code added, and be compiled and linked before it is usable.",
"body": ["Shader Create()"]
},
"Create ": {
"prefix": "Create ",
"description": "This function creates a new shader. The shader must have source code added, and be compiled and linked before it is usable.",
"body": ["Shader Create()"]
},
"Shader:GetFloat": {
"prefix": "Shader:GetFloat",
"description": "This function gets the value of a float uniform.",
"body": ["number GetFloat($string_name)"]
},
"GetFloat": {
"prefix": "GetFloat",
"description": "This function gets the value of a float uniform.",
"body": ["number GetFloat($string_name)"]
},
"Shader:GetInt": {
"prefix": "Shader:GetInt",
"description": "This function gets the value of an integer uniform.",
"body": ["number GetInt($string_name)"]
},
"GetInt": {
"prefix": "GetInt",
"description": "This function gets the value of an integer uniform.",
"body": ["number GetInt($string_name)"]
},
"Shader:GetLog": {
"prefix": "Shader:GetLog",
"description": "This function gets the log text of the last operation performed on a shader. You can use this to retrieve detailed information from a shader after it is compiled or linked. The format and content of the text depends on the graphics hardware.",
"body": ["string GetLog()"]
},
"GetLog": {
"prefix": "GetLog",
"description": "This function gets the log text of the last operation performed on a shader. You can use this to retrieve detailed information from a shader after it is compiled or linked. The format and content of the text depends on the graphics hardware.",
"body": ["string GetLog()"]
},
"Shader:GetMat3": {
"prefix": "Shader:GetMat3",
"description": "This function gets the value of a Mat3 uniform.",
"body": ["Mat3 GetMat3($string_name)"]
},
"GetMat3": {
"prefix": "GetMat3",
"description": "This function gets the value of a Mat3 uniform.",
"body": ["Mat3 GetMat3($string_name)"]
},
"Shader:GetMat4": {
"prefix": "Shader:GetMat4",
"description": "This function gets the value of a Mat4 uniform.",
"body": ["Mat4 GetMat4($string_name)"]
},
"GetMat4": {
"prefix": "GetMat4",
"description": "This function gets the value of a Mat4 uniform.",
"body": ["Mat4 GetMat4($string_name)"]
},
"Shader:GetVec2": {
"prefix": "Shader:GetVec2",
"description": "This function gets the value of a Vec2 uniform.",
"body": ["Vec2 GetVec2($string_name)"]
},
"GetVec2": {
"prefix": "GetVec2",
"description": "This function gets the value of a Vec2 uniform.",
"body": ["Vec2 GetVec2($string_name)"]
},
"Shader:GetVec3": {
"prefix": "Shader:GetVec3",
"description": "This function gets the value of a Vec3 uniform.",
"body": ["Vec3 GetVec3($string_name)"]
},
"GetVec3": {
"prefix": "GetVec3",
"description": "This function gets the value of a Vec3 uniform.",
"body": ["Vec3 GetVec3($string_name)"]
},
"Shader:GetVec4": {
"prefix": "Shader:GetVec4",
"description": "This function gets the value of a Vec4 uniform.",
"body": ["Vec4 GetVec4($string_name)"]
},
"GetVec4": {
"prefix": "GetVec4",
"description": "This function gets the value of a Vec4 uniform.",
"body": ["Vec4 GetVec4($string_name)"]
},
"Shader:Link": {
"prefix": "Shader:Link",
"description": "This function links a shader. A shader must be compiled and linked before it is ready to use.",
"body": ["bool Link()"]
},
"Link": {
"prefix": "Link",
"description": "This function links a shader. A shader must be compiled and linked before it is ready to use.",
"body": ["bool Link()"]
},
"Shader:SetFloat": {
"prefix": "Shader:SetFloat",
"description": "This function sets a float uniform.",
"body": ["bool SetFloat($string_name, $number_f)"]
},
"SetFloat": {
"prefix": "SetFloat",
"description": "This function sets a float uniform.",
"body": ["bool SetFloat($string_name, $number_f)"]
},
"Shader:SetFloat ": {
"prefix": "Shader:SetFloat ",
"description": "This function sets a float uniform.",
"body": ["bool SetFloat($string_name, $number_f, $number_count)"]
},
"SetFloat ": {
"prefix": "SetFloat ",
"description": "This function sets a float uniform.",
"body": ["bool SetFloat($string_name, $number_f, $number_count)"]
},
"Shader:SetInt": {
"prefix": "Shader:SetInt",
"description": "This function sets an integer uniform.",
"body": ["bool SetInt($string_name, $number_i)"]
},
"SetInt": {
"prefix": "SetInt",
"description": "This function sets an integer uniform.",
"body": ["bool SetInt($string_name, $number_i)"]
},
"Shader:SetInt ": {
"prefix": "Shader:SetInt ",
"description": "This function sets an integer uniform.",
"body": ["bool SetInt($string_name, $number_i, $number_count))"]
},
"SetInt ": {
"prefix": "SetInt ",
"description": "This function sets an integer uniform.",
"body": ["bool SetInt($string_name, $number_i, $number_count))"]
},
"Shader:SetMat3": {
"prefix": "Shader:SetMat3",
"description": "This function sets a Mat3 uniform.",
"body": ["bool SetMat3($string_name, $Mat3_m)"]
},
"SetMat3": {
"prefix": "SetMat3",
"description": "This function sets a Mat3 uniform.",
"body": ["bool SetMat3($string_name, $Mat3_m)"]
},
"Shader:SetMat4": {
"prefix": "Shader:SetMat4",
"description": "This function sets a Mat4 uniform.",
"body": ["bool SetMat4($string_name, $Mat4_m)"]
},
"SetMat4": {
"prefix": "SetMat4",
"description": "This function sets a Mat4 uniform.",
"body": ["bool SetMat4($string_name, $Mat4_m)"]
},
"Shader:SetVec2": {
"prefix": "Shader:SetVec2",
"description": "This function sets a Vec2 uniform.",
"body": ["bool SetVec2($string_name, $Vec2_v)"]
},
"SetVec2": {
"prefix": "SetVec2",
"description": "This function sets a Vec2 uniform.",
"body": ["bool SetVec2($string_name, $Vec2_v)"]
},
"Shader:SetVec2 ": {
"prefix": "Shader:SetVec2 ",
"description": "This function sets a Vec2 uniform.",
"body": ["bool SetVec2($string_name, $number_v, $number_count)"]
},
"SetVec2 ": {
"prefix": "SetVec2 ",
"description": "This function sets a Vec2 uniform.",
"body": ["bool SetVec2($string_name, $number_v, $number_count)"]
},
"Shader:SetVec3": {
"prefix": "Shader:SetVec3",
"description": "This function sets a Vec3 uniform.",
"body": ["bool SetVec3($string_name, $Vec3_v)"]
},
"SetVec3": {
"prefix": "SetVec3",
"description": "This function sets a Vec3 uniform.",
"body": ["bool SetVec3($string_name, $Vec3_v)"]
},
"Shader:SetVec3 ": {
"prefix": "Shader:SetVec3 ",
"description": "This function sets a Vec3 uniform.",
"body": ["bool SetVec3($string_name, $number_v, $number_count)"]
},
"SetVec3 ": {
"prefix": "SetVec3 ",
"description": "This function sets a Vec3 uniform.",
"body": ["bool SetVec3($string_name, $number_v, $number_count)"]
},
"Shader:SetVec4": {
"prefix": "Shader:SetVec4",
"description": "This function sets a Vec4 uniform.",
"body": ["bool SetVec4($string_name, $Vec4_v)"]
},
"SetVec4": {
"prefix": "SetVec4",
"description": "This function sets a Vec4 uniform.",
"body": ["bool SetVec4($string_name, $Vec4_v)"]
},
"Shader:SetVec4 ": {
"prefix": "Shader:SetVec4 ",
"description": "This function sets a Vec4 uniform.",
"body": ["bool SetVec4($string_name, $number_v, $number_count)"]
},
"SetVec4 ": {
"prefix": "SetVec4 ",
"description": "This function sets a Vec4 uniform.",
"body": ["bool SetVec4($string_name, $number_v, $number_count)"]
},
"Shape:Box": {
"prefix": "Shape:Box",
"description": "This function creates s new box shape.",
"body": ["Shape Box($number_x=0, $number_y=0, $number_z=0, $number_pitch=0, $number_yaw_=_0, $number_roll=0, $number_width=1, $number_height_=1, $number_depth=1)"]
},
"Box": {
"prefix": "Box",
"description": "This function creates s new box shape.",
"body": ["Shape Box($number_x=0, $number_y=0, $number_z=0, $number_pitch=0, $number_yaw_=_0, $number_roll=0, $number_width=1, $number_height_=1, $number_depth=1)"]
},
"Shape:Cone": {
"prefix": "Shape:Cone",
"description": "This function creates s new cone shape.",
"body": ["Shape Cone($number_x=0, $number_y=0, $number_z=0, $number_pitch=0, $number_yaw_=_0, $number_roll=0, $number_width=1, $number_height_=1, $number_depth=1)"]
},
"Cone": {
"prefix": "Cone",
"description": "This function creates s new cone shape.",
"body": ["Shape Cone($number_x=0, $number_y=0, $number_z=0, $number_pitch=0, $number_yaw_=_0, $number_roll=0, $number_width=1, $number_height_=1, $number_depth=1)"]
},
"Shape:ConvexHull": {
"prefix": "Shape:ConvexHull",
"description": "This function creates s new shape using the convex hull algorithm.",
"body": ["Shape ConvexHull($Surface_surface)"]
},
"ConvexHull": {
"prefix": "ConvexHull",
"description": "This function creates s new shape using the convex hull algorithm.",
"body": ["Shape ConvexHull($Surface_surface)"]
},
"Shape:Cylinder": {
"prefix": "Shape:Cylinder",
"description": "This function creates s new cylinder shape.",
"body": ["Shape Cylinder($number_x=0, $number_y=0, $number_z=0, $number_pitch=0, $number_yaw_=_0, $number_roll=0, $number_width=1, $number_height_=1, $number_depth=1)"]
},
"Cylinder": {
"prefix": "Cylinder",
"description": "This function creates s new cylinder shape.",
"body": ["Shape Cylinder($number_x=0, $number_y=0, $number_z=0, $number_pitch=0, $number_yaw_=_0, $number_roll=0, $number_width=1, $number_height_=1, $number_depth=1)"]
},
"Shape:PolyMesh": {
"prefix": "Shape:PolyMesh",
"description": "This function creates s new polymesh shape.",
"body": ["Shape PolyMesh($Surface_surface)"]
},
"PolyMesh": {
"prefix": "PolyMesh",
"description": "This function creates s new polymesh shape.",
"body": ["Shape PolyMesh($Surface_surface)"]
},
"Shape:Sphere": {
"prefix": "Shape:Sphere",
"description": "This function creates s new sphere shape.",
"body": ["Shape Sphere($number_x=0, $number_y=0, $number_z=0, $number_pitch=0, $number_yaw_=_0, $number_roll=0, $number_width=1, $number_height_=1, $number_depth=1)"]
},
"Sphere": {
"prefix": "Sphere",
"description": "This function creates s new sphere shape.",
"body": ["Shape Sphere($number_x=0, $number_y=0, $number_z=0, $number_pitch=0, $number_yaw_=_0, $number_roll=0, $number_width=1, $number_height_=1, $number_depth=1)"]
},
"Sound:GetLength": {
"prefix": "Sound:GetLength",
"description": "This function gets the length of a sound.",
"body": ["number GetLength()"]
},
"GetLength": {
"prefix": "GetLength",
"description": "This function gets the length of a sound.",
"body": ["number GetLength()"]
},
"Sound:Load": {
"prefix": "Sound:Load",
"description": "This function loads a sound from a sound (*.wav) file.",
"body": ["Sound Load($string_path, $number_flags=0)"]
},
"Load  ": {
"prefix": "Load  ",
"description": "This function loads a sound from a sound (*.wav) file.",
"body": ["Sound Load($string_path, $number_flags=0)"]
},
"Texture:Bind": {
"prefix": "Texture:Bind",
"description": "Binds a texture to a texture slot. The texture can then be read from a shader.",
"body": ["Bind($number_index=0)"]
},
"Bind": {
"prefix": "Bind",
"description": "Binds a texture to a texture slot. The texture can then be read from a shader.",
"body": ["Bind($number_index=0)"]
},
"Texture:CountMipmaps": {
"prefix": "Texture:CountMipmaps",
"description": "This function gets the number of mipmaps a texture contains.",
"body": ["Play()"]
},
"CountMipmaps": {
"prefix": "CountMipmaps",
"description": "This function gets the number of mipmaps a texture contains.",
"body": ["Play()"]
},
"Texture:Create": {
"prefix": "Texture:Create",
"description": "This function creates a new texture.",
"body": ["Texture Create($number_width, $number_height, $number_format=Texture.RGBA, $number_flags=0, $number_frames=1, $number_samples=0)"]
},
"Create  ": {
"prefix": "Create  ",
"description": "This function creates a new texture.",
"body": ["Texture Create($number_width, $number_height, $number_format=Texture.RGBA, $number_flags=0, $number_frames=1, $number_samples=0)"]
},
"Texture:GetClampMode": {
"prefix": "Texture:GetClampMode",
"description": "This function gets the clamp mode of a texture.",
"body": ["bool GetClampMode($number_axis)"]
},
"GetClampMode": {
"prefix": "GetClampMode",
"description": "This function gets the clamp mode of a texture.",
"body": ["bool GetClampMode($number_axis)"]
},
"Texture:GetFilter": {
"prefix": "Texture:GetFilter",
"description": "This function gets the texture filter mode.",
"body": ["number GetFilter()"]
},
"GetFilter": {
"prefix": "GetFilter",
"description": "This function gets the texture filter mode.",
"body": ["number GetFilter()"]
},
"Texture:GetFormat": {
"prefix": "Texture:GetFormat",
"description": "This function gets the format of a texture.",
"body": ["number GetFilter()"]
},
"GetFormat": {
"prefix": "GetFormat",
"description": "This function gets the format of a texture.",
"body": ["number GetFilter()"]
},
"Texture:GetHeight": {
"prefix": "Texture:GetHeight",
"description": "This function gets the height of a texture.",
"body": ["number GetHeight($number_miplevel=0)"]
},
"GetHeight ": {
"prefix": "GetHeight ",
"description": "This function gets the height of a texture.",
"body": ["number GetHeight($number_miplevel=0)"]
},
"Texture:GetMipmapSize": {
"prefix": "Texture:GetMipmapSize",
"description": "This function returns the size of a texture mipmap's data. This can be used to ensure a buffer's data size is correct when calling Texture::SetPixels().",
"body": ["number GetMipmapSize($number_miplevel=0)"]
},
"GetMipmapSize": {
"prefix": "GetMipmapSize",
"description": "This function returns the size of a texture mipmap's data. This can be used to ensure a buffer's data size is correct when calling Texture::SetPixels().",
"body": ["number GetMipmapSize($number_miplevel=0)"]
},
"Texture:GetWidth": {
"prefix": "Texture:GetWidth",
"description": "This function gets the width of a texture.",
"body": ["number GetWidth($number_miplevel=0)"]
},
"GetWidth": {
"prefix": "GetWidth",
"description": "This function gets the width of a texture.",
"body": ["number GetWidth($number_miplevel=0)"]
},
"Texture:Load": {
"prefix": "Texture:Load",
"description": "This function loads a texture from a texture (*.tex) file.",
"body": ["Texture Load($string_path, $number_flags=0)"]
},
"Load   ": {
"prefix": "Load   ",
"description": "This function loads a texture from a texture (*.tex) file.",
"body": ["Texture Load($string_path, $number_flags=0)"]
},
"Texture:SetClampMode": {
"prefix": "Texture:SetClampMode",
"description": "Sets the clamp mode of a texture.",
"body": ["SetClampMode($bool_x, $bool_y, $bool_z_=_false)"]
},
"SetClampMode": {
"prefix": "SetClampMode",
"description": "Sets the clamp mode of a texture.",
"body": ["SetClampMode($bool_x, $bool_y, $bool_z_=_false)"]
},
"Texture:SetFilter": {
"prefix": "Texture:SetFilter",
"description": "Sets the filter mode of a texture.",
"body": ["SetFilter($number_filtermode)"]
},
"SetFilter": {
"prefix": "SetFilter",
"description": "Sets the filter mode of a texture.",
"body": ["SetFilter($number_filtermode)"]
},
"Asset:Copy": {
"prefix": "Asset:Copy",
"description": "Creates and returns a duplicate of the asset. Changes to one copy will not affect the other.",
"body": ["Asset Copy()"]
},
"Copy": {
"prefix": "Copy",
"description": "Creates and returns a duplicate of the asset. Changes to one copy will not affect the other.",
"body": ["Asset Copy()"]
},
"Asset:GetPath": {
"prefix": "Asset:GetPath",
"description": "Returns the file path the Asset was loaded from.",
"body": ["string GetPath()"]
},
"GetPath": {
"prefix": "GetPath",
"description": "Returns the file path the Asset was loaded from.",
"body": ["string GetPath()"]
},
"Client:Connect": {
"prefix": "Client:Connect",
"description": "This function connects to a server with the specified IP address and port. The connection does not complete until a Connected message is received from a call to the Update() function.",
"body": ["Peer Connect($string_address, $number_port=8888)"]
},
"Connect": {
"prefix": "Connect",
"description": "This function connects to a server with the specified IP address and port. The connection does not complete until a Connected message is received from a call to the Update() function.",
"body": ["Peer Connect($string_address, $number_port=8888)"]
},
"Client:Create": {
"prefix": "Client:Create",
"description": "This function creates a new network client.",
"body": ["global Client Create()"]
},
"Create   ": {
"prefix": "Create   ",
"description": "This function creates a new network client.",
"body": ["global Client Create()"]
},
"Client:Disconnect": {
"prefix": "Client:Disconnect",
"description": "This function connects to a server with the specified IP address and port. Unless the force parameter is set to true, the disconnection does not complete until a Disconnected message is received from a call to the Update() function.",
"body": ["Disconnect($boolean_force_=_false)"]
},
"Disconnect": {
"prefix": "Disconnect",
"description": "This function connects to a server with the specified IP address and port. Unless the force parameter is set to true, the disconnection does not complete until a Disconnected message is received from a call to the Update() function.",
"body": ["Disconnect($boolean_force_=_false)"]
},
"Client:Send": {
"prefix": "Client:Send",
"description": "This function sends a message to the connected server.",
"body": ["boolean Send($number_message, $Bank_data, $number_channel=0, $number_flags=0)"]
},
"Send": {
"prefix": "Send",
"description": "This function sends a message to the connected server.",
"body": ["boolean Send($number_message, $Bank_data, $number_channel=0, $number_flags=0)"]
},
"Client:Send ": {
"prefix": "Client:Send ",
"description": "This function sends a message to the connected server.",
"body": ["boolean Send($number_message, $string_text, $number_channel=0, $number_flags=0)"]
},
"Send ": {
"prefix": "Send ",
"description": "This function sends a message to the connected server.",
"body": ["boolean Send($number_message, $string_text, $number_channel=0, $number_flags=0)"]
},
"Client:Update": {
"prefix": "Client:Update",
"description": "This function updates the network connection and checks for new messages. If a message is received, it should be read and then immediately released to free up resources.",
"body": ["Message Update($number_timeout=0)"]
},
"Update": {
"prefix": "Update",
"description": "This function updates the network connection and checks for new messages. If a message is received, it should be read and then immediately released to free up resources.",
"body": ["Message Update($number_timeout=0)"]
},
"Context:Create": {
"prefix": "Context:Create",
"description": "Creates a new graphics context for rendering.",
"body": ["Context Create($Window_window, $number_multisamplemode=0)"]
},
"Create    ": {
"prefix": "Create    ",
"description": "Creates a new graphics context for rendering.",
"body": ["Context Create($Window_window, $number_multisamplemode=0)"]
},
"Context:GetColor ": {
"prefix": "Context:GetColor ",
"description": "This functions gets the current rendering context.",
"body": ["Context GetCurrent()"]
},
"GetColor ": {
"prefix": "GetColor ",
"description": "This functions gets the current rendering context.",
"body": ["Context GetCurrent()"]
},
"Context:GetHeight": {
"prefix": "Context:GetHeight",
"description": "This function returns the height of a context in pixels. Use this for precise placement of 2D elements on the screen.",
"body": ["number GetHeight()"]
},
"GetHeight  ": {
"prefix": "GetHeight  ",
"description": "This function returns the height of a context in pixels. Use this for precise placement of 2D elements on the screen.",
"body": ["number GetHeight()"]
},
"Context:GetShader": {
"prefix": "Context:GetShader",
"description": "This function gets the current shader used for drawing operations.",
"body": ["Shader GetShader()"]
},
"GetShader ": {
"prefix": "GetShader ",
"description": "This function gets the current shader used for drawing operations.",
"body": ["Shader GetShader()"]
},
"Context:GetWidth": {
"prefix": "Context:GetWidth",
"description": "This function returns the width of a context in pixels. Use this for precise placement of 2D elements on the screen.",
"body": ["number GetWidth()"]
},
"GetWidth ": {
"prefix": "GetWidth ",
"description": "This function returns the width of a context in pixels. Use this for precise placement of 2D elements on the screen.",
"body": ["number GetWidth()"]
},
"Context:GetWindow": {
"prefix": "Context:GetWindow",
"description": "This function gets the window a context belongs to.",
"body": ["Context GetWindow()"]
},
"GetWindow": {
"prefix": "GetWindow",
"description": "This function gets the window a context belongs to.",
"body": ["Context GetWindow()"]
},
"Context:SetCurrent": {
"prefix": "Context:SetCurrent",
"description": "This function makes a context the current context for drawing operations.",
"body": ["SetCurrent($Context_context)"]
},
"SetCurrent": {
"prefix": "SetCurrent",
"description": "This function makes a context the current context for drawing operations.",
"body": ["SetCurrent($Context_context)"]
},
"Context:SetRotation": {
"prefix": "Context:SetRotation",
"description": "This function sets the current drawing rotation.",
"body": ["SetRotation($number_rotation)"]
},
"SetRotation": {
"prefix": "SetRotation",
"description": "This function sets the current drawing rotation.",
"body": ["SetRotation($number_rotation)"]
},
"Context:SetScale": {
"prefix": "Context:SetScale",
"description": "This function sets a context's drawing scale.",
"body": ["SetScale($number_x, $number_y)"]
},
"SetScale": {
"prefix": "SetScale",
"description": "This function sets a context's drawing scale.",
"body": ["SetScale($number_x, $number_y)"]
},
"Context:SetShader": {
"prefix": "Context:SetShader",
"description": "This function sets a context's shader for drawing operations.",
"body": ["SetShader($Shader_shader)"]
},
"SetShader ": {
"prefix": "SetShader ",
"description": "This function sets a context's shader for drawing operations.",
"body": ["SetShader($Shader_shader)"]
},
"Context:SetTranslation": {
"prefix": "Context:SetTranslation",
"description": "This function sets a context's drawing translation.",
"body": ["SetTranslation($number_x, $number_y)"]
},
"SetTranslation": {
"prefix": "SetTranslation",
"description": "This function sets a context's drawing translation.",
"body": ["SetTranslation($number_x, $number_y)"]
},
"Context:Sync": {
"prefix": "Context:Sync",
"description": "Refreshes the screen. If the optional vwait parameter is set to true, vertical syncing will be enabled, which will lock the screen refresh rate at 60 hertz and prevent screen 'tearing'.",
"body": ["Sync($bool_vwait=true)"]
},
"Sync": {
"prefix": "Sync",
"description": "Refreshes the screen. If the optional vwait parameter is set to true, vertical syncing will be enabled, which will lock the screen refresh rate at 60 hertz and prevent screen 'tearing'.",
"body": ["Sync($bool_vwait=true)"]
},
"Debug:Assert": {
"prefix": "Debug:Assert",
"description": "This function is a shorthand way of performing a test and displaying an error. If the specified condition is not true, a call to Debug::Stop() will be made.",
"body": ["Assert($bool_condition, $string_errortext='Assert_failed.')"]
},
"Assert": {
"prefix": "Assert",
"description": "This function is a shorthand way of performing a test and displaying an error. If the specified condition is not true, a call to Debug::Stop() will be made.",
"body": ["Assert($bool_condition, $string_errortext='Assert_failed.')"]
},
"Debug:Error": {
"prefix": "Debug:Error",
"description": "This function will first make a call to Debug::Stop(), then the application will terminate.",
"body": ["Error($string_errortext)"]
},
"Error": {
"prefix": "Error",
"description": "This function will first make a call to Debug::Stop(), then the application will terminate.",
"body": ["Error($string_errortext)"]
},
"DirectionalLight:Create": {
"prefix": "DirectionalLight:Create",
"description": "This function creates and returns a new directional light.",
"body": ["DirectionalLight Create($Entity_parent_=_NULL)"]
},
"Create     ": {
"prefix": "Create     ",
"description": "This function creates and returns a new directional light.",
"body": ["DirectionalLight Create($Entity_parent_=_NULL)"]
},
"PointLight:Create": {
"prefix": "PointLight:Create",
"description": "This function creates and returns a new point light.",
"body": ["PointLight Create($Entity_parent_=_NULL)"]
},
"Create      ": {
"prefix": "Create      ",
"description": "This function creates and returns a new point light.",
"body": ["PointLight Create($Entity_parent_=_NULL)"]
},
"SpotLight:Create": {
"prefix": "SpotLight:Create",
"description": "This function creates and returns a new spot light.",
"body": ["SpotLight Create($Entity_parent_=_NULL)"]
},
"Create       ": {
"prefix": "Create       ",
"description": "This function creates and returns a new spot light.",
"body": ["SpotLight Create($Entity_parent_=_NULL)"]
},
"SpotLight:GetConeAngles": {
"prefix": "SpotLight:GetConeAngles",
"description": "This function gets the outer and inner cone angles of a spotlight.",
"body": ["Vec2 GetConeAngles()"]
},
"GetConeAngles": {
"prefix": "GetConeAngles",
"description": "This function gets the outer and inner cone angles of a spotlight.",
"body": ["Vec2 GetConeAngles()"]
},
"SpotLight:SetConeAngles": {
"prefix": "SpotLight:SetConeAngles",
"description": "This function sets the outer and inner cone angles of a spotlight.",
"body": ["SetConeAngles($number_outer, $number_inner)"]
},
"SetConeAngles": {
"prefix": "SetConeAngles",
"description": "This function sets the outer and inner cone angles of a spotlight.",
"body": ["SetConeAngles($number_outer, $number_inner)"]
},
"Light:GetVolumetricStrength": {
"prefix": "Light:GetVolumetricStrength",
"description": "The volumetric effect value can be used to add a volumetric effect to lights, simulating light bouncing off of mist in the air.",
"body": ["number GetVolumetricStrength()"]
},
"GetVolumetricStrength": {
"prefix": "GetVolumetricStrength",
"description": "The volumetric effect value can be used to add a volumetric effect to lights, simulating light bouncing off of mist in the air.",
"body": ["number GetVolumetricStrength()"]
},
"Light:SetRange": {
"prefix": "Light:SetRange",
"description": "This function sets a light's range. You can retrieve the light range with the Camera::GetRange() function.",
"body": ["SetRange($number_farrange)"]
},
"SetRange": {
"prefix": "SetRange",
"description": "This function sets a light's range. You can retrieve the light range with the Camera::GetRange() function.",
"body": ["SetRange($number_farrange)"]
},
"Light:SetRange ": {
"prefix": "Light:SetRange ",
"description": "This function sets a light's range. You can retrieve the light range with the Camera::GetRange() function.",
"body": ["SetRange($number_nearrange, $number_farrange)"]
},
"SetRange ": {
"prefix": "SetRange ",
"description": "This function sets a light's range. You can retrieve the light range with the Camera::GetRange() function.",
"body": ["SetRange($number_nearrange, $number_farrange)"]
},
"Light:SetVolumetricStrength": {
"prefix": "Light:SetVolumetricStrength",
"description": "This command can be used to add a volumetric effect to lights, simulating light bouncing off of mist in the air.    <img src='documentation/img/Light_SetVolumetricStrength/Light_SetVolumetricStrength.jpg'/>",
"body": ["SetVolumetricStrength($number_strength)"]
},
"SetVolumetricStrength": {
"prefix": "SetVolumetricStrength",
"description": "This command can be used to add a volumetric effect to lights, simulating light bouncing off of mist in the air.    <img src='documentation/img/Light_SetVolumetricStrength/Light_SetVolumetricStrength.jpg'/>",
"body": ["SetVolumetricStrength($number_strength)"]
},
"Camera:AddPostEffect": {
"prefix": "Camera:AddPostEffect",
"description": "This function attaches a post-processing effect to the camera effects stack. Post-processing effects can be loaded as either .shader or .lua files, and will be rendered in the order they are attached to the camera.",
"body": ["AddPostEffect($string_path)"]
},
"AddPostEffect": {
"prefix": "AddPostEffect",
"description": "This function attaches a post-processing effect to the camera effects stack. Post-processing effects can be loaded as either .shader or .lua files, and will be rendered in the order they are attached to the camera.",
"body": ["AddPostEffect($string_path)"]
},
"Camera:ClearPostEffects": {
"prefix": "Camera:ClearPostEffects",
"description": "This function removes all post-processing effects from the camera effects stack.",
"body": ["ClearPostEffects()"]
},
"ClearPostEffects": {
"prefix": "ClearPostEffects",
"description": "This function removes all post-processing effects from the camera effects stack.",
"body": ["ClearPostEffects()"]
},
"Camera:Create": {
"prefix": "Camera:Create",
"description": "This function creates and returns a new camera entity.",
"body": ["Camera Create($Entity_parent_=_NULL)"]
},
"Create        ": {
"prefix": "Create        ",
"description": "This function creates and returns a new camera entity.",
"body": ["Camera Create($Entity_parent_=_NULL)"]
},
"Camera:Create ": {
"prefix": "Camera:Create ",
"description": "This function gets the clear color of a camera. The clear color is the background color a camera draws when rendered.",
"body": ["Vec4 GetClearColor()"]
},
"Create         ": {
"prefix": "Create         ",
"description": "This function gets the clear color of a camera. The clear color is the background color a camera draws when rendered.",
"body": ["Vec4 GetClearColor()"]
},
"Camera:GetFogAngle": {
"prefix": "Camera:GetFogAngle",
"description": "This function gets the camera fog angle. This controls the angles in the sky at which the fog fades out.",
"body": ["Vec2 GetFogAngle()"]
},
"GetFogAngle": {
"prefix": "GetFogAngle",
"description": "This function gets the camera fog angle. This controls the angles in the sky at which the fog fades out.",
"body": ["Vec2 GetFogAngle()"]
},
"Camera:GetFogColor": {
"prefix": "Camera:GetFogColor",
"description": "This function gets the camera fog color.",
"body": ["Vec4 GetFogColor()"]
},
"GetFogColor": {
"prefix": "GetFogColor",
"description": "This function gets the camera fog color.",
"body": ["Vec4 GetFogColor()"]
},
"Camera:GetFogMode": {
"prefix": "Camera:GetFogMode",
"description": "This function returns the current fog mode of the camera.",
"body": ["boolean GetFogMode()"]
},
"GetFogMode": {
"prefix": "GetFogMode",
"description": "This function returns the current fog mode of the camera.",
"body": ["boolean GetFogMode()"]
},
"Camera:GetFogRange": {
"prefix": "Camera:GetFogRange",
"description": "This function gets the camera fog range.",
"body": ["Vec2 GetFogRange()"]
},
"GetFogRange": {
"prefix": "GetFogRange",
"description": "This function gets the camera fog range.",
"body": ["Vec2 GetFogRange()"]
},
"Camera:GetProjectionMode": {
"prefix": "Camera:GetProjectionMode",
"description": "This function gets the projection mode of a camera.",
"body": ["number GetProjectionMode()"]
},
"GetProjectionMode": {
"prefix": "GetProjectionMode",
"description": "This function gets the projection mode of a camera.",
"body": ["number GetProjectionMode()"]
},
"Camera:GetRange": {
"prefix": "Camera:GetRange",
"description": "This function gets a camera's near and far ranges.",
"body": ["Vec2 GetRange()"]
},
"GetRange": {
"prefix": "GetRange",
"description": "This function gets a camera's near and far ranges.",
"body": ["Vec2 GetRange()"]
},
"Camera:GetRenderTarget": {
"prefix": "Camera:GetRenderTarget",
"description": "This functions returns the camera's render target. A render target texture can be used in a material and applied to an object, or drawn onscreen. You can use this feature for making CCTV systems, rear-view mirrors, or other visual effects.",
"body": ["Texture GetRenderTarget()"]
},
"GetRenderTarget": {
"prefix": "GetRenderTarget",
"description": "This functions returns the camera's render target. A render target texture can be used in a material and applied to an object, or drawn onscreen. You can use this feature for making CCTV systems, rear-view mirrors, or other visual effects.",
"body": ["Texture GetRenderTarget()"]
},
"Camera:GetZoom": {
"prefix": "Camera:GetZoom",
"description": "This function gets a camera's zoom. The default camera zoom is 1.0.",
"body": ["number GetZoom()"]
},
"GetZoom": {
"prefix": "GetZoom",
"description": "This function gets a camera's zoom. The default camera zoom is 1.0.",
"body": ["number GetZoom()"]
},
"Camera:Pick": {
"prefix": "Camera:Pick",
"description": "This function performs a pick from camera screen coordinates. The current buffer or context will be used for picking operations.",
"body": ["bool Pick($number_x, $number_y, $PickInfo_pick, $number_radius=0.0, $bool_closest=false, $number_collisiontype=0)"]
},
"Pick": {
"prefix": "Pick",
"description": "This function performs a pick from camera screen coordinates. The current buffer or context will be used for picking operations.",
"body": ["bool Pick($number_x, $number_y, $PickInfo_pick, $number_radius=0.0, $bool_closest=false, $number_collisiontype=0)"]
},
"Camera:Project": {
"prefix": "Camera:Project",
"description": "This function transforms a position in global space onto a position in screen space.",
"body": ["Vec3 Project($Vec3_position)"]
},
"Project": {
"prefix": "Project",
"description": "This function transforms a position in global space onto a position in screen space.",
"body": ["Vec3 Project($Vec3_position)"]
},
"Camera:SetClearColor": {
"prefix": "Camera:SetClearColor",
"description": "This function sets the clear color of a camera. The clear color is the background color a camera draws when rendered.",
"body": ["SetClearColor($number_r, $number_g, $number_b, $number_a=1.0)"]
},
"SetClearColor": {
"prefix": "SetClearColor",
"description": "This function sets the clear color of a camera. The clear color is the background color a camera draws when rendered.",
"body": ["SetClearColor($number_r, $number_g, $number_b, $number_a=1.0)"]
},
"Camera:SetFogAngle": {
"prefix": "Camera:SetFogAngle",
"description": "This function gets the camera fog angle. This controls the angles in the sky at which the fog fades out.",
"body": ["SetFogAngle($number_start, $number_stop)"]
},
"SetFogAngle": {
"prefix": "SetFogAngle",
"description": "This function gets the camera fog angle. This controls the angles in the sky at which the fog fades out.",
"body": ["SetFogAngle($number_start, $number_stop)"]
},
"Camera:SetFogColor": {
"prefix": "Camera:SetFogColor",
"description": "This function sets the fog color. Fog must be enabled before it will appear.",
"body": ["SetFogColor($number_r, $number_g, $number_b, $number_a)"]
},
"SetFogColor": {
"prefix": "SetFogColor",
"description": "This function sets the fog color. Fog must be enabled before it will appear.",
"body": ["SetFogColor($number_r, $number_g, $number_b, $number_a)"]
},
"Camera:SetFogMode": {
"prefix": "Camera:SetFogMode",
"description": "This function is used to enable fog.",
"body": ["SetFogMode($boolean_mode)"]
},
"SetFogMode": {
"prefix": "SetFogMode",
"description": "This function is used to enable fog.",
"body": ["SetFogMode($boolean_mode)"]
},
"Camera:SetFogRange": {
"prefix": "Camera:SetFogRange",
"description": "This function sets the fog range. Fog must be enabled before it will appear.",
"body": ["SetFogRange($number_start, $number_stop)"]
},
"SetFogRange": {
"prefix": "SetFogRange",
"description": "This function sets the fog range. Fog must be enabled before it will appear.",
"body": ["SetFogRange($number_start, $number_stop)"]
},
"Camera:SetFOV": {
"prefix": "Camera:SetFOV",
"description": "This function sets a camera's field of view (FOV). The field of view is an angle that controls how broad the visible region is on the vertical axis.        The default camera FOV is 90.0.",
"body": ["SetFOV($number_fov)"]
},
"SetFOV": {
"prefix": "SetFOV",
"description": "This function sets a camera's field of view (FOV). The field of view is an angle that controls how broad the visible region is on the vertical axis.        The default camera FOV is 90.0.",
"body": ["SetFOV($number_fov)"]
},
"Camera:SetMultisampleMode": {
"prefix": "Camera:SetMultisampleMode",
"description": "This function sets the antialias level of a camera. Note that higher MSAA levels will result in lower performance.",
"body": ["SetMultisampleMode($number_samples)"]
},
"SetMultisampleMode": {
"prefix": "SetMultisampleMode",
"description": "This function sets the antialias level of a camera. Note that higher MSAA levels will result in lower performance.",
"body": ["SetMultisampleMode($number_samples)"]
},
"Camera:SetProjectionMode": {
"prefix": "Camera:SetProjectionMode",
"description": "This function sets the projection mode of a camera.",
"body": ["SetProjectionMode($number_projectionmode)"]
},
"SetProjectionMode": {
"prefix": "SetProjectionMode",
"description": "This function sets the projection mode of a camera.",
"body": ["SetProjectionMode($number_projectionmode)"]
},
"Camera:SetRange": {
"prefix": "Camera:SetRange",
"description": "This function sets a camera's near and far ranges.",
"body": ["SetRange($number_nearrange, $number_farrange)"]
},
"SetRange  ": {
"prefix": "SetRange  ",
"description": "This function sets a camera's near and far ranges.",
"body": ["SetRange($number_nearrange, $number_farrange)"]
},
"Camera:SetRenderTarget": {
"prefix": "Camera:SetRenderTarget",
"description": "This functions sets a camera to render directly to a texture. The texture can be used in a material and applied to an object, or drawn onscreen. You can use this feature for making CCTV systems, rear-view mirrors, or other visual effects.",
"body": ["SetRenderTarget($Texture_target)"]
},
"SetRenderTarget": {
"prefix": "SetRenderTarget",
"description": "This functions sets a camera to render directly to a texture. The texture can be used in a material and applied to an object, or drawn onscreen. You can use this feature for making CCTV systems, rear-view mirrors, or other visual effects.",
"body": ["SetRenderTarget($Texture_target)"]
},
"Camera:SetSkybox": {
"prefix": "Camera:SetSkybox",
"description": "This function can be used to set add a skybox to a camera. The sky will be drawn everywhere and appear behind all rendered objects.",
"body": ["SetSkybox($Asset_asset)"]
},
"SetSkybox": {
"prefix": "SetSkybox",
"description": "This function can be used to set add a skybox to a camera. The sky will be drawn everywhere and appear behind all rendered objects.",
"body": ["SetSkybox($Asset_asset)"]
},
"Camera:SetSkybox ": {
"prefix": "Camera:SetSkybox ",
"description": "This function can be used to set add a skybox to a camera. The sky will be drawn everywhere and appear behind all rendered objects.",
"body": ["bool SetSkybox($string_path)"]
},
"SetSkybox ": {
"prefix": "SetSkybox ",
"description": "This function can be used to set add a skybox to a camera. The sky will be drawn everywhere and appear behind all rendered objects.",
"body": ["bool SetSkybox($string_path)"]
},
"Camera:SetZoom": {
"prefix": "Camera:SetZoom",
"description": "This function sets a camera's zoom. The default camera zoom is 1.0.",
"body": ["SetZoom($number_zoom)"]
},
"SetZoom": {
"prefix": "SetZoom",
"description": "This function sets a camera's zoom. The default camera zoom is 1.0.",
"body": ["SetZoom($number_zoom)"]
},
"Camera:SetZoom ": {
"prefix": "Camera:SetZoom ",
"description": "This function sets a camera's zoom. The default camera zoom is 1.0.",
"body": ["bool SetSkybox($string_path)"]
},
"SetZoom ": {
"prefix": "SetZoom ",
"description": "This function sets a camera's zoom. The default camera zoom is 1.0.",
"body": ["bool SetSkybox($string_path)"]
},
"Camera:UnProject": {
"prefix": "Camera:UnProject",
"description": "This function transforms a position in screen space onto a position in global space.",
"body": ["Vec3 UnProject($Vec3_position)"]
},
"UnProject": {
"prefix": "UnProject",
"description": "This function transforms a position in screen space onto a position in global space.",
"body": ["Vec3 UnProject($Vec3_position)"]
},
"Decal:Create": {
"prefix": "Decal:Create",
"description": "This function creates a new decal with the specified material applied.",
"body": ["Decal Create($Material_material, $Entity*_parent=NULL)"]
},
"Create          ": {
"prefix": "Create          ",
"description": "This function creates a new decal with the specified material applied.",
"body": ["Decal Create($Material_material, $Entity*_parent=NULL)"]
},
"Decal:GetRenderMode": {
"prefix": "Decal:GetRenderMode",
"description": "This function returns the decal render mode for the specified type of object. The decal render mode can be used to selectively filter which types of objects a decal is projected onto. For example, a large decorative decal should appear on brush geometry but not on models.",
"body": ["bool GetRenderMode($number_classid)"]
},
"GetRenderMode": {
"prefix": "GetRenderMode",
"description": "This function returns the decal render mode for the specified type of object. The decal render mode can be used to selectively filter which types of objects a decal is projected onto. For example, a large decorative decal should appear on brush geometry but not on models.",
"body": ["bool GetRenderMode($number_classid)"]
},
"Decal:SetRenderMode": {
"prefix": "Decal:SetRenderMode",
"description": "This function can be used to selectively filter which types of objects a decal is projected onto. For example, a large decorative decal should appear on brush geometry but not on models.",
"body": ["SetRenderMode($number_classid, $number_mode)"]
},
"SetRenderMode": {
"prefix": "SetRenderMode",
"description": "This function can be used to selectively filter which types of objects a decal is projected onto. For example, a large decorative decal should appear on brush geometry but not on models.",
"body": ["SetRenderMode($number_classid, $number_mode)"]
},
"Emitter:AddAlphaControlPoint": {
"prefix": "Emitter:AddAlphaControlPoint",
"description": "This function sets an Alpha control point that controls a particle's alpha transparency over the course of its life.",
"body": ["AddAlphaControlPoint($number_time, $number_alpha)"]
},
"AddAlphaControlPoint": {
"prefix": "AddAlphaControlPoint",
"description": "This function sets an Alpha control point that controls a particle's alpha transparency over the course of its life.",
"body": ["AddAlphaControlPoint($number_time, $number_alpha)"]
},
"Emitter:AddScaleControlPoint": {
"prefix": "Emitter:AddScaleControlPoint",
"description": "This function sets a scale control point that controls a particle's scale over the course of its life.",
"body": ["AddScaleControlPoint($number_time, $number_scale)"]
},
"AddScaleControlPoint": {
"prefix": "AddScaleControlPoint",
"description": "This function sets a scale control point that controls a particle's scale over the course of its life.",
"body": ["AddScaleControlPoint($number_time, $number_scale)"]
},
"Emitter:ClearAlphaControlPoints": {
"prefix": "Emitter:ClearAlphaControlPoints",
"description": "This function removes all alpha control points.",
"body": ["ClearAlphaControlPoints()"]
},
"ClearAlphaControlPoints": {
"prefix": "ClearAlphaControlPoints",
"description": "This function removes all alpha control points.",
"body": ["ClearAlphaControlPoints()"]
},
"Emitter:ClearScaleControlPoints": {
"prefix": "Emitter:ClearScaleControlPoints",
"description": "This function removes all scale control points.",
"body": ["ClearScaleControlPoints()"]
},
"ClearScaleControlPoints": {
"prefix": "ClearScaleControlPoints",
"description": "This function removes all scale control points.",
"body": ["ClearScaleControlPoints()"]
},
"Emitter:CountAlphaControlPoints": {
"prefix": "Emitter:CountAlphaControlPoints",
"description": "This function returns the number of alpha control points that are currently set.",
"body": ["CountAlphaControlPoints()"]
},
"CountAlphaControlPoints": {
"prefix": "CountAlphaControlPoints",
"description": "This function returns the number of alpha control points that are currently set.",
"body": ["CountAlphaControlPoints()"]
},
"Emitter:CountAlphaControlPoints ": {
"prefix": "Emitter:CountAlphaControlPoints ",
"description": "This function returns the number of scale control points set.",
"body": ["CountScaleControlPoints()"]
},
"CountAlphaControlPoints ": {
"prefix": "CountAlphaControlPoints ",
"description": "This function returns the number of scale control points set.",
"body": ["CountScaleControlPoints()"]
},
"Emitter:Create": {
"prefix": "Emitter:Create",
"description": "This function creates a new emitter.",
"body": ["Emitter Create($number_particlecount=10, $Entity_parent=NULL)"]
},
"Create           ": {
"prefix": "Create           ",
"description": "This function creates a new emitter.",
"body": ["Emitter Create($number_particlecount=10, $Entity_parent=NULL)"]
},
"Emitter:GetAcceleration": {
"prefix": "Emitter:GetAcceleration",
"description": "This function returns the acceleration value of released particles.",
"body": ["Vec3 GetAcceleration()"]
},
"GetAcceleration": {
"prefix": "GetAcceleration",
"description": "This function returns the acceleration value of released particles.",
"body": ["Vec3 GetAcceleration()"]
},
"Emitter:GetAlphaAtTime": {
"prefix": "Emitter:GetAlphaAtTime",
"description": "This function returns an alpha value at specified time.",
"body": ["number GetAlphaAtTime($number_time)"]
},
"GetAlphaAtTime": {
"prefix": "GetAlphaAtTime",
"description": "This function returns an alpha value at specified time.",
"body": ["number GetAlphaAtTime($number_time)"]
},
"Emitter:GetAnimationColumns": {
"prefix": "Emitter:GetAnimationColumns",
"description": "This function returns the number of animation columns set.",
"body": ["number GetAnimationColumns()"]
},
"GetAnimationColumns": {
"prefix": "GetAnimationColumns",
"description": "This function returns the number of animation columns set.",
"body": ["number GetAnimationColumns()"]
},
"Emitter:GetAnimationCycles": {
"prefix": "Emitter:GetAnimationCycles",
"description": "This function returns the number of times a particle's animation will loop.",
"body": ["number GetAnimationCycles()"]
},
"GetAnimationCycles": {
"prefix": "GetAnimationCycles",
"description": "This function returns the number of times a particle's animation will loop.",
"body": ["number GetAnimationCycles()"]
},
"Emitter:GetAnimationRows": {
"prefix": "Emitter:GetAnimationRows",
"description": "This function returns the number of animation rows that are currently set.",
"body": ["number GetAnimationRows()"]
},
"GetAnimationRows": {
"prefix": "GetAnimationRows",
"description": "This function returns the number of animation rows that are currently set.",
"body": ["number GetAnimationRows()"]
},
"Emitter:GetDuration": {
"prefix": "Emitter:GetDuration",
"description": "This function returns the length of time, in milliseconds, that a particle will exist for.",
"body": ["number GetDuration()"]
},
"GetDuration": {
"prefix": "GetDuration",
"description": "This function returns the length of time, in milliseconds, that a particle will exist for.",
"body": ["number GetDuration()"]
},
"Emitter:GetEmissionShape": {
"prefix": "Emitter:GetEmissionShape",
"description": "This function returns the emitter's emission shape",
"body": ["number GetEmissionShape()"]
},
"GetEmissionShape": {
"prefix": "GetEmissionShape",
"description": "This function returns the emitter's emission shape",
"body": ["number GetEmissionShape()"]
},
"Emitter:GetEmissionVolume": {
"prefix": "Emitter:GetEmissionVolume",
"description": "This function returns the emitter's emission volume, the area in which a particle may spawn.",
"body": ["Vec3 GetEmissionVolume()"]
},
"GetEmissionVolume": {
"prefix": "GetEmissionVolume",
"description": "This function returns the emitter's emission volume, the area in which a particle may spawn.",
"body": ["Vec3 GetEmissionVolume()"]
},
"Emitter:GetFacingDirection": {
"prefix": "Emitter:GetFacingDirection",
"description": "This function returns the facing direction that is manually set using SetFacingDirection.",
"body": ["Vec3 GetFacingDirection()"]
},
"GetFacingDirection": {
"prefix": "GetFacingDirection",
"description": "This function returns the facing direction that is manually set using SetFacingDirection.",
"body": ["Vec3 GetFacingDirection()"]
},
"Emitter:GetInterval": {
"prefix": "Emitter:GetInterval",
"description": "This function returns the current time interval, in milliseconds, between particle releases.",
"body": ["number GetInterval()"]
},
"GetInterval": {
"prefix": "GetInterval",
"description": "This function returns the current time interval, in milliseconds, between particle releases.",
"body": ["number GetInterval()"]
},
"Emitter:GetLoopMode": {
"prefix": "Emitter:GetLoopMode",
"description": "This function returns whether or not the emitter will loop.",
"body": ["bool GetLoopMode()"]
},
"GetLoopMode": {
"prefix": "GetLoopMode",
"description": "This function returns whether or not the emitter will loop.",
"body": ["bool GetLoopMode()"]
},
"Emitter:GetMaxScale": {
"prefix": "Emitter:GetMaxScale",
"description": "This function returns the max scaling factor for particles. The original particle size is multiplied by the scaling factor to get the final size.",
"body": ["number GetMaxScale()"]
},
"GetMaxScale": {
"prefix": "GetMaxScale",
"description": "This function returns the max scaling factor for particles. The original particle size is multiplied by the scaling factor to get the final size.",
"body": ["number GetMaxScale()"]
},
"Emitter:GetParticleColor": {
"prefix": "Emitter:GetParticleColor",
"description": "This function gets the particle's initial or final color.",
"body": ["Vec4 GetParticleColor($number_mode)"]
},
"GetParticleColor": {
"prefix": "GetParticleColor",
"description": "This function gets the particle's initial or final color.",
"body": ["Vec4 GetParticleColor($number_mode)"]
},
"Emitter:GetParticleCount": {
"prefix": "Emitter:GetParticleCount",
"description": "This function returns the number of particles that will be released during one duration.",
"body": ["number GetParticleCount()"]
},
"GetParticleCount": {
"prefix": "GetParticleCount",
"description": "This function returns the number of particles that will be released during one duration.",
"body": ["number GetParticleCount()"]
},
"Emitter:GetPaused": {
"prefix": "Emitter:GetPaused",
"description": "This function returns whether or not the emitter is paused or playing.",
"body": ["bool GetPaused()"]
},
"GetPaused": {
"prefix": "GetPaused",
"description": "This function returns whether or not the emitter is paused or playing.",
"body": ["bool GetPaused()"]
},
"Emitter:GetReleaseQuantity": {
"prefix": "Emitter:GetReleaseQuantity",
"description": "This function returns whether or not the emitter is paused or playing.",
"body": ["number GetReleaseQuantity()"]
},
"GetReleaseQuantity": {
"prefix": "GetReleaseQuantity",
"description": "This function returns whether or not the emitter is paused or playing.",
"body": ["number GetReleaseQuantity()"]
},
"Emitter:GetRotationByVelocityMode": {
"prefix": "Emitter:GetRotationByVelocityMode",
"description": "This function returns if the rotation mode is rotation by velocity.",
"body": ["bool GetRotationByVelocityMode()"]
},
"GetRotationByVelocityMode": {
"prefix": "GetRotationByVelocityMode",
"description": "This function returns if the rotation mode is rotation by velocity.",
"body": ["bool GetRotationByVelocityMode()"]
},
"Emitter:GetRotationSpeed": {
"prefix": "Emitter:GetRotationSpeed",
"description": "This function gets the rotation speed in degrees per second of released particles.",
"body": ["number GetRotationSpeed()"]
},
"GetRotationSpeed": {
"prefix": "GetRotationSpeed",
"description": "This function gets the rotation speed in degrees per second of released particles.",
"body": ["number GetRotationSpeed()"]
},
"Emitter:GetScaleAtTime": {
"prefix": "Emitter:GetScaleAtTime",
"description": "This function returns a scale value for a given time.",
"body": ["number GetScaleAtTime($number_time)"]
},
"GetScaleAtTime": {
"prefix": "GetScaleAtTime",
"description": "This function returns a scale value for a given time.",
"body": ["number GetScaleAtTime($number_time)"]
},
"Emitter:GetVelocity": {
"prefix": "Emitter:GetVelocity",
"description": "This function returns the initial velocity or the random velocity of released particles.",
"body": ["Vec3 GetVelocity($number_index=0)"]
},
"GetVelocity": {
"prefix": "GetVelocity",
"description": "This function returns the initial velocity or the random velocity of released particles.",
"body": ["Vec3 GetVelocity($number_index=0)"]
},
"Emitter:GetViewMode": {
"prefix": "Emitter:GetViewMode",
"description": "This function returns which view mode is currently set.",
"body": ["number GetViewMode()"]
},
"GetViewMode": {
"prefix": "GetViewMode",
"description": "This function returns which view mode is currently set.",
"body": ["number GetViewMode()"]
},
"Emitter:Pause": {
"prefix": "Emitter:Pause",
"description": "This function pauses an emitter, causing it to no longer release particles.",
"body": ["Pause()"]
},
"Pause": {
"prefix": "Pause",
"description": "This function pauses an emitter, causing it to no longer release particles.",
"body": ["Pause()"]
},
"Emitter:Play": {
"prefix": "Emitter:Play",
"description": "This function causes a paused emitter to resume playing.",
"body": ["Play()"]
},
"Play": {
"prefix": "Play",
"description": "This function causes a paused emitter to resume playing.",
"body": ["Play()"]
},
"Emitter:Reset": {
"prefix": "Emitter:Reset",
"description": "This function resets a particle emitter back to its starting values.",
"body": ["Reset()"]
},
"Reset": {
"prefix": "Reset",
"description": "This function resets a particle emitter back to its starting values.",
"body": ["Reset()"]
},
"Emitter:SetAcceleration": {
"prefix": "Emitter:SetAcceleration",
"description": "This function sets an acceleration value for released particles.",
"body": ["SetAcceleration($number_x, $number_y, $number_z)"]
},
"SetAcceleration": {
"prefix": "SetAcceleration",
"description": "This function sets an acceleration value for released particles.",
"body": ["SetAcceleration($number_x, $number_y, $number_z)"]
},
"Emitter:SetAnimationColumns": {
"prefix": "Emitter:SetAnimationColumns",
"description": "This function specifies the number of columns in an animated particle sheet.",
"body": ["SetAnimationColumns($number_columns)"]
},
"SetAnimationColumns": {
"prefix": "SetAnimationColumns",
"description": "This function specifies the number of columns in an animated particle sheet.",
"body": ["SetAnimationColumns($number_columns)"]
},
"Emitter:SetAnimationCycles": {
"prefix": "Emitter:SetAnimationCycles",
"description": "This function sets the number of times an animated particle's animation will play during one lifetime.",
"body": ["SetAnimationCycles($number_cycles)"]
},
"SetAnimationCycles": {
"prefix": "SetAnimationCycles",
"description": "This function sets the number of times an animated particle's animation will play during one lifetime.",
"body": ["SetAnimationCycles($number_cycles)"]
},
"Emitter:SetAnimationRows": {
"prefix": "Emitter:SetAnimationRows",
"description": "This function specifies the number of rows in an animated particle sheet.",
"body": ["SetAnimationRows($number_rows)"]
},
"SetAnimationRows": {
"prefix": "SetAnimationRows",
"description": "This function specifies the number of rows in an animated particle sheet.",
"body": ["SetAnimationRows($number_rows)"]
},
"Emitter:SetDuration": {
"prefix": "Emitter:SetDuration",
"description": "This function specifies how long, in milliseconds, a particle will exist.",
"body": ["SetDuration($number_Duration=3000)"]
},
"SetDuration": {
"prefix": "SetDuration",
"description": "This function specifies how long, in milliseconds, a particle will exist.",
"body": ["SetDuration($number_Duration=3000)"]
},
"Emitter:SetEmissionShape": {
"prefix": "Emitter:SetEmissionShape",
"description": "This function sets the shape in which a particle will spawn from.",
"body": ["SetEmissionShape($number_ShapeId=0)"]
},
"SetEmissionShape": {
"prefix": "SetEmissionShape",
"description": "This function sets the shape in which a particle will spawn from.",
"body": ["SetEmissionShape($number_ShapeId=0)"]
},
"Emitter:SetEmissionVolume": {
"prefix": "Emitter:SetEmissionVolume",
"description": "This function specifies the area in which a particle will spawn.",
"body": ["SetEmissionVolume($number_x, $number_y, $number_z)"]
},
"SetEmissionVolume": {
"prefix": "SetEmissionVolume",
"description": "This function specifies the area in which a particle will spawn.",
"body": ["SetEmissionVolume($number_x, $number_y, $number_z)"]
},
"Emitter:SetFacingDirection": {
"prefix": "Emitter:SetFacingDirection",
"description": "This function manually sets a direction that all particles will face.",
"body": ["SetFacingDirection($number_x, $number_y, $number_z)"]
},
"SetFacingDirection": {
"prefix": "SetFacingDirection",
"description": "This function manually sets a direction that all particles will face.",
"body": ["SetFacingDirection($number_x, $number_y, $number_z)"]
},
"Emitter:SetInterval": {
"prefix": "Emitter:SetInterval",
"description": "This function sets the time interval, in milliseconds, in which particles will be released.",
"body": ["SetInterval($number_interval)"]
},
"SetInterval": {
"prefix": "SetInterval",
"description": "This function sets the time interval, in milliseconds, in which particles will be released.",
"body": ["SetInterval($number_interval)"]
},
"Emitter:SetLoopMode": {
"prefix": "Emitter:SetLoopMode",
"description": "This function determines if the particle system will play once or loop.",
"body": ["SetLoopMode($bool_Loop)"]
},
"SetLoopMode": {
"prefix": "SetLoopMode",
"description": "This function determines if the particle system will play once or loop.",
"body": ["SetLoopMode($bool_Loop)"]
},
"Emitter:SetMaxScale": {
"prefix": "Emitter:SetMaxScale",
"description": "This function specifies a max size for scaling particles.",
"body": ["SetMaxScale($number_maxscale)"]
},
"SetMaxScale": {
"prefix": "SetMaxScale",
"description": "This function specifies a max size for scaling particles.",
"body": ["SetMaxScale($number_maxscale)"]
},
"Emitter:SetParticleColor": {
"prefix": "Emitter:SetParticleColor",
"description": "This function determines a particle's starting or ending color.",
"body": ["SetParticleColor($number_r, $number_g, $number_b, $number_a, $number_mode)"]
},
"SetParticleColor": {
"prefix": "SetParticleColor",
"description": "This function determines a particle's starting or ending color.",
"body": ["SetParticleColor($number_r, $number_g, $number_b, $number_a, $number_mode)"]
},
"Emitter:SetParticleCount": {
"prefix": "Emitter:SetParticleCount",
"description": "This function specifies the total number of particles that will be released during one duration.",
"body": ["SetParticleCount($number_ParticleCount)"]
},
"SetParticleCount": {
"prefix": "SetParticleCount",
"description": "This function specifies the total number of particles that will be released during one duration.",
"body": ["SetParticleCount($number_ParticleCount)"]
},
"Emitter:SetReleaseQuantity": {
"prefix": "Emitter:SetReleaseQuantity",
"description": "This function specifies the number of particles released at each interval.",
"body": ["SetReleaseQuantity($number_quantity)"]
},
"SetReleaseQuantity": {
"prefix": "SetReleaseQuantity",
"description": "This function specifies the number of particles released at each interval.",
"body": ["SetReleaseQuantity($number_quantity)"]
},
"Emitter:SetRotationSpeed": {
"prefix": "Emitter:SetRotationSpeed",
"description": "This function sets the rotation speed in degrees per second of released particles.",
"body": ["SetRotationSpeed($float_speed=0.0f)"]
},
"SetRotationSpeed": {
"prefix": "SetRotationSpeed",
"description": "This function sets the rotation speed in degrees per second of released particles.",
"body": ["SetRotationSpeed($float_speed=0.0f)"]
},
"Emitter:SetVelocity": {
"prefix": "Emitter:SetVelocity",
"description": "This function sets the initial velocity or the random velocity of released particles.",
"body": ["SetVelocity($number_x, $number_y, $flost_z, $number_index=0, $bool_global=false)"]
},
"SetVelocity": {
"prefix": "SetVelocity",
"description": "This function sets the initial velocity or the random velocity of released particles.",
"body": ["SetVelocity($number_x, $number_y, $flost_z, $number_index=0, $bool_global=false)"]
},
"Emitter:SetViewMode": {
"prefix": "Emitter:SetViewMode",
"description": "This function specifies how a particle's facing direction is determined.",
"body": ["SetViewMode($number_viewmode=0)"]
},
"SetViewMode": {
"prefix": "SetViewMode",
"description": "This function specifies how a particle's facing direction is determined.",
"body": ["SetViewMode($number_viewmode=0)"]
},
"Listener:Create": {
"prefix": "Listener:Create",
"description": "This function creates and returns a new listener.",
"body": ["Listener Create($Entity_parent=NULL)"]
},
"Create            ": {
"prefix": "Create            ",
"description": "This function creates and returns a new listener.",
"body": ["Listener Create($Entity_parent=NULL)"]
},
"LensFlare:Create": {
"prefix": "LensFlare:Create",
"description": "This function returns creates and returns a new LensFlare.",
"body": ["LensFlare Create($Entity_parent_=_NULL)"]
},
"Create             ": {
"prefix": "Create             ",
"description": "This function returns creates and returns a new LensFlare.",
"body": ["LensFlare Create($Entity_parent_=_NULL)"]
},
"LensFlare:GetRadius": {
"prefix": "LensFlare:GetRadius",
"description": "This function returns the near and far radius of the specified LensFlare. The near and far radius correspond to the radio of the LensFlare at its near and far range distances from the camera.",
"body": ["Vec2 GetRadius()"]
},
"GetRadius": {
"prefix": "GetRadius",
"description": "This function returns the near and far radius of the specified LensFlare. The near and far radius correspond to the radio of the LensFlare at its near and far range distances from the camera.",
"body": ["Vec2 GetRadius()"]
},
"LensFlare:GetRange": {
"prefix": "LensFlare:GetRange",
"description": "This function returns the near and far range of the LensFlare. The LensFlare will fade from visibility when its distance from the camera exceeds the far range. The LensFlare will stop shrinking when its distance to the camera becomes less than the near range.",
"body": ["Vec2 GetRange()"]
},
"GetRange ": {
"prefix": "GetRange ",
"description": "This function returns the near and far range of the LensFlare. The LensFlare will fade from visibility when its distance from the camera exceeds the far range. The LensFlare will stop shrinking when its distance to the camera becomes less than the near range.",
"body": ["Vec2 GetRange()"]
},
"LensFlare:GetRotationSpeed": {
"prefix": "LensFlare:GetRotationSpeed",
"description": "This function returns the rotation speed of the lensflare. LensFlares slowly rotate based on the distance from the camera. This value is measured in degrees turned per meter distance from the camera.",
"body": ["number GetRotationSpeed()"]
},
"GetRotationSpeed ": {
"prefix": "GetRotationSpeed ",
"description": "This function returns the rotation speed of the lensflare. LensFlares slowly rotate based on the distance from the camera. This value is measured in degrees turned per meter distance from the camera.",
"body": ["number GetRotationSpeed()"]
},
"LensFlare:SetRadius": {
"prefix": "LensFlare:SetRadius",
"description": "This function sets the near and far radius of the specified LensFlare. The near and far radius correspond to the radio of the LensFlare at its near and far range distances from the camera.",
"body": ["SetRadius($number_near, $number_far)"]
},
"SetRadius": {
"prefix": "SetRadius",
"description": "This function sets the near and far radius of the specified LensFlare. The near and far radius correspond to the radio of the LensFlare at its near and far range distances from the camera.",
"body": ["SetRadius($number_near, $number_far)"]
},
"LensFlare:SetRange": {
"prefix": "LensFlare:SetRange",
"description": "This function sets the near and far range of the LensFlare. The LensFlare will fade from visibility when its distance from the camera exceeds the far range. The LensFlare will stop shrinking when its distance to the camera becomes less than the near range.",
"body": ["SetRange($number_nearrange, $number_farrange)"]
},
"SetRange   ": {
"prefix": "SetRange   ",
"description": "This function sets the near and far range of the LensFlare. The LensFlare will fade from visibility when its distance from the camera exceeds the far range. The LensFlare will stop shrinking when its distance to the camera becomes less than the near range.",
"body": ["SetRange($number_nearrange, $number_farrange)"]
},
"Sprite:GetAngle": {
"prefix": "Sprite:GetAngle",
"description": "This function gets the rotation of a sprite's visible billboard.",
"body": ["number GetAngle()"]
},
"GetAngle": {
"prefix": "GetAngle",
"description": "This function gets the rotation of a sprite's visible billboard.",
"body": ["number GetAngle()"]
},
"Sprite:GetSize": {
"prefix": "Sprite:GetSize",
"description": "This function gets the size of a sprite's visible billboard.",
"body": ["Vec2 GetSize()"]
},
"GetSize": {
"prefix": "GetSize",
"description": "This function gets the size of a sprite's visible billboard.",
"body": ["Vec2 GetSize()"]
},
"Sprite:GetViewMode": {
"prefix": "Sprite:GetViewMode",
"description": "This function returns the view mode of a sprite. The view mode indicates how the sprite reacts to camera movement.",
"body": ["number GetViewMode()"]
},
"GetViewMode ": {
"prefix": "GetViewMode ",
"description": "This function returns the view mode of a sprite. The view mode indicates how the sprite reacts to camera movement.",
"body": ["number GetViewMode()"]
},
"Sprite:SetAngle": {
"prefix": "Sprite:SetAngle",
"description": "This function sets the rotation of a sprite's visible billboard.",
"body": ["SetAngle($number_angle)"]
},
"SetAngle": {
"prefix": "SetAngle",
"description": "This function sets the rotation of a sprite's visible billboard.",
"body": ["SetAngle($number_angle)"]
},
"Sprite:SetSize": {
"prefix": "Sprite:SetSize",
"description": "This function sets the size of a sprite's visible billboard.",
"body": ["SetSize($number_width, $number_height)"]
},
"SetSize": {
"prefix": "SetSize",
"description": "This function sets the size of a sprite's visible billboard.",
"body": ["SetSize($number_width, $number_height)"]
},
"Sprite:SetViewMode": {
"prefix": "Sprite:SetViewMode",
"description": "This function sets the view mode of a sprite. The view mode controls how the sprite reacts to camera movement.",
"body": ["SetViewMode($number_viewmode)"]
},
"SetViewMode ": {
"prefix": "SetViewMode ",
"description": "This function sets the view mode of a sprite. The view mode controls how the sprite reacts to camera movement.",
"body": ["SetViewMode($number_viewmode)"]
},
"Model:AddSurface": {
"prefix": "Model:AddSurface",
"description": "This function adds and returns a new surface on a model.",
"body": ["Surface AddSurface()"]
},
"AddSurface": {
"prefix": "AddSurface",
"description": "This function adds and returns a new surface on a model.",
"body": ["Surface AddSurface()"]
},
"Model:Box": {
"prefix": "Model:Box",
"description": "This function will create a new box model using the specified parameters.",
"body": ["Model Box($Entity_parent_=_NULL)"]
},
"Box ": {
"prefix": "Box ",
"description": "This function will create a new box model using the specified parameters.",
"body": ["Model Box($Entity_parent_=_NULL)"]
},
"Model:Box ": {
"prefix": "Model:Box ",
"description": "This function will create a new box model using the specified parameters.",
"body": ["Model Box($number_width, $Entity_parent_=_NULL)"]
},
"Box  ": {
"prefix": "Box  ",
"description": "This function will create a new box model using the specified parameters.",
"body": ["Model Box($number_width, $Entity_parent_=_NULL)"]
},
"Model:Box  ": {
"prefix": "Model:Box  ",
"description": "This function will create a new box model using the specified parameters.",
"body": ["Model Box($number_width, $number_height, $number_depth, $Entity_parent_=_NULL)"]
},
"Box   ": {
"prefix": "Box   ",
"description": "This function will create a new box model using the specified parameters.",
"body": ["Model Box($number_width, $number_height, $number_depth, $Entity_parent_=_NULL)"]
},
"Model:Cone": {
"prefix": "Model:Cone",
"description": "This function will create a new cone model using the specified parameters.",
"body": ["Model Cone($number_sides=16, $Entity_parent=NULL)"]
},
"Cone ": {
"prefix": "Cone ",
"description": "This function will create a new cone model using the specified parameters.",
"body": ["Model Cone($number_sides=16, $Entity_parent=NULL)"]
},
"Model:CountSurfaces": {
"prefix": "Model:CountSurfaces",
"description": "This function gets the number of surfaces a model has.",
"body": ["number CountSurfaces()"]
},
"CountSurfaces": {
"prefix": "CountSurfaces",
"description": "This function gets the number of surfaces a model has.",
"body": ["number CountSurfaces()"]
},
"Model:Create": {
"prefix": "Model:Create",
"description": "This function creates and returns a new model.",
"body": ["Model Create($Entity_parent_=_NULL)"]
},
"Create              ": {
"prefix": "Create              ",
"description": "This function creates and returns a new model.",
"body": ["Model Create($Entity_parent_=_NULL)"]
},
"Model:Cylinder": {
"prefix": "Model:Cylinder",
"description": "This function will create a new cylinder model using the specified parameters.",
"body": ["Model Cylinder($number_sides=16, $Entity_parent=NULL)"]
},
"Cylinder ": {
"prefix": "Cylinder ",
"description": "This function will create a new cylinder model using the specified parameters.",
"body": ["Model Cylinder($number_sides=16, $Entity_parent=NULL)"]
},
"Model:FindSurface": {
"prefix": "Model:FindSurface",
"description": "This function will search for and return a surface with the specified material.",
"body": ["Surface FindSurface($Material_material)"]
},
"FindSurface": {
"prefix": "FindSurface",
"description": "This function will search for and return a surface with the specified material.",
"body": ["Surface FindSurface($Material_material)"]
},
"Model:GetSurface": {
"prefix": "Model:GetSurface",
"description": "This function gets a model surface.",
"body": ["Surface GetSurface($number_index)"]
},
"GetSurface": {
"prefix": "GetSurface",
"description": "This function gets a model surface.",
"body": ["Surface GetSurface($number_index)"]
},
"Model:Load": {
"prefix": "Model:Load",
"description": "This function loads a model from a Leadwerks model (*.mdl) file.",
"body": ["Model Load($string_path, $number_flags=0)"]
},
"Load    ": {
"prefix": "Load    ",
"description": "This function loads a model from a Leadwerks model (*.mdl) file.",
"body": ["Model Load($string_path, $number_flags=0)"]
},
"Model:Sphere": {
"prefix": "Model:Sphere",
"description": "This function will create a new sphere model using the specified parameters.",
"body": ["Model Sphere($number_sides=16, $Entity_parent=NULL)"]
},
"Sphere ": {
"prefix": "Sphere ",
"description": "This function will create a new sphere model using the specified parameters.",
"body": ["Model Sphere($number_sides=16, $Entity_parent=NULL)"]
},
"Pivot:Create": {
"prefix": "Pivot:Create",
"description": "This function creates and returns a new pivot.",
"body": ["Pivot Create($Entity_parent=NULL)"]
},
"Create               ": {
"prefix": "Create               ",
"description": "This function creates and returns a new pivot.",
"body": ["Pivot Create($Entity_parent=NULL)"]
},
"Entity:AddForce": {
"prefix": "Entity:AddForce",
"description": "This function applies a force to an entity.",
"body": ["AddForce($number_x, $number_y, $number_z, $bool_global_=_true)"]
},
"AddForce": {
"prefix": "AddForce",
"description": "This function applies a force to an entity.",
"body": ["AddForce($number_x, $number_y, $number_z, $bool_global_=_true)"]
},
"Entity:AddForce ": {
"prefix": "Entity:AddForce ",
"description": "This function applies a force to an entity.",
"body": ["AddForce($Vec3_force, $bool_global_=_true)"]
},
"AddForce ": {
"prefix": "AddForce ",
"description": "This function applies a force to an entity.",
"body": ["AddForce($Vec3_force, $bool_global_=_true)"]
},
"Entity:AddPointForce": {
"prefix": "Entity:AddPointForce",
"description": "This function adds a force at a specific position on an entity, transforming the force into both a force and torque value. This can be used to simulate realistic impacts like bullets hitting an object.",
"body": ["AddPointForce($number_fx, $number_fy, $number_fz, $number_px, $number_py, $number_pz, $bool_global=true)"]
},
"AddPointForce": {
"prefix": "AddPointForce",
"description": "This function adds a force at a specific position on an entity, transforming the force into both a force and torque value. This can be used to simulate realistic impacts like bullets hitting an object.",
"body": ["AddPointForce($number_fx, $number_fy, $number_fz, $number_px, $number_py, $number_pz, $bool_global=true)"]
},
"Entity:AddPointForce ": {
"prefix": "Entity:AddPointForce ",
"description": "This function adds a force at a specific position on an entity, transforming the force into both a force and torque value. This can be used to simulate realistic impacts like bullets hitting an object.",
"body": ["AddPointForce($Vec3_force, $Vec3_position, $bool_global=true)"]
},
"AddPointForce ": {
"prefix": "AddPointForce ",
"description": "This function adds a force at a specific position on an entity, transforming the force into both a force and torque value. This can be used to simulate realistic impacts like bullets hitting an object.",
"body": ["AddPointForce($Vec3_force, $Vec3_position, $bool_global=true)"]
},
"Entity:AddTorque": {
"prefix": "Entity:AddTorque",
"description": "This function adds torque (angular force) to an entity.",
"body": ["AddTorque($number_x, $number_y, $number_z, $bool_global_=_true)"]
},
"AddTorque": {
"prefix": "AddTorque",
"description": "This function adds torque (angular force) to an entity.",
"body": ["AddTorque($number_x, $number_y, $number_z, $bool_global_=_true)"]
},
"Entity:AddTorque ": {
"prefix": "Entity:AddTorque ",
"description": "This function adds torque (angular force) to an entity.",
"body": ["AddTorque($Vec3_torque, $bool_global_=_true)"]
},
"AddTorque ": {
"prefix": "AddTorque ",
"description": "This function adds torque (angular force) to an entity.",
"body": ["AddTorque($Vec3_torque, $bool_global_=_true)"]
},
"Entity:AlignToVector": {
"prefix": "Entity:AlignToVector",
"description": "This function can be used to orient an entity's axis to match a user-defined axis in world space.",
"body": ["AlignToVector($number_x, $number_y, $number_z, $number_axis=2, $number_rate_=_1.0, $number_roll_=_0.0)"]
},
"AlignToVector": {
"prefix": "AlignToVector",
"description": "This function can be used to orient an entity's axis to match a user-defined axis in world space.",
"body": ["AlignToVector($number_x, $number_y, $number_z, $number_axis=2, $number_rate_=_1.0, $number_roll_=_0.0)"]
},
"Entity:AlignToVector ": {
"prefix": "Entity:AlignToVector ",
"description": "This function can be used to orient an entity's axis to match a user-defined axis in world space.",
"body": ["void AlignToVector($Vec3_v, $number_axis=2, $number_rate_=_1.0, $number_roll_=_0.0)"]
},
"AlignToVector ": {
"prefix": "AlignToVector ",
"description": "This function can be used to orient an entity's axis to match a user-defined axis in world space.",
"body": ["void AlignToVector($Vec3_v, $number_axis=2, $number_rate_=_1.0, $number_roll_=_0.0)"]
},
"Entity:Copy": {
"prefix": "Entity:Copy",
"description": "This function creates and returns a unique duplicate of the specified entity.",
"body": ["Entity Copy($bool_recursive=true)"]
},
"Copy ": {
"prefix": "Copy ",
"description": "This function creates and returns a unique duplicate of the specified entity.",
"body": ["Entity Copy($bool_recursive=true)"]
},
"Entity:CountAnimations": {
"prefix": "Entity:CountAnimations",
"description": "This function gets the number of animation sequences an entity contains.",
"body": ["CountAnimations()"]
},
"CountAnimations": {
"prefix": "CountAnimations",
"description": "This function gets the number of animation sequences an entity contains.",
"body": ["CountAnimations()"]
},
"Entity:CountChildren": {
"prefix": "Entity:CountChildren",
"description": "This function gets the number of children an entity has in its immediate sub-hierarchy.",
"body": ["number CountChildren()"]
},
"CountChildren": {
"prefix": "CountChildren",
"description": "This function gets the number of children an entity has in its immediate sub-hierarchy.",
"body": ["number CountChildren()"]
},
"Entity:EmitSound": {
"prefix": "Entity:EmitSound",
"description": "This function plays a sound at an entity's position in 3D space. Spatialized sounds must be in mono format.",
"body": ["number EmitSound($Sound_sound, $number_range=50, $number_volume=1, $number_pitch=1, $bool_loopmode=false)"]
},
"EmitSound": {
"prefix": "EmitSound",
"description": "This function plays a sound at an entity's position in 3D space. Spatialized sounds must be in mono format.",
"body": ["number EmitSound($Sound_sound, $number_range=50, $number_volume=1, $number_pitch=1, $bool_loopmode=false)"]
},
"Entity:EmitSound ": {
"prefix": "Entity:EmitSound ",
"description": "This function plays a sound at an entity's position in 3D space. Spatialized sounds must be in mono format.",
"body": ["EmitSound($Source_source)"]
},
"EmitSound ": {
"prefix": "EmitSound ",
"description": "This function plays a sound at an entity's position in 3D space. Spatialized sounds must be in mono format.",
"body": ["EmitSound($Source_source)"]
},
"Entity:FindChild": {
"prefix": "Entity:FindChild",
"description": "This function performs a recursive search and returns the first child entity it finds with the specified name.",
"body": ["Entity FindChild($string_name)"]
},
"FindChild": {
"prefix": "FindChild",
"description": "This function performs a recursive search and returns the first child entity it finds with the specified name.",
"body": ["Entity FindChild($string_name)"]
},
"Entity:GetAABB": {
"prefix": "Entity:GetAABB",
"description": "This function returns an entity's axis-aligned bounding box (AABB).",
"body": ["AABB GetAABB($number_mode_=_GlobalAABB)"]
},
"GetAABB": {
"prefix": "GetAABB",
"description": "This function returns an entity's axis-aligned bounding box (AABB).",
"body": ["AABB GetAABB($number_mode_=_GlobalAABB)"]
},
"Entity:GetAnimationLength": {
"prefix": "Entity:GetAnimationLength",
"description": "This function gets the number of frames in an entity's animation sequence.",
"body": ["number GetAnimationLength($number_index)"]
},
"GetAnimationLength": {
"prefix": "GetAnimationLength",
"description": "This function gets the number of frames in an entity's animation sequence.",
"body": ["number GetAnimationLength($number_index)"]
},
"Entity:GetAnimationLength ": {
"prefix": "Entity:GetAnimationLength ",
"description": "This function gets the number of frames in an entity's animation sequence.",
"body": ["number GetAnimationLength($string_name)"]
},
"GetAnimationLength ": {
"prefix": "GetAnimationLength ",
"description": "This function gets the number of frames in an entity's animation sequence.",
"body": ["number GetAnimationLength($string_name)"]
},
"Entity:GetChild": {
"prefix": "Entity:GetChild",
"description": "This function gets the entity child at the specified index.",
"body": ["Entity GetChild($index)"]
},
"GetChild": {
"prefix": "GetChild",
"description": "This function gets the entity child at the specified index.",
"body": ["Entity GetChild($index)"]
},
"Entity:GetColor": {
"prefix": "Entity:GetColor",
"description": "This function gets an entity's color.",
"body": ["GetColor($mode=Color.Diffuse)"]
},
"GetColor  ": {
"prefix": "GetColor  ",
"description": "This function gets an entity's color.",
"body": ["GetColor($mode=Color.Diffuse)"]
},
"Entity:GetCulled": {
"prefix": "Entity:GetCulled",
"description": "This function indicates whether an entity has been culled from rendering or not.",
"body": ["bool GetCulled($camera=nil)"]
},
"GetCulled": {
"prefix": "GetCulled",
"description": "This function indicates whether an entity has been culled from rendering or not.",
"body": ["bool GetCulled($camera=nil)"]
},
"Entity:GetDistance": {
"prefix": "Entity:GetDistance",
"description": "This function returns the distance between two entities in global space.",
"body": ["number GetDistance($Entity_entity)"]
},
"GetDistance": {
"prefix": "GetDistance",
"description": "This function returns the distance between two entities in global space.",
"body": ["number GetDistance($Entity_entity)"]
},
"Entity:GetDistance ": {
"prefix": "Entity:GetDistance ",
"description": "This function returns the distance between two entities in global space.",
"body": ["number GetDistance($Vec3_position, $bool_useshape_=_false)"]
},
"GetDistance ": {
"prefix": "GetDistance ",
"description": "This function returns the distance between two entities in global space.",
"body": ["number GetDistance($Vec3_position, $bool_useshape_=_false)"]
},
"Entity:GetGravityMode": {
"prefix": "Entity:GetGravityMode",
"description": "This function gets the entity gravity mode.",
"body": ["bool GetGravityMode()"]
},
"GetGravityMode": {
"prefix": "GetGravityMode",
"description": "This function gets the entity gravity mode.",
"body": ["bool GetGravityMode()"]
},
"Entity:GetIntensity": {
"prefix": "Entity:GetIntensity",
"description": "This function gets the intensity of an entity's color. The intensity is a multiplier used to increase or decrease the brightness of an entity's color.",
"body": ["GetIntensity($mode=Color.Diffuse)"]
},
"GetIntensity": {
"prefix": "GetIntensity",
"description": "This function gets the intensity of an entity's color. The intensity is a multiplier used to increase or decrease the brightness of an entity's color.",
"body": ["GetIntensity($mode=Color.Diffuse)"]
},
"Entity:GetKeyValue": {
"prefix": "Entity:GetKeyValue",
"description": "This function gets an entity key value.  A key value is a string value associated with a key name.",
"body": ["std::string GetKeyValue($string_keyname, $string_defaultvalue='')"]
},
"GetKeyValue": {
"prefix": "GetKeyValue",
"description": "This function gets an entity key value.  A key value is a string value associated with a key name.",
"body": ["std::string GetKeyValue($string_keyname, $string_defaultvalue='')"]
},
"Entity:GetMass": {
"prefix": "Entity:GetMass",
"description": "This function gets the entity's mass.",
"body": ["number GetMass()"]
},
"GetMass": {
"prefix": "GetMass",
"description": "This function gets the entity's mass.",
"body": ["number GetMass()"]
},
"Entity:GetMaterial": {
"prefix": "Entity:GetMaterial",
"description": "This function gets an entity's material.",
"body": ["Material GetMaterial()"]
},
"GetMaterial": {
"prefix": "GetMaterial",
"description": "This function gets an entity's material.",
"body": ["Material GetMaterial()"]
},
"Entity:GetMatrix": {
"prefix": "Entity:GetMatrix",
"description": "This function gets an entity's 4x4 matrix.",
"body": ["Mat4 GetMatrix($bool_global_=_true)"]
},
"GetMatrix": {
"prefix": "GetMatrix",
"description": "This function gets an entity's 4x4 matrix.",
"body": ["Mat4 GetMatrix($bool_global_=_true)"]
},
"Entity:GetNavigationMode": {
"prefix": "Entity:GetNavigationMode",
"description": "This function gets an entity's pathfinding navigation mode.",
"body": ["bool GetNavigationMode()"]
},
"GetNavigationMode": {
"prefix": "GetNavigationMode",
"description": "This function gets an entity's pathfinding navigation mode.",
"body": ["bool GetNavigationMode()"]
},
"Entity:GetOcclusionCullingMode": {
"prefix": "Entity:GetOcclusionCullingMode",
"description": "This function gets an entity's occlusion testing mode.",
"body": ["bool GetOcclusionCullingMode()"]
},
"GetOcclusionCullingMode": {
"prefix": "GetOcclusionCullingMode",
"description": "This function gets an entity's occlusion testing mode.",
"body": ["bool GetOcclusionCullingMode()"]
},
"Entity:GetOmega": {
"prefix": "Entity:GetOmega",
"description": "This function gets entity's omega (angular velocity), in global or local space.",
"body": ["Vec3 GetOmega($bool_global_=_true)"]
},
"GetOmega": {
"prefix": "GetOmega",
"description": "This function gets entity's omega (angular velocity), in global or local space.",
"body": ["Vec3 GetOmega($bool_global_=_true)"]
},
"Entity:GetParent": {
"prefix": "Entity:GetParent",
"description": "This function gets an entity's parent entity.",
"body": ["Entity GetParent()"]
},
"GetParent": {
"prefix": "GetParent",
"description": "This function gets an entity's parent entity.",
"body": ["Entity GetParent()"]
},
"Entity:GetPhysicsMode": {
"prefix": "Entity:GetPhysicsMode",
"description": "This function gets the physics mode of an entity, which indicates how it reacts to physical forces and collisions.",
"body": ["number GetPhysicsMode()"]
},
"GetPhysicsMode": {
"prefix": "GetPhysicsMode",
"description": "This function gets the physics mode of an entity, which indicates how it reacts to physical forces and collisions.",
"body": ["number GetPhysicsMode()"]
},
"Entity:GetPickMode": {
"prefix": "Entity:GetPickMode",
"description": "This function gets an entity's pick mode.",
"body": ["number GetPickMode()"]
},
"GetPickMode ": {
"prefix": "GetPickMode ",
"description": "This function gets an entity's pick mode.",
"body": ["number GetPickMode()"]
},
"Entity:GetPickRadius": {
"prefix": "Entity:GetPickRadius",
"description": "This functions gets the entity radius for pick operations.",
"body": ["number GetPickRadius()"]
},
"GetPickRadius": {
"prefix": "GetPickRadius",
"description": "This functions gets the entity radius for pick operations.",
"body": ["number GetPickRadius()"]
},
"Entity:GetVelocity": {
"prefix": "Entity:GetVelocity",
"description": "This function gets entity's velocity, in global or local space.",
"body": ["Vec3 GetVelocity($bool_global_=_true)"]
},
"GetVelocity ": {
"prefix": "GetVelocity ",
"description": "This function gets entity's velocity, in global or local space.",
"body": ["Vec3 GetVelocity($bool_global_=_true)"]
},
"Entity:GetPosition": {
"prefix": "Entity:GetPosition",
"description": "This function gets the entity position, in local or global space.",
"body": ["Vec3 GetPosition($bool_global_=_false)"]
},
"GetPosition": {
"prefix": "GetPosition",
"description": "This function gets the entity position, in local or global space.",
"body": ["Vec3 GetPosition($bool_global_=_false)"]
},
"Entity:GetQuaternion": {
"prefix": "Entity:GetQuaternion",
"description": "This function gets the quaternion rotation of an entity. A quaternion is a special rotation value that is more accurate than Euler angles in some situations.",
"body": ["Quat GetQuaterion($bool_global_=_false)"]
},
"GetQuaternion": {
"prefix": "GetQuaternion",
"description": "This function gets the quaternion rotation of an entity. A quaternion is a special rotation value that is more accurate than Euler angles in some situations.",
"body": ["Quat GetQuaterion($bool_global_=_false)"]
},
"Entity:GetScale": {
"prefix": "Entity:GetScale",
"description": "This function gets the entity scale in local space.",
"body": ["Vec3 GetScale()"]
},
"GetScale": {
"prefix": "GetScale",
"description": "This function gets the entity scale in local space.",
"body": ["Vec3 GetScale()"]
},
"Entity:GetShape": {
"prefix": "Entity:GetShape",
"description": "This function gets an entity's shape. This function does not increment the shape's reference count.",
"body": ["Shape GetShape()"]
},
"GetShape": {
"prefix": "GetShape",
"description": "This function gets an entity's shape. This function does not increment the shape's reference count.",
"body": ["Shape GetShape()"]
},
"Entity:GetSweptCollisionMode": {
"prefix": "Entity:GetSweptCollisionMode",
"description": "This function gets the swept collision mode of an entity.",
"body": ["bool GetSweptCollisionMode()"]
},
"GetSweptCollisionMode": {
"prefix": "GetSweptCollisionMode",
"description": "This function gets the swept collision mode of an entity.",
"body": ["bool GetSweptCollisionMode()"]
},
"Entity:GetVelocity ": {
"prefix": "Entity:GetVelocity ",
"description": "This function gets entity's velocity, in global or local space.",
"body": ["Vec3 GetVelocity($bool_global_=_true)"]
},
"GetVelocity  ": {
"prefix": "GetVelocity  ",
"description": "This function gets entity's velocity, in global or local space.",
"body": ["Vec3 GetVelocity($bool_global_=_true)"]
},
"Entity:GetViewRange": {
"prefix": "Entity:GetViewRange",
"description": "This function gets an entity's view range.",
"body": ["GetViewRange()"]
},
"GetViewRange": {
"prefix": "GetViewRange",
"description": "This function gets an entity's view range.",
"body": ["GetViewRange()"]
},
"Entity:GoToPoint": {
"prefix": "Entity:GoToPoint",
"description": "This function uses the navigation system to make an entity walk along a path to a specific point in the world.",
"body": ["GoToPoint($number_x, $number_y, $number_z, $number_maxspeed=1.4, $number_maxacceleration=1.0)"]
},
"GoToPoint": {
"prefix": "GoToPoint",
"description": "This function uses the navigation system to make an entity walk along a path to a specific point in the world.",
"body": ["GoToPoint($number_x, $number_y, $number_z, $number_maxspeed=1.4, $number_maxacceleration=1.0)"]
},
"Entity:GoToPoint ": {
"prefix": "Entity:GoToPoint ",
"description": "This function uses the navigation system to make an entity walk along a path to a specific point in the world.",
"body": ["GoToPoint($Vec3_point, $number_maxspeed=1.4, $number_maxacceleration=1.0)"]
},
"GoToPoint ": {
"prefix": "GoToPoint ",
"description": "This function uses the navigation system to make an entity walk along a path to a specific point in the world.",
"body": ["GoToPoint($Vec3_point, $number_maxspeed=1.4, $number_maxacceleration=1.0)"]
},
"Entity:Hidden": {
"prefix": "Entity:Hidden",
"description": "This function can be used to tell if an entity is hidden.",
"body": ["bool Hidden()"]
},
"Hidden": {
"prefix": "Hidden",
"description": "This function can be used to tell if an entity is hidden.",
"body": ["bool Hidden()"]
},
"Entity:Hide": {
"prefix": "Entity:Hide",
"description": "This functions hides an entity. A hidden entity will be invisible, will not collide with other entities, and its 4x4 matrix will not be updated when the parent moves.",
"body": ["void Hide()"]
},
"Hide": {
"prefix": "Hide",
"description": "This functions hides an entity. A hidden entity will be invisible, will not collide with other entities, and its 4x4 matrix will not be updated when the parent moves.",
"body": ["void Hide()"]
},
"Entity:Instance": {
"prefix": "Entity:Instance",
"description": "This function creates and returns a new instance of the specified entity. Because the function will not duplicate model surfaces, it is generally fast enough for real-time use.",
"body": ["Entity Instance($recursive=true)"]
},
"Instance": {
"prefix": "Instance",
"description": "This function creates and returns a new instance of the specified entity. Because the function will not duplicate model surfaces, it is generally fast enough for real-time use.",
"body": ["Entity Instance($recursive=true)"]
},
"Entity:LoadAnimation": {
"prefix": "Entity:LoadAnimation",
"description": "Loads one or more animations from a model file, onto an existing entity. The hierarchy in the loaded file must match the hierarchy of the entity.",
"body": ["LoadAnimation($string_path, $number_flags=0)"]
},
"LoadAnimation": {
"prefix": "LoadAnimation",
"description": "Loads one or more animations from a model file, onto an existing entity. The hierarchy in the loaded file must match the hierarchy of the entity.",
"body": ["LoadAnimation($string_path, $number_flags=0)"]
},
"Entity:LockMatrix": {
"prefix": "Entity:LockMatrix",
"description": "This function pauses entity matrix updating. For faster performance, use this before calling multiple animation commands, then use Entity::UnlockMatrix() to resume entity matrix updating.",
"body": ["LockMatrix()"]
},
"LockMatrix": {
"prefix": "LockMatrix",
"description": "This function pauses entity matrix updating. For faster performance, use this before calling multiple animation commands, then use Entity::UnlockMatrix() to resume entity matrix updating.",
"body": ["LockMatrix()"]
},
"Entity:Move": {
"prefix": "Entity:Move",
"description": "Sets the position of an entity in 3-dimensional space, using local or global coordinates.",
"body": ["void Move($Vec3_position, $bool_global=false)"]
},
"Move": {
"prefix": "Move",
"description": "Sets the position of an entity in 3-dimensional space, using local or global coordinates.",
"body": ["void Move($Vec3_position, $bool_global=false)"]
},
"Entity:Move ": {
"prefix": "Entity:Move ",
"description": "Sets the position of an entity in 3-dimensional space, using local or global coordinates.",
"body": ["void Move($number_x, $number_y, $number_z, $bool_global=false)"]
},
"Move ": {
"prefix": "Move ",
"description": "Sets the position of an entity in 3-dimensional space, using local or global coordinates.",
"body": ["void Move($number_x, $number_y, $number_z, $bool_global=false)"]
},
"Entity:Pick": {
"prefix": "Entity:Pick",
"description": "This function performs a pick operation on a single entity.",
"body": ["bool Pick($Vec3_p0, $Vec3_p1, $Pick_pick, $number_radius_=_0.0, $bool_closest=false, $bool_recursive=false, $number_collisiontype=0)"]
},
"Pick ": {
"prefix": "Pick ",
"description": "This function performs a pick operation on a single entity.",
"body": ["bool Pick($Vec3_p0, $Vec3_p1, $Pick_pick, $number_radius_=_0.0, $bool_closest=false, $bool_recursive=false, $number_collisiontype=0)"]
},
"Entity:PlayAnimation": {
"prefix": "Entity:PlayAnimation",
"description": "This command makes an entity automatically play an animation sequence.",
"body": ["PlayAnimation($string_sequence, $number_speed=1.0f, $number_blendtime=500, $number_mode=0)"]
},
"PlayAnimation": {
"prefix": "PlayAnimation",
"description": "This command makes an entity automatically play an animation sequence.",
"body": ["PlayAnimation($string_sequence, $number_speed=1.0f, $number_blendtime=500, $number_mode=0)"]
},
"Entity:PlayAnimation ": {
"prefix": "Entity:PlayAnimation ",
"description": "This command makes an entity automatically play an animation sequence.",
"body": ["PlayAnimation($number_sequence, $number_speed_=_1.0f, $number_blendtime_=_500, $number_mode_=_0)"]
},
"PlayAnimation ": {
"prefix": "PlayAnimation ",
"description": "This command makes an entity automatically play an animation sequence.",
"body": ["PlayAnimation($number_sequence, $number_speed_=_1.0f, $number_blendtime_=_500, $number_mode_=_0)"]
},
"Entity:Point": {
"prefix": "Entity:Point",
"description": "This function points an entity at another entity.",
"body": ["Point($Entity_entity, $number_axis_=_2, $number_rate_=_1.0, $number_roll_=_0.0)"]
},
"Point": {
"prefix": "Point",
"description": "This function points an entity at another entity.",
"body": ["Point($Entity_entity, $number_axis_=_2, $number_rate_=_1.0, $number_roll_=_0.0)"]
},
"Entity:SetAnimationFrame": {
"prefix": "Entity:SetAnimationFrame",
"description": "Sets an entity to a specific animation frame.",
"body": ["SetAnimationFrame($number_time, $number_blend=1.0, $number_index=0, $bool_recursive=true)"]
},
"SetAnimationFrame": {
"prefix": "SetAnimationFrame",
"description": "Sets an entity to a specific animation frame.",
"body": ["SetAnimationFrame($number_time, $number_blend=1.0, $number_index=0, $bool_recursive=true)"]
},
"Entity:SetAnimationFrame ": {
"prefix": "Entity:SetAnimationFrame ",
"description": "Sets an entity to a specific animation frame.",
"body": ["SetAnimationFrame($number_time, $number_blend, $string_name, $bool_recursive=true)"]
},
"SetAnimationFrame ": {
"prefix": "SetAnimationFrame ",
"description": "Sets an entity to a specific animation frame.",
"body": ["SetAnimationFrame($number_time, $number_blend, $string_name, $bool_recursive=true)"]
},
"Entity:SetCollisionType": {
"prefix": "Entity:SetCollisionType",
"description": "Sets an entity's collision type. Collision types are used to control what kind of objects will register collisions when they come into contact.",
"body": ["SetCollisionType($number_collisiontype, $bool_recursive)"]
},
"SetCollisionType": {
"prefix": "SetCollisionType",
"description": "Sets an entity's collision type. Collision types are used to control what kind of objects will register collisions when they come into contact.",
"body": ["SetCollisionType($number_collisiontype, $bool_recursive)"]
},
"Entity:SetColor": {
"prefix": "Entity:SetColor",
"description": "This function sets an entity's color.",
"body": ["SetColor($number_r, $number_g, $number_b, $number_a=1.0, $number_mode=Color.Diffuse, $bool_recursive=false)"]
},
"SetColor   ": {
"prefix": "SetColor   ",
"description": "This function sets an entity's color.",
"body": ["SetColor($number_r, $number_g, $number_b, $number_a=1.0, $number_mode=Color.Diffuse, $bool_recursive=false)"]
},
"Entity:SetColor ": {
"prefix": "Entity:SetColor ",
"description": "This function sets an entity's color.",
"body": ["SetColor($number_r, $number_g, $number_b)"]
},
"SetColor    ": {
"prefix": "SetColor    ",
"description": "This function sets an entity's color.",
"body": ["SetColor($number_r, $number_g, $number_b)"]
},
"Entity:SetColor  ": {
"prefix": "Entity:SetColor  ",
"description": "This function sets an entity's color.",
"body": ["SetColor($Vec4_color, $number_mode=Color.Diffuse, $bool_recursive=false)"]
},
"SetColor     ": {
"prefix": "SetColor     ",
"description": "This function sets an entity's color.",
"body": ["SetColor($Vec4_color, $number_mode=Color.Diffuse, $bool_recursive=false)"]
},
"Entity:SetFriction": {
"prefix": "Entity:SetFriction",
"description": "Sets an entity's static and kinetic friction.",
"body": ["SetFriction($number_staticfriction, $number_kineticfriction)"]
},
"SetFriction": {
"prefix": "SetFriction",
"description": "Sets an entity's static and kinetic friction.",
"body": ["SetFriction($number_staticfriction, $number_kineticfriction)"]
},
"Entity:SetGravityMode": {
"prefix": "Entity:SetGravityMode",
"description": "This functions sets the entity gravity mode, which controls whether gravity affects the entity.",
"body": ["SetGravityMode($bool_mode)"]
},
"SetGravityMode": {
"prefix": "SetGravityMode",
"description": "This functions sets the entity gravity mode, which controls whether gravity affects the entity.",
"body": ["SetGravityMode($bool_mode)"]
},
"Entity:SetInput": {
"prefix": "Entity:SetInput",
"description": "This functions set the movement parameters of an entity that uses the CharacterPhysics physics mode.        When an entity uses character physics, the physics will control the object's rotation, and calls to Entity::SetRotation() and similar functions will have no effect.",
"body": ["SetInput($number_angle, $number_move, $number_strafe=0, $number_jump=0, $bool_crouch_=_false, $float_maxaccel_=_1, $float_maxdecel_=_0.5, $bool_detailed_=_false, $float_maxrotationspeed=5.0)"]
},
"SetInput": {
"prefix": "SetInput",
"description": "This functions set the movement parameters of an entity that uses the CharacterPhysics physics mode.        When an entity uses character physics, the physics will control the object's rotation, and calls to Entity::SetRotation() and similar functions will have no effect.",
"body": ["SetInput($number_angle, $number_move, $number_strafe=0, $number_jump=0, $bool_crouch_=_false, $float_maxaccel_=_1, $float_maxdecel_=_0.5, $bool_detailed_=_false, $float_maxrotationspeed=5.0)"]
},
"Entity:SetIntensity": {
"prefix": "Entity:SetIntensity",
"description": "This function sets the entity color intensity.",
"body": ["SetIntensity($number_intensity, $number_mode=Color::Diffuse, $bool_recursive=false)"]
},
"SetIntensity": {
"prefix": "SetIntensity",
"description": "This function sets the entity color intensity.",
"body": ["SetIntensity($number_intensity, $number_mode=Color::Diffuse, $bool_recursive=false)"]
},
"Entity:SetKeyValue": {
"prefix": "Entity:SetKeyValue",
"description": "This function sets an entity key value.  A key value is a string value associated with a key name.",
"body": ["SetKeyValue($string_keyname, $string_keytvalue)"]
},
"SetKeyValue": {
"prefix": "SetKeyValue",
"description": "This function sets an entity key value.  A key value is a string value associated with a key name.",
"body": ["SetKeyValue($string_keyname, $string_keytvalue)"]
},
"Entity:SetMass": {
"prefix": "Entity:SetMass",
"description": "Sets an entity's mass.",
"body": ["SetMass($number_mass)"]
},
"SetMass": {
"prefix": "SetMass",
"description": "Sets an entity's mass.",
"body": ["SetMass($number_mass)"]
},
"Entity:SetMass ": {
"prefix": "Entity:SetMass ",
"description": "Sets an entity's mass.",
"body": ["SetMass($number_mass, $number_cx, $number_cy, $number_cz, $number_ixx, $number_iyy, $number_izz)"]
},
"SetMass ": {
"prefix": "SetMass ",
"description": "Sets an entity's mass.",
"body": ["SetMass($number_mass, $number_cx, $number_cy, $number_cz, $number_ixx, $number_iyy, $number_izz)"]
},
"Entity:SetMaterial": {
"prefix": "Entity:SetMaterial",
"description": "This function sets an entity's material.",
"body": ["SetMaterial($Material_material, $bool_recursive_=_false)"]
},
"SetMaterial": {
"prefix": "SetMaterial",
"description": "This function sets an entity's material.",
"body": ["SetMaterial($Material_material, $bool_recursive_=_false)"]
},
"Entity:SetMatrix": {
"prefix": "Entity:SetMatrix",
"description": "This function sets an entity's 4x4 matrix and updates the position, rotation, and scale.",
"body": ["SetMatrix($Mat4_matrix, $bool_global_=_true)"]
},
"SetMatrix": {
"prefix": "SetMatrix",
"description": "This function sets an entity's 4x4 matrix and updates the position, rotation, and scale.",
"body": ["SetMatrix($Mat4_matrix, $bool_global_=_true)"]
},
"Entity:SetOmega": {
"prefix": "Entity:SetOmega",
"description": "This function sets an entity's angular velocity, without interrupting the physics simulation.",
"body": ["SetOmega($Vec3_omega, $bool_global_=_true)"]
},
"SetOmega": {
"prefix": "SetOmega",
"description": "This function sets an entity's angular velocity, without interrupting the physics simulation.",
"body": ["SetOmega($Vec3_omega, $bool_global_=_true)"]
},
"Entity:SetOmega ": {
"prefix": "Entity:SetOmega ",
"description": "This function sets an entity's angular velocity, without interrupting the physics simulation.",
"body": ["SetOmega($number_x, $number_y, $number_z, $bool_global_=_true)"]
},
"SetOmega ": {
"prefix": "SetOmega ",
"description": "This function sets an entity's angular velocity, without interrupting the physics simulation.",
"body": ["SetOmega($number_x, $number_y, $number_z, $bool_global_=_true)"]
},
"Entity:SetParent": {
"prefix": "Entity:SetParent",
"description": "This function can be used to parent one entity to another. A child entity will maintain the same local orientation when its parent moves.",
"body": ["SetParent($Entity_parent, $bool_global=true)"]
},
"SetParent": {
"prefix": "SetParent",
"description": "This function can be used to parent one entity to another. A child entity will maintain the same local orientation when its parent moves.",
"body": ["SetParent($Entity_parent, $bool_global=true)"]
},
"Entity:SetPhysicsMode": {
"prefix": "Entity:SetPhysicsMode",
"description": "Sets the entity physics mode.",
"body": ["SetPhysicsMode($number_mode)"]
},
"SetPhysicsMode": {
"prefix": "SetPhysicsMode",
"description": "Sets the entity physics mode.",
"body": ["SetPhysicsMode($number_mode)"]
},
"Entity:SetNavigationMode": {
"prefix": "Entity:SetNavigationMode",
"description": "This function sets an entity's pathfinding navigation mode.",
"body": ["SetNavigationMode($bool_mode, $bool_recursive=false)"]
},
"SetNavigationMode": {
"prefix": "SetNavigationMode",
"description": "This function sets an entity's pathfinding navigation mode.",
"body": ["SetNavigationMode($bool_mode, $bool_recursive=false)"]
},
"Entity:SetOcclusionCullingMode": {
"prefix": "Entity:SetOcclusionCullingMode",
"description": "This function sets the entity occlusion testing mode.",
"body": ["SetOcclusionCullingMode($bool_occlusionmode)"]
},
"SetOcclusionCullingMode": {
"prefix": "SetOcclusionCullingMode",
"description": "This function sets the entity occlusion testing mode.",
"body": ["SetOcclusionCullingMode($bool_occlusionmode)"]
},
"Entity:SetPickMode": {
"prefix": "Entity:SetPickMode",
"description": "This function sets an entity's pick mode.",
"body": ["void SetPickMode($number_mode, $bool_recursive=false)"]
},
"SetPickMode ": {
"prefix": "SetPickMode ",
"description": "This function sets an entity's pick mode.",
"body": ["void SetPickMode($number_mode, $bool_recursive=false)"]
},
"Entity:SetPickRadius": {
"prefix": "Entity:SetPickRadius",
"description": "This function sets an entity's pick radius, for use with the Pick::Sphere pick mode.",
"body": ["SetPickRadius($number_radius)"]
},
"SetPickRadius": {
"prefix": "SetPickRadius",
"description": "This function sets an entity's pick radius, for use with the Pick::Sphere pick mode.",
"body": ["SetPickRadius($number_radius)"]
},
"Entity:SetPosition": {
"prefix": "Entity:SetPosition",
"description": "Sets the position of an entity in 3-dimensional space, using local or global coordinates.",
"body": ["SetPosition($number_x_number_y, $number_z, $bool_global_=_false)"]
},
"SetPosition": {
"prefix": "SetPosition",
"description": "Sets the position of an entity in 3-dimensional space, using local or global coordinates.",
"body": ["SetPosition($number_x_number_y, $number_z, $bool_global_=_false)"]
},
"Entity:SetPosition ": {
"prefix": "Entity:SetPosition ",
"description": "Sets the position of an entity in 3-dimensional space, using local or global coordinates.",
"body": ["SetPosition($Vec3_position, $bool_global_=_false)"]
},
"SetPosition ": {
"prefix": "SetPosition ",
"description": "Sets the position of an entity in 3-dimensional space, using local or global coordinates.",
"body": ["SetPosition($Vec3_position, $bool_global_=_false)"]
},
"Entity:SetQuaternion": {
"prefix": "Entity:SetQuaternion",
"description": "This function sets the quaternion rotation of an entity. A quaternion is a special rotation value that is more accurate than Euler angles in some situations.",
"body": ["SetQuaterion($Quat_rotation, $bool_global_=_false)"]
},
"SetQuaternion": {
"prefix": "SetQuaternion",
"description": "This function sets the quaternion rotation of an entity. A quaternion is a special rotation value that is more accurate than Euler angles in some situations.",
"body": ["SetQuaterion($Quat_rotation, $bool_global_=_false)"]
},
"Entity:SetRotation": {
"prefix": "Entity:SetRotation",
"description": "Rotates an entity with the specified euler rotation, in local or global space.",
"body": ["SetRotation($number_pitch, $number_yaw, $number_roll, $bool_global=false)"]
},
"SetRotation ": {
"prefix": "SetRotation ",
"description": "Rotates an entity with the specified euler rotation, in local or global space.",
"body": ["SetRotation($number_pitch, $number_yaw, $number_roll, $bool_global=false)"]
},
"Entity:SetRotation ": {
"prefix": "Entity:SetRotation ",
"description": "Rotates an entity with the specified euler rotation, in local or global space.",
"body": ["void SetRotation($Vec3_rotation, $bool_global=false)"]
},
"SetRotation  ": {
"prefix": "SetRotation  ",
"description": "Rotates an entity with the specified euler rotation, in local or global space.",
"body": ["void SetRotation($Vec3_rotation, $bool_global=false)"]
},
"Entity:SetRotation  ": {
"prefix": "Entity:SetRotation  ",
"description": "Rotates an entity with the specified euler rotation, in local or global space.",
"body": ["void SetRotation($Quat_rotation, $bool_global=false)"]
},
"SetRotation   ": {
"prefix": "SetRotation   ",
"description": "Rotates an entity with the specified euler rotation, in local or global space.",
"body": ["void SetRotation($Quat_rotation, $bool_global=false)"]
},
"Entity:SetScale": {
"prefix": "Entity:SetScale",
"description": "This function sets the scale of an entity, in local space.",
"body": ["SetScale($number_x, $number_y, $number_z)"]
},
"SetScale ": {
"prefix": "SetScale ",
"description": "This function sets the scale of an entity, in local space.",
"body": ["SetScale($number_x, $number_y, $number_z)"]
},
"Entity:SetScale ": {
"prefix": "Entity:SetScale ",
"description": "This function sets the scale of an entity, in local space.",
"body": ["SetScale($Vec3_scale)"]
},
"SetScale  ": {
"prefix": "SetScale  ",
"description": "This function sets the scale of an entity, in local space.",
"body": ["SetScale($Vec3_scale)"]
},
"Entity:SetShadowMode": {
"prefix": "Entity:SetShadowMode",
"description": "This functions sets the entity shadow mode, which controls whether the entity casts shadows.",
"body": ["SetShadowMode($number_mode)"]
},
"SetShadowMode ": {
"prefix": "SetShadowMode ",
"description": "This functions sets the entity shadow mode, which controls whether the entity casts shadows.",
"body": ["SetShadowMode($number_mode)"]
},
"Entity:SetShape": {
"prefix": "Entity:SetShape",
"description": "This function sets the physics shape of an entity.",
"body": ["SetShape($Shape_shape)"]
},
"SetShape": {
"prefix": "SetShape",
"description": "This function sets the physics shape of an entity.",
"body": ["SetShape($Shape_shape)"]
},
"Entity:SetShape ": {
"prefix": "Entity:SetShape ",
"description": "This function sets the physics shape of an entity.",
"body": ["SetShape($Shape_shape, $Mat4_mat)"]
},
"SetShape ": {
"prefix": "SetShape ",
"description": "This function sets the physics shape of an entity.",
"body": ["SetShape($Shape_shape, $Mat4_mat)"]
},
"Entity:SetSweptCollisionMode": {
"prefix": "Entity:SetSweptCollisionMode",
"description": "This function sets the swept collision mode of an entity. Entities with swept collision enabled will have more accurate collisions that are more computationally expensive to process. Use this for small and thin objects if you have problems with them going through other entities.",
"body": ["SetSweptCollisionMode($bool_mode)"]
},
"SetSweptCollisionMode": {
"prefix": "SetSweptCollisionMode",
"description": "This function sets the swept collision mode of an entity. Entities with swept collision enabled will have more accurate collisions that are more computationally expensive to process. Use this for small and thin objects if you have problems with them going through other entities.",
"body": ["SetSweptCollisionMode($bool_mode)"]
},
"Entity:SetVelocity": {
"prefix": "Entity:SetVelocity",
"description": "This function sets an entity's velocity, without interrupting the physics simulation.",
"body": ["SetVelocity($Vec3_velocity, $bool_global_=_true)"]
},
"SetVelocity ": {
"prefix": "SetVelocity ",
"description": "This function sets an entity's velocity, without interrupting the physics simulation.",
"body": ["SetVelocity($Vec3_velocity, $bool_global_=_true)"]
},
"Entity:SetVelocity ": {
"prefix": "Entity:SetVelocity ",
"description": "This function sets an entity's velocity, without interrupting the physics simulation.",
"body": ["SetVelocity($number_x, $number_y, $number_z, $bool_global_=_true)"]
},
"SetVelocity  ": {
"prefix": "SetVelocity  ",
"description": "This function sets an entity's velocity, without interrupting the physics simulation.",
"body": ["SetVelocity($number_x, $number_y, $number_z, $bool_global_=_true)"]
},
"Entity:Show": {
"prefix": "Entity:Show",
"description": "This function shows a hidden entity. A hidden entity will be invisible, will not collide with other entities, and its 4x4 matrix will not be updated when the parent moves.",
"body": ["Show()"]
},
"Show": {
"prefix": "Show",
"description": "This function shows a hidden entity. A hidden entity will be invisible, will not collide with other entities, and its 4x4 matrix will not be updated when the parent moves.",
"body": ["Show()"]
},
"Entity:Stop": {
"prefix": "Entity:Stop",
"description": "This function stops the entity from following or moving to a point.",
"body": ["Stop()"]
},
"Stop": {
"prefix": "Stop",
"description": "This function stops the entity from following or moving to a point.",
"body": ["Stop()"]
},
"Entity:StopAnimation": {
"prefix": "Entity:StopAnimation",
"description": "This command stops all currently playing animations..",
"body": ["StopAnimation()"]
},
"StopAnimation": {
"prefix": "StopAnimation",
"description": "This command stops all currently playing animations..",
"body": ["StopAnimation()"]
},
"Entity:Translate": {
"prefix": "Entity:Translate",
"description": "Moves an entity along its parent axes in local or global space.",
"body": ["Translate($number_x, $number_y, $number_z, $bool_global=false)"]
},
"Translate": {
"prefix": "Translate",
"description": "Moves an entity along its parent axes in local or global space.",
"body": ["Translate($number_x, $number_y, $number_z, $bool_global=false)"]
},
"Entity:Turn": {
"prefix": "Entity:Turn",
"description": "Turns an entity by the specified euler rotation in local or global space. This function is more accurate than simply adding units to the rotation axes and will avoid problems with Gimbal lock.",
"body": ["Turn($number_pitch, $number_yaw, $number_roll, $bool_global=false);"]
},
"Turn": {
"prefix": "Turn",
"description": "Turns an entity by the specified euler rotation in local or global space. This function is more accurate than simply adding units to the rotation axes and will avoid problems with Gimbal lock.",
"body": ["Turn($number_pitch, $number_yaw, $number_roll, $bool_global=false);"]
},
"Entity:UnlockMatrix": {
"prefix": "Entity:UnlockMatrix",
"description": "This function resumes entity matrix updating after a matrix is locked. For faster performance, use Entity::LockMatrix() before calling multiple animation commands, then use Entity::UnlockMatrix() to resume entity matrix updating.",
"body": ["UnlockMatrix()"]
},
"UnlockMatrix": {
"prefix": "UnlockMatrix",
"description": "This function resumes entity matrix updating after a matrix is locked. For faster performance, use Entity::LockMatrix() before calling multiple animation commands, then use Entity::UnlockMatrix() to resume entity matrix updating.",
"body": ["UnlockMatrix()"]
},
"EventQueue:Emit": {
"prefix": "EventQueue:Emit",
"description": "This function is used to add a new event to the event queue. Widget scripts use this to notify the main program that the user has interacted with the widget in some manner. You can also add your own custom events by setting the event id parameter.",
"body": ["global Emit($number_id, $Object_source=nil, $number_data=0, $number_x=0, $number_y=0, $number_width=0, $number_height=0, $Object_extra=nil)"]
},
"Emit": {
"prefix": "Emit",
"description": "This function is used to add a new event to the event queue. Widget scripts use this to notify the main program that the user has interacted with the widget in some manner. You can also add your own custom events by setting the event id parameter.",
"body": ["global Emit($number_id, $Object_source=nil, $number_data=0, $number_x=0, $number_y=0, $number_width=0, $number_height=0, $Object_extra=nil)"]
},
"EventQueue:Peek": {
"prefix": "EventQueue:Peek",
"description": "This function is used to check if any events are being stored in the event queue.",
"body": ["global boolean Peek()"]
},
"Peek": {
"prefix": "Peek",
"description": "This function is used to check if any events are being stored in the event queue.",
"body": ["global boolean Peek()"]
},
"EventQueue:Wait": {
"prefix": "EventQueue:Wait",
"description": "This function will wait until an event occurs and then return it. Real-time applications should only call this function when Peek() returns true, in order to avoid pausing the program.",
"body": ["global boolean Wait()"]
},
"Wait": {
"prefix": "Wait",
"description": "This function will wait until an event occurs and then return it. Real-time applications should only call this function when Peek() returns true, in order to avoid pausing the program.",
"body": ["global boolean Wait()"]
},
"FileSystem:CopyFile": {
"prefix": "FileSystem:CopyFile",
"description": "This function copies a file from one location to another.",
"body": ["bool CopyFile($string_src, $string_dst)"]
},
"CopyFile": {
"prefix": "CopyFile",
"description": "This function copies a file from one location to another.",
"body": ["bool CopyFile($string_src, $string_dst)"]
},
"FileSystem:CreateDir": {
"prefix": "FileSystem:CreateDir",
"description": "This function creates a new directory.",
"body": ["bool CreateDir($string_path, $bool_recursive=false)"]
},
"CreateDir": {
"prefix": "CreateDir",
"description": "This function creates a new directory.",
"body": ["bool CreateDir($string_path, $bool_recursive=false)"]
},
"FileSystem:CopyDir": {
"prefix": "FileSystem:CopyDir",
"description": "This function copies a directory from one location to another.",
"body": ["bool CopyDir($string_src, $string_dst)"]
},
"CopyDir": {
"prefix": "CopyDir",
"description": "This function copies a directory from one location to another.",
"body": ["bool CopyDir($string_src, $string_dst)"]
},
"FileSystem:DeleteDir": {
"prefix": "FileSystem:DeleteDir",
"description": "This function deletes a directory.",
"body": ["bool DeleteDir($string_path, $bool_recursive=false)"]
},
"DeleteDir": {
"prefix": "DeleteDir",
"description": "This function deletes a directory.",
"body": ["bool DeleteDir($string_path, $bool_recursive=false)"]
},
"FileSystem:DeleteFile": {
"prefix": "FileSystem:DeleteFile",
"description": "This function deletes a file.",
"body": ["bool DeleteFile($string_path)"]
},
"DeleteFile": {
"prefix": "DeleteFile",
"description": "This function deletes a file.",
"body": ["bool DeleteFile($string_path)"]
},
"FileSystem:ExtractDir": {
"prefix": "FileSystem:ExtractDir",
"description": "This function returns the directory part of a file path.",
"body": ["string ExtractDir($string_path)"]
},
"ExtractDir": {
"prefix": "ExtractDir",
"description": "This function returns the directory part of a file path.",
"body": ["string ExtractDir($string_path)"]
},
"FileSystem:GetAppDataPath": {
"prefix": "FileSystem:GetAppDataPath",
"description": "This function gets the writable OS-level path for application data. Use this to get a path you can always safely write files to.",
"body": ["string GetAppDataPath()"]
},
"GetAppDataPath": {
"prefix": "GetAppDataPath",
"description": "This function gets the writable OS-level path for application data. Use this to get a path you can always safely write files to.",
"body": ["string GetAppDataPath()"]
},
"FileSystem:GetDir": {
"prefix": "FileSystem:GetDir",
"description": "This function returns the current directory.",
"body": ["String GetDir()"]
},
"GetDir": {
"prefix": "GetDir",
"description": "This function returns the current directory.",
"body": ["String GetDir()"]
},
"FileSystem:GetFileSize": {
"prefix": "FileSystem:GetFileSize",
"description": "This functions gets a file's size.",
"body": ["int GetFileSize($string_path)"]
},
"GetFileSize": {
"prefix": "GetFileSize",
"description": "This functions gets a file's size.",
"body": ["int GetFileSize($string_path)"]
},
"FileSystem:GetFileTime": {
"prefix": "FileSystem:GetFileTime",
"description": "This function returns the time a file was last modified.",
"body": ["number GetFileTime($string_path)"]
},
"GetFileTime": {
"prefix": "GetFileTime",
"description": "This function returns the time a file was last modified.",
"body": ["number GetFileTime($string_path)"]
},
"FileSystem:GetFileType": {
"prefix": "FileSystem:GetFileType",
"description": "This function gets the file type of a file.",
"body": ["number GetFileType($string_path)"]
},
"GetFileType": {
"prefix": "GetFileType",
"description": "This function gets the file type of a file.",
"body": ["number GetFileType($string_path)"]
},
"FileSystem:OpenFile": {
"prefix": "FileSystem:OpenFile",
"description": "This function opens a file with read and write access.",
"body": ["Stream OpenFile($string_path)"]
},
"OpenFile": {
"prefix": "OpenFile",
"description": "This function opens a file with read and write access.",
"body": ["Stream OpenFile($string_path)"]
},
"FileSystem:ReadFile": {
"prefix": "FileSystem:ReadFile",
"description": "This function opens a file with read access.",
"body": ["static Stream ReadFile($string_path)"]
},
"ReadFile": {
"prefix": "ReadFile",
"description": "This function opens a file with read access.",
"body": ["static Stream ReadFile($string_path)"]
},
"FileSystem:RealPath": {
"prefix": "FileSystem:RealPath",
"description": "This function returns a formatted file path name.",
"body": ["string RealPath($string_path)"]
},
"RealPath": {
"prefix": "RealPath",
"description": "This function returns a formatted file path name.",
"body": ["string RealPath($string_path)"]
},
"FileSystem:RenameDir": {
"prefix": "FileSystem:RenameDir",
"description": "This function renames a directory.",
"body": ["bool RenameDir($string_src, $string_dst)"]
},
"RenameDir": {
"prefix": "RenameDir",
"description": "This function renames a directory.",
"body": ["bool RenameDir($string_src, $string_dst)"]
},
"FileSystem:RenameFile": {
"prefix": "FileSystem:RenameFile",
"description": "This function renames a file.",
"body": ["static bool RenameFile($string_src, $string_dst)"]
},
"RenameFile": {
"prefix": "RenameFile",
"description": "This function renames a file.",
"body": ["static bool RenameFile($string_src, $string_dst)"]
},
"FileSystem:SetDir": {
"prefix": "FileSystem:SetDir",
"description": "This function sets the current directory.",
"body": ["bool SetDir($string_path)"]
},
"SetDir": {
"prefix": "SetDir",
"description": "This function sets the current directory.",
"body": ["bool SetDir($string_path)"]
},
"FileSystem:StripAll": {
"prefix": "FileSystem:StripAll",
"description": "This function removes the directory and extension parts of a file path.",
"body": ["string StripAll($string_path)"]
},
"StripAll": {
"prefix": "StripAll",
"description": "This function removes the directory and extension parts of a file path.",
"body": ["string StripAll($string_path)"]
},
"FileSystem:StripDir": {
"prefix": "FileSystem:StripDir",
"description": "This function removes the directory part of a file path.",
"body": ["string StripDir($string_path)"]
},
"StripDir": {
"prefix": "StripDir",
"description": "This function removes the directory part of a file path.",
"body": ["string StripDir($string_path)"]
},
"FileSystem:StripExt": {
"prefix": "FileSystem:StripExt",
"description": "This function removes the file extension from a file path.",
"body": ["string StripExt($string_path)"]
},
"StripExt": {
"prefix": "StripExt",
"description": "This function removes the file extension from a file path.",
"body": ["string StripExt($string_path)"]
},
"FileSystem:WriteFile": {
"prefix": "FileSystem:WriteFile",
"description": "This function creates a new file and opens it with write access. If the file already exists, it will be overwritten.",
"body": ["Stream WriteFile($string_path)"]
},
"WriteFile": {
"prefix": "WriteFile",
"description": "This function creates a new file and opens it with write access. If the file already exists, it will be overwritten.",
"body": ["Stream WriteFile($string_path)"]
},
"GUI:Create": {
"prefix": "GUI:Create",
"description": "This function creates a new GUI on the specified context. A GUI must be created before widgets can be added to build the interface.",
"body": ["global GUI Create($Context_context)"]
},
"Create                ": {
"prefix": "Create                ",
"description": "This function creates a new GUI on the specified context. A GUI must be created before widgets can be added to build the interface.",
"body": ["global GUI Create($Context_context)"]
},
"GUI:GetBase": {
"prefix": "GUI:GetBase",
"description": "Each GUI object has a base widget other widgets are parented to. This function returns the base GUI widget. New widgets can be created as a child of this widget, to add them to the GUI.",
"body": ["Widget GetBase()"]
},
"GetBase": {
"prefix": "GetBase",
"description": "Each GUI object has a base widget other widgets are parented to. This function returns the base GUI widget. New widgets can be created as a child of this widget, to add them to the GUI.",
"body": ["Widget GetBase()"]
},
"Joint:Ball": {
"prefix": "Joint:Ball",
"description": "This function creates a new ball and socket joint.",
"body": ["Joint Ball($number_posx, $number_posy, $number_posz, $Entity_child, $Entity_parent=NULL)"]
},
"Ball": {
"prefix": "Ball",
"description": "This function creates a new ball and socket joint.",
"body": ["Joint Ball($number_posx, $number_posy, $number_posz, $Entity_child, $Entity_parent=NULL)"]
},
"Joint:DisableLimits": {
"prefix": "Joint:DisableLimits",
"description": "This function disables joint limits.",
"body": ["DisableLimits()"]
},
"DisableLimits": {
"prefix": "DisableLimits",
"description": "This function disables joint limits.",
"body": ["DisableLimits()"]
},
"Joint:DisableMotor": {
"prefix": "Joint:DisableMotor",
"description": "This function turns off a hinge or slider joint's built-in actuator.",
"body": ["DisableMotor()"]
},
"DisableMotor": {
"prefix": "DisableMotor",
"description": "This function turns off a hinge or slider joint's built-in actuator.",
"body": ["DisableMotor()"]
},
"Joint:EnableLimits": {
"prefix": "Joint:EnableLimits",
"description": "This function enables joint limits. Use this together with the SetLimits function to control the range of motion of a joint.",
"body": ["EnableLimits()"]
},
"EnableLimits": {
"prefix": "EnableLimits",
"description": "This function enables joint limits. Use this together with the SetLimits function to control the range of motion of a joint.",
"body": ["EnableLimits()"]
},
"Joint:GetAngle": {
"prefix": "Joint:GetAngle",
"description": "This function returns the angle a joint is presently oriented at.",
"body": ["number GetAngle()"]
},
"GetAngle ": {
"prefix": "GetAngle ",
"description": "This function returns the angle a joint is presently oriented at.",
"body": ["number GetAngle()"]
},
"Joint:GetFriction": {
"prefix": "Joint:GetFriction",
"description": "This function returns the friction setting of a joint.",
"body": ["Vec2 GetFriction()"]
},
"GetFriction": {
"prefix": "GetFriction",
"description": "This function returns the friction setting of a joint.",
"body": ["Vec2 GetFriction()"]
},
"Joint:GetSpring": {
"prefix": "Joint:GetSpring",
"description": "This function gets the spring value of a slider or hinge joint.",
"body": ["number GetSpring()"]
},
"GetSpring": {
"prefix": "GetSpring",
"description": "This function gets the spring value of a slider or hinge joint.",
"body": ["number GetSpring()"]
},
"Joint:GetTargetAngle": {
"prefix": "Joint:GetTargetAngle",
"description": "This function returns the angle a joint is presently oriented at.",
"body": ["number GetTargetAngle()"]
},
"GetTargetAngle": {
"prefix": "GetTargetAngle",
"description": "This function returns the angle a joint is presently oriented at.",
"body": ["number GetTargetAngle()"]
},
"Joint:Hinge": {
"prefix": "Joint:Hinge",
"description": "This function creates a new hinge joint.",
"body": ["Joint Hinge($number_posx, $number_posy, $number_posz, $number_pinx, $number_piny, $number_pinz, $Entity_child, $Entity_parent=NULL)"]
},
"Hinge": {
"prefix": "Hinge",
"description": "This function creates a new hinge joint.",
"body": ["Joint Hinge($number_posx, $number_posy, $number_posz, $number_pinx, $number_piny, $number_pinz, $Entity_child, $Entity_parent=NULL)"]
},
"Joint:Kinematic": {
"prefix": "Joint:Kinematic",
"description": "This function creates a new kinematic joint. A kinematic joint only attaches to one entity and can be used to force that entity to move to a specific position and rotation, using the SetTargetPosition, SetTargetRotation, and SetTargetMatrix commands. The SetFriction command can be used to control the maximum friction the joint can apply, to make a kinematic controller that only affects the position, rotation, or both.",
"body": ["Joint Kinematic($number_posx, $number_posy, $number_posz, $Entity_entity)"]
},
"Kinematic": {
"prefix": "Kinematic",
"description": "This function creates a new kinematic joint. A kinematic joint only attaches to one entity and can be used to force that entity to move to a specific position and rotation, using the SetTargetPosition, SetTargetRotation, and SetTargetMatrix commands. The SetFriction command can be used to control the maximum friction the joint can apply, to make a kinematic controller that only affects the position, rotation, or both.",
"body": ["Joint Kinematic($number_posx, $number_posy, $number_posz, $Entity_entity)"]
},
"Joint:LimitsEnabled": {
"prefix": "Joint:LimitsEnabled",
"description": "This function can tell whether limits are enabled for a joint.",
"body": ["bool LimitsEnabled()"]
},
"LimitsEnabled": {
"prefix": "LimitsEnabled",
"description": "This function can tell whether limits are enabled for a joint.",
"body": ["bool LimitsEnabled()"]
},
"Joint:MotorEnabled": {
"prefix": "Joint:MotorEnabled",
"description": "This function can tell whether a joint's actuator is enabled.",
"body": ["bool MotorEnabled()"]
},
"MotorEnabled": {
"prefix": "MotorEnabled",
"description": "This function can tell whether a joint's actuator is enabled.",
"body": ["bool MotorEnabled()"]
},
"Joint:SetFriction": {
"prefix": "Joint:SetFriction",
"description": "This function is used to set the friction level for a hinge or kinematic joint.",
"body": ["SetFriction($number_angularfriction)"]
},
"SetFriction ": {
"prefix": "SetFriction ",
"description": "This function is used to set the friction level for a hinge or kinematic joint.",
"body": ["SetFriction($number_angularfriction)"]
},
"Joint:SetFriction ": {
"prefix": "Joint:SetFriction ",
"description": "This function is used to set the friction level for a hinge or kinematic joint.",
"body": ["SetFriction($number_angularfriction, $number_linearfriction)"]
},
"SetFriction  ": {
"prefix": "SetFriction  ",
"description": "This function is used to set the friction level for a hinge or kinematic joint.",
"body": ["SetFriction($number_angularfriction, $number_linearfriction)"]
},
"Joint:SetLimits": {
"prefix": "Joint:SetLimits",
"description": "This functions sets the limits of a joint. The joint must have limits enabled using the EnableLimits command for this to have any effect.",
"body": ["SetLimits($number_limit0, $number_limit1)"]
},
"SetLimits": {
"prefix": "SetLimits",
"description": "This functions sets the limits of a joint. The joint must have limits enabled using the EnableLimits command for this to have any effect.",
"body": ["SetLimits($number_limit0, $number_limit1)"]
},
"Joint:SetMotorSpeed": {
"prefix": "Joint:SetMotorSpeed",
"description": "This sets the speed at which a hinge or slider actuator moves towards its target angle or position.",
"body": ["SetMotorSpeed($number_speed)"]
},
"SetMotorSpeed": {
"prefix": "SetMotorSpeed",
"description": "This sets the speed at which a hinge or slider actuator moves towards its target angle or position.",
"body": ["SetMotorSpeed($number_speed)"]
},
"Joint:SetSpring": {
"prefix": "Joint:SetSpring",
"description": "This function sets the spring value of a slider or hinge joint. A value of zero will disable the spring behavior.",
"body": ["SetSpring($number_spring)"]
},
"SetSpring": {
"prefix": "SetSpring",
"description": "This function sets the spring value of a slider or hinge joint. A value of zero will disable the spring behavior.",
"body": ["SetSpring($number_spring)"]
},
"Joint:SetTargetAngle": {
"prefix": "Joint:SetTargetAngle",
"description": "This function sets the angle a joint motor will move towards. The joint motor must be enabled with the EnableMotor command for this to have any effect.",
"body": ["SetTargetAngle($number_angle)"]
},
"SetTargetAngle": {
"prefix": "SetTargetAngle",
"description": "This function sets the angle a joint motor will move towards. The joint motor must be enabled with the EnableMotor command for this to have any effect.",
"body": ["SetTargetAngle($number_angle)"]
},
"Joint:SetTargetPosition": {
"prefix": "Joint:SetTargetPosition",
"description": "This function is used to set the position a kinematic joint moves the attached entity to.",
"body": ["SetTargetPosition($number_x, $number_y, $number_z, $number_blend=0.5)"]
},
"SetTargetPosition": {
"prefix": "SetTargetPosition",
"description": "This function is used to set the position a kinematic joint moves the attached entity to.",
"body": ["SetTargetPosition($number_x, $number_y, $number_z, $number_blend=0.5)"]
},
"Joint:SetTargetPosition ": {
"prefix": "Joint:SetTargetPosition ",
"description": "This function is used to set the position a kinematic joint moves the attached entity to.",
"body": ["SetTargetPosition($Vec3_position, $number_blend=0.5)"]
},
"SetTargetPosition ": {
"prefix": "SetTargetPosition ",
"description": "This function is used to set the position a kinematic joint moves the attached entity to.",
"body": ["SetTargetPosition($Vec3_position, $number_blend=0.5)"]
},
"Joint:SetTargetRotation": {
"prefix": "Joint:SetTargetRotation",
"description": "This function is used to set the rotation a kinematic joint turns the attached entity to.",
"body": ["SetTargetRotation($number_x, $number_y, $number_z, $number_blend=0.5)"]
},
"SetTargetRotation": {
"prefix": "SetTargetRotation",
"description": "This function is used to set the rotation a kinematic joint turns the attached entity to.",
"body": ["SetTargetRotation($number_x, $number_y, $number_z, $number_blend=0.5)"]
},
"Joint:SetTargetRotation ": {
"prefix": "Joint:SetTargetRotation ",
"description": "This function is used to set the rotation a kinematic joint turns the attached entity to.",
"body": ["SetTargetRotation($Vec3_rotation, $number_blend=0.5)"]
},
"SetTargetRotation ": {
"prefix": "SetTargetRotation ",
"description": "This function is used to set the rotation a kinematic joint turns the attached entity to.",
"body": ["SetTargetRotation($Vec3_rotation, $number_blend=0.5)"]
},
"Joint:SetTargetMatrix": {
"prefix": "Joint:SetTargetMatrix",
"description": "This function is used to set the matrix a kinematic joint uses to orient the attached entity.",
"body": ["SetTargetMatrix($Mat4_matrix)"]
},
"SetTargetMatrix": {
"prefix": "SetTargetMatrix",
"description": "This function is used to set the matrix a kinematic joint uses to orient the attached entity.",
"body": ["SetTargetMatrix($Mat4_matrix)"]
},
"Joint:Slider": {
"prefix": "Joint:Slider",
"description": "static Joint* Slider(float posx, float posy, float posz, float pinx, float piny, float pinz, Entity* child, Entity* parent=NULL)",
"body": ["Shape PolyMesh($Surface_surface)"]
},
"Slider": {
"prefix": "Slider",
"description": "static Joint* Slider(float posx, float posy, float posz, float pinx, float piny, float pinz, Entity* child, Entity* parent=NULL)",
"body": ["Shape PolyMesh($Surface_surface)"]
},
"Map:Load": {
"prefix": "Map:Load",
"description": "This function loads a Leadwerks map (*.map) file.",
"body": ["bool Load($string_path, $number_flags=LoadScripts)"]
},
"Load     ": {
"prefix": "Load     ",
"description": "This function loads a Leadwerks map (*.map) file.",
"body": ["bool Load($string_path, $number_flags=LoadScripts)"]
},
"Map:Load ": {
"prefix": "Map:Load ",
"description": "This function loads a Leadwerks map (*.map) file.",
"body": ["bool Load($string_path, $hook(Entity_entity, $Object_extra), Object extra=NULL, number flags=LoadScripts);"]
},
"Load      ": {
"prefix": "Load      ",
"description": "This function loads a Leadwerks map (*.map) file.",
"body": ["bool Load($string_path, $hook(Entity_entity, $Object_extra), Object extra=NULL, number flags=LoadScripts);"]
},
"Map:Load  ": {
"prefix": "Map:Load  ",
"description": "This function loads a Leadwerks map (*.map) file.",
"body": ["bool Load($string_path, $string_hookname, $Object_extra=NULL, $number_flags=LoadScripts);"]
},
"Load       ": {
"prefix": "Load       ",
"description": "This function loads a Leadwerks map (*.map) file.",
"body": ["bool Load($string_path, $string_hookname, $Object_extra=NULL, $number_flags=LoadScripts);"]
},
"AABB:DistanceToPoint": {
"prefix": "AABB:DistanceToPoint",
"description": "This function returns the shortest distance between the point and the AABB.",
"body": ["number DistanceToPoint($Vec3_point, $number_radius=0)"]
},
"DistanceToPoint": {
"prefix": "DistanceToPoint",
"description": "This function returns the shortest distance between the point and the AABB.",
"body": ["number DistanceToPoint($Vec3_point, $number_radius=0)"]
},
"AABB:IntersectsPlane": {
"prefix": "AABB:IntersectsPlane",
"description": "This function performs an intersection test between an AABB and a plane.",
"body": ["number IntersectsPlane($Plane_plane)"]
},
"IntersectsPlane": {
"prefix": "IntersectsPlane",
"description": "This function performs an intersection test between an AABB and a plane.",
"body": ["number IntersectsPlane($Plane_plane)"]
},
"AABB:IntersectsPoint": {
"prefix": "AABB:IntersectsPoint",
"description": "This function performs an intersection test between an AABB and a point.",
"body": ["bool IntersectsPoint($Vec3_p, $number_radius=0)"]
},
"IntersectsPoint": {
"prefix": "IntersectsPoint",
"description": "This function performs an intersection test between an AABB and a point.",
"body": ["bool IntersectsPoint($Vec3_p, $number_radius=0)"]
},
"AABB:IntersectsRay": {
"prefix": "AABB:IntersectsRay",
"description": "This function performs an intersection test between an AABB and a line.",
"body": ["bool IntersectsLine($Vec3_p0, $Vec3_p1, $number_radius=0.0)"]
},
"IntersectsRay": {
"prefix": "IntersectsRay",
"description": "This function performs an intersection test between an AABB and a line.",
"body": ["bool IntersectsLine($Vec3_p0, $Vec3_p1, $number_radius=0.0)"]
},
"AABB:Update": {
"prefix": "AABB:Update",
"description": "This function will update an AABB's center, dimensions, and radius, given its minimum and maximum extents.",
"body": ["Update()"]
},
"Update ": {
"prefix": "Update ",
"description": "This function will update an AABB's center, dimensions, and radius, given its minimum and maximum extents.",
"body": ["Update()"]
},
"Mat3:Inverse": {
"prefix": "Mat3:Inverse",
"description": "This function returns the inverse matrix.",
"body": ["Mat3 Inverse()"]
},
"Inverse": {
"prefix": "Inverse",
"description": "This function returns the inverse matrix.",
"body": ["Mat3 Inverse()"]
},
"Mat3:Transpose": {
"prefix": "Mat3:Transpose",
"description": "This function returns the transpose matrix.",
"body": ["Mat3 Transpose()"]
},
"Transpose": {
"prefix": "Transpose",
"description": "This function returns the transpose matrix.",
"body": ["Mat3 Transpose()"]
},
"Mat4:Inverse": {
"prefix": "Mat4:Inverse",
"description": "This function returns the inverse matrix.",
"body": ["Mat4 Inverse()"]
},
"Inverse ": {
"prefix": "Inverse ",
"description": "This function returns the inverse matrix.",
"body": ["Mat4 Inverse()"]
},
"Mat4:Transpose": {
"prefix": "Mat4:Transpose",
"description": "This function returns the transpose matrix.",
"body": ["Mat4 Transpose()"]
},
"Transpose ": {
"prefix": "Transpose ",
"description": "This function returns the transpose matrix.",
"body": ["Mat4 Transpose()"]
},
"Plane:DistanceToPoint": {
"prefix": "Plane:DistanceToPoint",
"description": "This function returns the shortest distance between a plane and a point in space. If the distance is less then one, the point is behind the plane. If the distance is greater than one, the point is in front of the plane. If the distance is zero, the point lies directly on the plane.",
"body": ["number DistanceToPoint($Vec3_p)"]
},
"DistanceToPoint ": {
"prefix": "DistanceToPoint ",
"description": "This function returns the shortest distance between a plane and a point in space. If the distance is less then one, the point is behind the plane. If the distance is greater than one, the point is in front of the plane. If the distance is zero, the point lies directly on the plane.",
"body": ["number DistanceToPoint($Vec3_p)"]
},
"Plane:DistanceToPoint ": {
"prefix": "Plane:DistanceToPoint ",
"description": "This function returns the shortest distance between a plane and a point in space. If the distance is less then one, the point is behind the plane. If the distance is greater than one, the point is in front of the plane. If the distance is zero, the point lies directly on the plane.",
"body": ["number DistanceToPoint($number_x, $number_y, $number_z)"]
},
"DistanceToPoint  ": {
"prefix": "DistanceToPoint  ",
"description": "This function returns the shortest distance between a plane and a point in space. If the distance is less then one, the point is behind the plane. If the distance is greater than one, the point is in front of the plane. If the distance is zero, the point lies directly on the plane.",
"body": ["number DistanceToPoint($number_x, $number_y, $number_z)"]
},
"Plane:GetNormal": {
"prefix": "Plane:GetNormal",
"description": "This function returns a plane's normal, which is the direction it faces.",
"body": ["Vec3 GetNormal()"]
},
"GetNormal": {
"prefix": "GetNormal",
"description": "This function returns a plane's normal, which is the direction it faces.",
"body": ["Vec3 GetNormal()"]
},
"Plane:IntersectsLine": {
"prefix": "Plane:IntersectsLine",
"description": "This function performs an intersection test between a plane and a line in space.",
"body": ["bool IntersectsLine($Vec3_p0, $Vec3_p1, $Vec3_result)"]
},
"IntersectsLine": {
"prefix": "IntersectsLine",
"description": "This function performs an intersection test between a plane and a line in space.",
"body": ["bool IntersectsLine($Vec3_p0, $Vec3_p1, $Vec3_result)"]
},
"Plane:Inverse": {
"prefix": "Plane:Inverse",
"description": "This function returns a plane with the same distance from the origin, but facing in the reverse direction.",
"body": ["Plane Inverse()"]
},
"Inverse  ": {
"prefix": "Inverse  ",
"description": "This function returns a plane with the same distance from the origin, but facing in the reverse direction.",
"body": ["Plane Inverse()"]
},
"Quat:Slerp": {
"prefix": "Quat:Slerp",
"description": "'Slerp' is shorthand for for Spherical Linear Interpolation. This command provides a way to smoothly interpolate between two arbitrary quaternion rotations. This provides accurate results when dealing with rotations on multiple axes.",
"body": ["Quat Slerp($Quat_target, $number_distance)"]
},
"Slerp": {
"prefix": "Slerp",
"description": "'Slerp' is shorthand for for Spherical Linear Interpolation. This command provides a way to smoothly interpolate between two arbitrary quaternion rotations. This provides accurate results when dealing with rotations on multiple axes.",
"body": ["Quat Slerp($Quat_target, $number_distance)"]
},
"Transform:Normal": {
"prefix": "Transform:Normal",
"description": "This function transforms a normal from one space to another. It will give the same results as Transform::Vector except the resulting vector will be normalized.",
"body": ["Vec3 Normal($Vec3_normal, $Entity_src, $Entity_dst)"]
},
"Normal": {
"prefix": "Normal",
"description": "This function transforms a normal from one space to another. It will give the same results as Transform::Vector except the resulting vector will be normalized.",
"body": ["Vec3 Normal($Vec3_normal, $Entity_src, $Entity_dst)"]
},
"Transform:Normal ": {
"prefix": "Transform:Normal ",
"description": "This function transforms a normal from one space to another. It will give the same results as Transform::Vector except the resulting vector will be normalized.",
"body": ["Vec3 Normal($number_x, $number_y, $number_z, $Entity_src, $Entity_dst)"]
},
"Normal ": {
"prefix": "Normal ",
"description": "This function transforms a normal from one space to another. It will give the same results as Transform::Vector except the resulting vector will be normalized.",
"body": ["Vec3 Normal($number_x, $number_y, $number_z, $Entity_src, $Entity_dst)"]
},
"Transform:Normal  ": {
"prefix": "Transform:Normal  ",
"description": "This function transforms a normal from one space to another. It will give the same results as Transform::Vector except the resulting vector will be normalized.",
"body": ["Vec3 Normal($Vec3_normal, $Mat4_src, $Mat4_dst)"]
},
"Normal  ": {
"prefix": "Normal  ",
"description": "This function transforms a normal from one space to another. It will give the same results as Transform::Vector except the resulting vector will be normalized.",
"body": ["Vec3 Normal($Vec3_normal, $Mat4_src, $Mat4_dst)"]
},
"Transform:Normal   ": {
"prefix": "Transform:Normal   ",
"description": "This function transforms a normal from one space to another. It will give the same results as Transform::Vector except the resulting vector will be normalized.",
"body": ["Vec3 Normal($number_x, $number_y, $number_z, $Mat4_src, $Mat4_dst)"]
},
"Normal   ": {
"prefix": "Normal   ",
"description": "This function transforms a normal from one space to another. It will give the same results as Transform::Vector except the resulting vector will be normalized.",
"body": ["Vec3 Normal($number_x, $number_y, $number_z, $Mat4_src, $Mat4_dst)"]
},
"Transform:Plane": {
"prefix": "Transform:Plane",
"description": "This function transforms a plane from one space to another.",
"body": ["Plane Plane($Plane_plane, $Entity_src, $Entity_dst)"]
},
"Plane": {
"prefix": "Plane",
"description": "This function transforms a plane from one space to another.",
"body": ["Plane Plane($Plane_plane, $Entity_src, $Entity_dst)"]
},
"Transform:Plane ": {
"prefix": "Transform:Plane ",
"description": "This function transforms a plane from one space to another.",
"body": ["Plane Plane($Plane_plane, $Mat4_src, $Mat4_dst)"]
},
"Plane ": {
"prefix": "Plane ",
"description": "This function transforms a plane from one space to another.",
"body": ["Plane Plane($Plane_plane, $Mat4_src, $Mat4_dst)"]
},
"Transform:Plane  ": {
"prefix": "Transform:Plane  ",
"description": "This function transforms a plane from one space to another.",
"body": ["Plane Plane($number_x, $number_y, $number_z, $number_w, $Entity_src, $Entity_dst)"]
},
"Plane  ": {
"prefix": "Plane  ",
"description": "This function transforms a plane from one space to another.",
"body": ["Plane Plane($number_x, $number_y, $number_z, $number_w, $Entity_src, $Entity_dst)"]
},
"Transform:Plane   ": {
"prefix": "Transform:Plane   ",
"description": "This function transforms a plane from one space to another.",
"body": ["Plane Plane($number_x, $number_y, $number_z, $number_w, $Mat4_src, $Mat4_dst)"]
},
"Plane   ": {
"prefix": "Plane   ",
"description": "This function transforms a plane from one space to another.",
"body": ["Plane Plane($number_x, $number_y, $number_z, $number_w, $Mat4_src, $Mat4_dst)"]
},
"Transform:Point": {
"prefix": "Transform:Point",
"description": "This function transforms a point from one space to another.",
"body": ["Vec3 Point($Vec3_point, $Entity_src, $Entity_dst)"]
},
"Point ": {
"prefix": "Point ",
"description": "This function transforms a point from one space to another.",
"body": ["Vec3 Point($Vec3_point, $Entity_src, $Entity_dst)"]
},
"Transform:Point ": {
"prefix": "Transform:Point ",
"description": "This function transforms a point from one space to another.",
"body": ["Vec3 Point($number_x, $number_y, $number_z, $Entity_src, $Entity_dst)"]
},
"Point  ": {
"prefix": "Point  ",
"description": "This function transforms a point from one space to another.",
"body": ["Vec3 Point($number_x, $number_y, $number_z, $Entity_src, $Entity_dst)"]
},
"Transform:Point  ": {
"prefix": "Transform:Point  ",
"description": "This function transforms a point from one space to another.",
"body": ["Vec3 Point($Vec3_point, $Mat4_src, $Mat4_dst)"]
},
"Point   ": {
"prefix": "Point   ",
"description": "This function transforms a point from one space to another.",
"body": ["Vec3 Point($Vec3_point, $Mat4_src, $Mat4_dst)"]
},
"Transform:Point   ": {
"prefix": "Transform:Point   ",
"description": "This function transforms a point from one space to another.",
"body": ["Vec3 Point($number_x, $number_y, $number_z, $Mat4_src, $Mat4_dst)"]
},
"Point    ": {
"prefix": "Point    ",
"description": "This function transforms a point from one space to another.",
"body": ["Vec3 Point($number_x, $number_y, $number_z, $Mat4_src, $Mat4_dst)"]
},
"Transform:Rotation": {
"prefix": "Transform:Rotation",
"description": "This function transforms a Euler rotation from one space to another.",
"body": ["Vec3 Rotation($Vec3_rotation, $Entity_src, $Entity_dst)"]
},
"Rotation": {
"prefix": "Rotation",
"description": "This function transforms a Euler rotation from one space to another.",
"body": ["Vec3 Rotation($Vec3_rotation, $Entity_src, $Entity_dst)"]
},
"Transform:Rotation ": {
"prefix": "Transform:Rotation ",
"description": "This function transforms a Euler rotation from one space to another.",
"body": ["Vec3 Rotation($number_pitch, $number_yaw, $number_roll, $Entity_src, $Entity_dst)"]
},
"Rotation ": {
"prefix": "Rotation ",
"description": "This function transforms a Euler rotation from one space to another.",
"body": ["Vec3 Rotation($number_pitch, $number_yaw, $number_roll, $Entity_src, $Entity_dst)"]
},
"Transform:Rotation  ": {
"prefix": "Transform:Rotation  ",
"description": "This function transforms a Euler rotation from one space to another.",
"body": ["Quat Rotation($Quat_rotation, $Entity_src, $Entity_dst)"]
},
"Rotation  ": {
"prefix": "Rotation  ",
"description": "This function transforms a Euler rotation from one space to another.",
"body": ["Quat Rotation($Quat_rotation, $Entity_src, $Entity_dst)"]
},
"Transform:Rotation   ": {
"prefix": "Transform:Rotation   ",
"description": "This function transforms a Euler rotation from one space to another.",
"body": ["Vec3 Rotation($Vec3_rotation, $Mat4_src, $Mat4_dst)"]
},
"Rotation   ": {
"prefix": "Rotation   ",
"description": "This function transforms a Euler rotation from one space to another.",
"body": ["Vec3 Rotation($Vec3_rotation, $Mat4_src, $Mat4_dst)"]
},
"Transform:Rotation    ": {
"prefix": "Transform:Rotation    ",
"description": "This function transforms a Euler rotation from one space to another.",
"body": ["Vec3 Rotation($number_pitch, $number_yaw, $number_roll, $Mat4_src, $Mat4_dst)"]
},
"Rotation    ": {
"prefix": "Rotation    ",
"description": "This function transforms a Euler rotation from one space to another.",
"body": ["Vec3 Rotation($number_pitch, $number_yaw, $number_roll, $Mat4_src, $Mat4_dst)"]
},
"Transform:Rotation     ": {
"prefix": "Transform:Rotation     ",
"description": "This function transforms a Euler rotation from one space to another.",
"body": ["Quat Rotation($Quat_rotation, $Mat4_src, $Mat4_dst)"]
},
"Rotation     ": {
"prefix": "Rotation     ",
"description": "This function transforms a Euler rotation from one space to another.",
"body": ["Quat Rotation($Quat_rotation, $Mat4_src, $Mat4_dst)"]
},
"Transform:Vector": {
"prefix": "Transform:Vector",
"description": "This function transforms a vector from one space to another.",
"body": ["Vec3 Vector($Vec3_vector, $Entity_src, $Entity_dst)"]
},
"Vector": {
"prefix": "Vector",
"description": "This function transforms a vector from one space to another.",
"body": ["Vec3 Vector($Vec3_vector, $Entity_src, $Entity_dst)"]
},
"Transform:Vector ": {
"prefix": "Transform:Vector ",
"description": "This function transforms a vector from one space to another.",
"body": ["Vec3 Vector($number_x, $number_y, $number_z, $Entity_src, $Entity_dst)"]
},
"Vector ": {
"prefix": "Vector ",
"description": "This function transforms a vector from one space to another.",
"body": ["Vec3 Vector($number_x, $number_y, $number_z, $Entity_src, $Entity_dst)"]
},
"Transform:Vector  ": {
"prefix": "Transform:Vector  ",
"description": "This function transforms a vector from one space to another.",
"body": ["Vec3 Vector($Vec3_vector, $Mat4_src, $Mat4_dst)"]
},
"Vector  ": {
"prefix": "Vector  ",
"description": "This function transforms a vector from one space to another.",
"body": ["Vec3 Vector($Vec3_vector, $Mat4_src, $Mat4_dst)"]
},
"Transform:Vector   ": {
"prefix": "Transform:Vector   ",
"description": "This function transforms a vector from one space to another.",
"body": ["Vec3 Vector($number_x, $number_y, $number_z, $Mat4_src, $Mat4_dst)"]
},
"Vector   ": {
"prefix": "Vector   ",
"description": "This function transforms a vector from one space to another.",
"body": ["Vec3 Vector($number_x, $number_y, $number_z, $Mat4_src, $Mat4_dst)"]
},
"Vec3:Cross": {
"prefix": "Vec3:Cross",
"description": "This function returns the cross product of two vectors.",
"body": ["Vec3 Cross($Vec3_v)"]
},
"Cross": {
"prefix": "Cross",
"description": "This function returns the cross product of two vectors.",
"body": ["Vec3 Cross($Vec3_v)"]
},
"Vec3:DistanceToPoint": {
"prefix": "Vec3:DistanceToPoint",
"description": "This function returns the distance between two positions in space.",
"body": ["number DistanceToPoint($Vec3_p)"]
},
"DistanceToPoint   ": {
"prefix": "DistanceToPoint   ",
"description": "This function returns the distance between two positions in space.",
"body": ["number DistanceToPoint($Vec3_p)"]
},
"Vec3:Dot": {
"prefix": "Vec3:Dot",
"description": "This function returns the dot product of two vectors.",
"body": ["number Dot($Vec3_v)"]
},
"Dot": {
"prefix": "Dot",
"description": "This function returns the dot product of two vectors.",
"body": ["number Dot($Vec3_v)"]
},
"Vec3:Inverse": {
"prefix": "Vec3:Inverse",
"description": "This function will return the inverse vector; each vector component will be multiplied by -1.",
"body": ["Vec3 Inverse()"]
},
"Inverse   ": {
"prefix": "Inverse   ",
"description": "This function will return the inverse vector; each vector component will be multiplied by -1.",
"body": ["Vec3 Inverse()"]
},
"Vec3:Length": {
"prefix": "Vec3:Length",
"description": "This function returns the length of a vector.",
"body": ["number Length()"]
},
"Length": {
"prefix": "Length",
"description": "This function returns the length of a vector.",
"body": ["number Length()"]
},
"Vec3:Normalize": {
"prefix": "Vec3:Normalize",
"description": "This function returns a normalized vector. The resulting vector will have a length of 1.",
"body": ["Vec3 Normalize()"]
},
"Normalize": {
"prefix": "Normalize",
"description": "This function returns a normalized vector. The resulting vector will have a length of 1.",
"body": ["Vec3 Normalize()"]
},
"Vec3:xy": {
"prefix": "Vec3:xy",
"description": "This function gets the X and Y components of a vector.",
"body": ["Vec2 xy()"]
},
"xy": {
"prefix": "xy",
"description": "This function gets the X and Y components of a vector.",
"body": ["Vec2 xy()"]
},
"Vec3:xz": {
"prefix": "Vec3:xz",
"description": "This function gets the X and Z components of a vector.",
"body": ["Vec2 xz()"]
},
"xz": {
"prefix": "xz",
"description": "This function gets the X and Z components of a vector.",
"body": ["Vec2 xz()"]
},
"Vec3:zy": {
"prefix": "Vec3:zy",
"description": "This function gets the Z and Y components of a vector.",
"body": ["Vec2 zy()"]
},
"zy": {
"prefix": "zy",
"description": "This function gets the Z and Y components of a vector.",
"body": ["Vec2 zy()"]
},
"Vec4:xy": {
"prefix": "Vec4:xy",
"description": "This function gets the X and Y components of a vector.",
"body": ["Vec2 xy()"]
},
"xy ": {
"prefix": "xy ",
"description": "This function gets the X and Y components of a vector.",
"body": ["Vec2 xy()"]
},
"Vec4:xyz": {
"prefix": "Vec4:xyz",
"description": "This function gets the X, Y, and Z components of a vector.",
"body": ["Vec3 xyz()"]
},
"xyz": {
"prefix": "xyz",
"description": "This function gets the X, Y, and Z components of a vector.",
"body": ["Vec3 xyz()"]
},
"Math:ACos": {
"prefix": "Math:ACos",
"description": "This function returns the arccosine of an angle.",
"body": ["number ACos($number_a)"]
},
"ACos": {
"prefix": "ACos",
"description": "This function returns the arccosine of an angle.",
"body": ["number ACos($number_a)"]
},
"Math:ASin": {
"prefix": "Math:ASin",
"description": "This function returns the arcsine of an angle.",
"body": ["number ASin($number_a)"]
},
"ASin": {
"prefix": "ASin",
"description": "This function returns the arcsine of an angle.",
"body": ["number ASin($number_a)"]
},
"Math:ATan": {
"prefix": "Math:ATan",
"description": "This function returns the arctangent of an angle.",
"body": ["number ATan($number_a)"]
},
"ATan": {
"prefix": "ATan",
"description": "This function returns the arctangent of an angle.",
"body": ["number ATan($number_a)"]
},
"Math:ATan2": {
"prefix": "Math:ATan2",
"description": "This function gets angle a 2D point forms relative to the origin.",
"body": ["number ATan2($number_y, $number_x)"]
},
"ATan2": {
"prefix": "ATan2",
"description": "This function gets angle a 2D point forms relative to the origin.",
"body": ["number ATan2($number_y, $number_x)"]
},
"Math:Clamp": {
"prefix": "Math:Clamp",
"description": "This function clamps a number between a minimum and maximum limit and returns the result.",
"body": ["number Clamp($number_f, $number_min=0, $number_max=1)"]
},
"Clamp": {
"prefix": "Clamp",
"description": "This function clamps a number between a minimum and maximum limit and returns the result.",
"body": ["number Clamp($number_f, $number_min=0, $number_max=1)"]
},
"Math:Cos": {
"prefix": "Math:Cos",
"description": "This function returns the cosine of an angle.",
"body": ["number Cos($number_a)"]
},
"Cos": {
"prefix": "Cos",
"description": "This function returns the cosine of an angle.",
"body": ["number Cos($number_a)"]
},
"Math:Curve": {
"prefix": "Math:Curve",
"description": "This function returns an value interpolated between a current and target value.",
"body": ["number Curve($number_target, $number_current, $number_divisions)"]
},
"Curve": {
"prefix": "Curve",
"description": "This function returns an value interpolated between a current and target value.",
"body": ["number Curve($number_target, $number_current, $number_divisions)"]
},
"Math:CurveAngle": {
"prefix": "Math:CurveAngle",
"description": "This function returns an value interpolated between a current and target angle.",
"body": ["number CurveAngle($number_target, $number_current, $number_divisions)"]
},
"CurveAngle": {
"prefix": "CurveAngle",
"description": "This function returns an value interpolated between a current and target angle.",
"body": ["number CurveAngle($number_target, $number_current, $number_divisions)"]
},
"Math:Degrees": {
"prefix": "Math:Degrees",
"description": "This function converts an angle in radians to degrees.",
"body": ["number Degrees($number_a)"]
},
"Degrees": {
"prefix": "Degrees",
"description": "This function converts an angle in radians to degrees.",
"body": ["number Degrees($number_a)"]
},
"Math:DeltaAngle": {
"prefix": "Math:DeltaAngle",
"description": "This function returns the shortest distance between the two angles, relative to the first angle.",
"body": ["number DeltaAngle($number_angle0, $number_angle1)"]
},
"DeltaAngle": {
"prefix": "DeltaAngle",
"description": "This function returns the shortest distance between the two angles, relative to the first angle.",
"body": ["number DeltaAngle($number_angle0, $number_angle1)"]
},
"Math:Hex": {
"prefix": "Math:Hex",
"description": "This function converts a number to a hexadecimal value.",
"body": ["string Hex($number_n)"]
},
"Hex": {
"prefix": "Hex",
"description": "This function converts a number to a hexadecimal value.",
"body": ["string Hex($number_n)"]
},
"Math:Inc": {
"prefix": "Math:Inc",
"description": "This function can be used to move a value steadily towards a target value at a specified rate. The return value will stop changing when it reaches the target value.",
"body": ["number Inc($number_target, $number_current, $number_increments)"]
},
"Inc": {
"prefix": "Inc",
"description": "This function can be used to move a value steadily towards a target value at a specified rate. The return value will stop changing when it reaches the target value.",
"body": ["number Inc($number_target, $number_current, $number_increments)"]
},
"Math:Lerp": {
"prefix": "Math:Lerp",
"description": "This function performs a linear interpolation between two values. The amount value controls what percent of the start and stop values the returned value consists of.",
"body": ["number Lerp($number_start, $number_stop, $number_amount)"]
},
"Lerp": {
"prefix": "Lerp",
"description": "This function performs a linear interpolation between two values. The amount value controls what percent of the start and stop values the returned value consists of.",
"body": ["number Lerp($number_start, $number_stop, $number_amount)"]
},
"Math:Log2": {
"prefix": "Math:Log2",
"description": "This function returns the binary logarithm of a value. For example, 2^8 = 256, and Log2(256) = 8.",
"body": ["number Log2($number_f)"]
},
"Log2": {
"prefix": "Log2",
"description": "This function returns the binary logarithm of a value. For example, 2^8 = 256, and Log2(256) = 8.",
"body": ["number Log2($number_f)"]
},
"Math:Max": {
"prefix": "Math:Max",
"description": "This function returns the maxima of the two input values.",
"body": ["number Max($number_f0, $number_f1)"]
},
"Max": {
"prefix": "Max",
"description": "This function returns the maxima of the two input values.",
"body": ["number Max($number_f0, $number_f1)"]
},
"Math:Min": {
"prefix": "Math:Min",
"description": "This function returns the minima of the two input values.",
"body": ["number Min($number_f0, $number_f1)"]
},
"Min": {
"prefix": "Min",
"description": "This function returns the minima of the two input values.",
"body": ["number Min($number_f0, $number_f1)"]
},
"Math:Mod": {
"prefix": "Math:Mod",
"description": "This function returns the modulus. The modulus operation divides num by div until num is less than div. This is useful for values that wrap, like the number of minutes on the hour.",
"body": ["number Mod($number_num, $number_div)"]
},
"Mod": {
"prefix": "Mod",
"description": "This function returns the modulus. The modulus operation divides num by div until num is less than div. This is useful for values that wrap, like the number of minutes on the hour.",
"body": ["number Mod($number_num, $number_div)"]
},
"Math:Pow2": {
"prefix": "Math:Pow2",
"description": "This function rounds a value off to the nearest power of two number. For example, Pow2(254) will return 256.",
"body": ["number Pow2($number_f)"]
},
"Pow2": {
"prefix": "Pow2",
"description": "This function rounds a value off to the nearest power of two number. For example, Pow2(254) will return 256.",
"body": ["number Pow2($number_f)"]
},
"Math:Radians": {
"prefix": "Math:Radians",
"description": "This function converts degrees to radians.",
"body": ["number Radians($number_a)"]
},
"Radians": {
"prefix": "Radians",
"description": "This function converts degrees to radians.",
"body": ["number Radians($number_a)"]
},
"Math:Random": {
"prefix": "Math:Random",
"description": "This function returns a random number.",
"body": ["number Random($number_min=0, $number_max=1)"]
},
"Random": {
"prefix": "Random",
"description": "This function returns a random number.",
"body": ["number Random($number_min=0, $number_max=1)"]
},
"Math:Round": {
"prefix": "Math:Round",
"description": "This function rounds a decimal value off to the nearest integer.",
"body": ["number Round($number_f)"]
},
"Round": {
"prefix": "Round",
"description": "This function rounds a decimal value off to the nearest integer.",
"body": ["number Round($number_f)"]
},
"Math:Sgn": {
"prefix": "Math:Sgn",
"description": "This function returns the sign of the input value.",
"body": ["number Sgn($number_f)"]
},
"Sgn": {
"prefix": "Sgn",
"description": "This function returns the sign of the input value.",
"body": ["number Sgn($number_f)"]
},
"Math:Sin": {
"prefix": "Math:Sin",
"description": "This function returns the sine of an angle.",
"body": ["number Degrees($number_a)"]
},
"Sin": {
"prefix": "Sin",
"description": "This function returns the sine of an angle.",
"body": ["number Degrees($number_a)"]
},
"Math:Tan": {
"prefix": "Math:Tan",
"description": "This function returns the tangent of an angle.",
"body": ["number Tan($number_a)"]
},
"Tan": {
"prefix": "Tan",
"description": "This function returns the tangent of an angle.",
"body": ["number Tan($number_a)"]
},
"Mutex:Create": {
"prefix": "Mutex:Create",
"description": "This function creates and returns a new mutex.",
"body": ["Mutex Create()"]
},
"Create                 ": {
"prefix": "Create                 ",
"description": "This function creates and returns a new mutex.",
"body": ["Mutex Create()"]
},
"Mutex:Lock": {
"prefix": "Mutex:Lock",
"description": "This function locks a mutex. When a mutex is locked, other threads that lock the mutex will pause until the locking thread calls Mutex::Unlock().",
"body": ["Lock()"]
},
"Lock": {
"prefix": "Lock",
"description": "This function locks a mutex. When a mutex is locked, other threads that lock the mutex will pause until the locking thread calls Mutex::Unlock().",
"body": ["Lock()"]
},
"Mutex:Unlock": {
"prefix": "Mutex:Unlock",
"description": "This function unlocks a mutex. When a mutex is locked, other threads that lock the mutex will pause until the locking thread calls Mutex::Unlock().",
"body": ["Unlock()"]
},
"Unlock": {
"prefix": "Unlock",
"description": "This function unlocks a mutex. When a mutex is locked, other threads that lock the mutex will pause until the locking thread calls Mutex::Unlock().",
"body": ["Unlock()"]
},
"Prefab:Load": {
"prefix": "Prefab:Load",
"description": "This function loads a prefab from a .pfb prefab file. When the prefab is loaded, any entities in the hierarchy with a script attached to them will have the Start() function called.",
"body": ["Entity Load($string_path, $number_flags=Map.LoadScripts)"]
},
"Load        ": {
"prefix": "Load        ",
"description": "This function loads a prefab from a .pfb prefab file. When the prefab is loaded, any entities in the hierarchy with a script attached to them will have the Start() function called.",
"body": ["Entity Load($string_path, $number_flags=Map.LoadScripts)"]
},
"Server:Broadcast": {
"prefix": "Server:Broadcast",
"description": "This function sends a message to all connected clients.",
"body": ["boolean Broadcast($const_int_message, $string_text, $number_channel=0, $number_flags=0)"]
},
"Broadcast": {
"prefix": "Broadcast",
"description": "This function sends a message to all connected clients.",
"body": ["boolean Broadcast($const_int_message, $string_text, $number_channel=0, $number_flags=0)"]
},
"Server:Broadcast ": {
"prefix": "Server:Broadcast ",
"description": "This function sends a message to all connected clients.",
"body": ["boolean Broadcast($const_int_message, $Bank_bank, $number_channel=0, $number_flags=0)"]
},
"Broadcast ": {
"prefix": "Broadcast ",
"description": "This function sends a message to all connected clients.",
"body": ["boolean Broadcast($const_int_message, $Bank_bank, $number_channel=0, $number_flags=0)"]
},
"Server:Create": {
"prefix": "Server:Create",
"description": "This function creates a new server for hosting games.",
"body": ["Server Create($number_port=8888)"]
},
"Create                  ": {
"prefix": "Create                  ",
"description": "This function creates a new server for hosting games.",
"body": ["Server Create($number_port=8888)"]
},
"Server:Disconnect": {
"prefix": "Server:Disconnect",
"description": "This function disconnects a client from the server.",
"body": ["Disconnect($Peer_peer, $boolean_force_=_false)"]
},
"Disconnect ": {
"prefix": "Disconnect ",
"description": "This function disconnects a client from the server.",
"body": ["Disconnect($Peer_peer, $boolean_force_=_false)"]
},
"Server:Send": {
"prefix": "Server:Send",
"description": "This function sends a message to a specific client.",
"body": ["boolean Send($Peer_client, $const_int_message, $string_text, $number_channel=0, $number_flags=0)"]
},
"Send  ": {
"prefix": "Send  ",
"description": "This function sends a message to a specific client.",
"body": ["boolean Send($Peer_client, $const_int_message, $string_text, $number_channel=0, $number_flags=0)"]
},
"Server:Send ": {
"prefix": "Server:Send ",
"description": "This function sends a message to a specific client.",
"body": ["boolean Send($Peer_client, $const_int_message, $Bank_bank, $number_channel=0, $number_flags=0)"]
},
"Send   ": {
"prefix": "Send   ",
"description": "This function sends a message to a specific client.",
"body": ["boolean Send($Peer_client, $const_int_message, $Bank_bank, $number_channel=0, $number_flags=0)"]
},
"Server:Update": {
"prefix": "Server:Update",
"description": "This function updates the network connection and checks for new messages. If a message is received, it should be read and then immediately released to free up resources.",
"body": ["Message Update($number_timeout=0)"]
},
"Update  ": {
"prefix": "Update  ",
"description": "This function updates the network connection and checks for new messages. If a message is received, it should be read and then immediately released to free up resources.",
"body": ["Message Update($number_timeout=0)"]
},
"Source:Create": {
"prefix": "Source:Create",
"description": "This function creates and returns a new sound source.",
"body": ["Source Create()"]
},
"Create                   ": {
"prefix": "Create                   ",
"description": "This function creates and returns a new sound source.",
"body": ["Source Create()"]
},
"Source:GetPitch": {
"prefix": "Source:GetPitch",
"description": "This function gets the pitch of a source.",
"body": ["number GetPitch()"]
},
"GetPitch": {
"prefix": "GetPitch",
"description": "This function gets the pitch of a source.",
"body": ["number GetPitch()"]
},
"Source:GetState": {
"prefix": "Source:GetState",
"description": "This function gets a source's current state.",
"body": ["number GetState()"]
},
"GetState": {
"prefix": "GetState",
"description": "This function gets a source's current state.",
"body": ["number GetState()"]
},
"Source:GetTime": {
"prefix": "Source:GetTime",
"description": "This function gets a source's current time.",
"body": ["number GetTime()"]
},
"GetTime": {
"prefix": "GetTime",
"description": "This function gets a source's current time.",
"body": ["number GetTime()"]
},
"Source:Pause": {
"prefix": "Source:Pause",
"description": "This function will pause a source that is playing.",
"body": ["Pause()"]
},
"Pause ": {
"prefix": "Pause ",
"description": "This function will pause a source that is playing.",
"body": ["Pause()"]
},
"Source:Play": {
"prefix": "Source:Play",
"description": "This function will play a source from the beginning.",
"body": ["Play()"]
},
"Play ": {
"prefix": "Play ",
"description": "This function will play a source from the beginning.",
"body": ["Play()"]
},
"Source:Resume": {
"prefix": "Source:Resume",
"description": "This function will resume a paused source. If the source is stopped, it will begin playing from the beginning of its source.",
"body": ["Resume()"]
},
"Resume": {
"prefix": "Resume",
"description": "This function will resume a paused source. If the source is stopped, it will begin playing from the beginning of its source.",
"body": ["Resume()"]
},
"Source:SetLoopMode": {
"prefix": "Source:SetLoopMode",
"description": "This function sets the looping mode for a source.",
"body": ["SetLoopMode($bool_loop)"]
},
"SetLoopMode ": {
"prefix": "SetLoopMode ",
"description": "This function sets the looping mode for a source.",
"body": ["SetLoopMode($bool_loop)"]
},
"Source:SetPitch": {
"prefix": "Source:SetPitch",
"description": "This function modulates the frequency of a playing sound. This affects the speed it plays at, as well as the perceived pitch.",
"body": ["SetPitch($number_pitch)"]
},
"SetPitch": {
"prefix": "SetPitch",
"description": "This function modulates the frequency of a playing sound. This affects the speed it plays at, as well as the perceived pitch.",
"body": ["SetPitch($number_pitch)"]
},
"Source:SetPosition": {
"prefix": "Source:SetPosition",
"description": "This function sets a source's position in global space.",
"body": ["SetPosition($Vec3_position)"]
},
"SetPosition  ": {
"prefix": "SetPosition  ",
"description": "This function sets a source's position in global space.",
"body": ["SetPosition($Vec3_position)"]
},
"Source:SetRange": {
"prefix": "Source:SetRange",
"description": "This function sets the audible range of a sound source.",
"body": ["SetRange($number_range)"]
},
"SetRange    ": {
"prefix": "SetRange    ",
"description": "This function sets the audible range of a sound source.",
"body": ["SetRange($number_range)"]
},
"Source:SetSound": {
"prefix": "Source:SetSound",
"description": "This function sets the sound a source will play.",
"body": ["SetSound($Sound_sound)"]
},
"SetSound": {
"prefix": "SetSound",
"description": "This function sets the sound a source will play.",
"body": ["SetSound($Sound_sound)"]
},
"Source:SetTime": {
"prefix": "Source:SetTime",
"description": "This function will set the time a source is playing at.",
"body": ["SetTime($number_time)"]
},
"SetTime": {
"prefix": "SetTime",
"description": "This function will set the time a source is playing at.",
"body": ["SetTime($number_time)"]
},
"Source:SetVolume": {
"prefix": "Source:SetVolume",
"description": "This function will set a source's volume. The default volume is 1.0.",
"body": ["SetVolume($number_volume)"]
},
"SetVolume": {
"prefix": "SetVolume",
"description": "This function will set a source's volume. The default volume is 1.0.",
"body": ["SetVolume($number_volume)"]
},
"Source:Stop": {
"prefix": "Source:Stop",
"description": "This function will stop and rewind a source that is playing.",
"body": ["Stop()"]
},
"Stop ": {
"prefix": "Stop ",
"description": "This function will stop and rewind a source that is playing.",
"body": ["Stop()"]
},
"Surface:Add": {
"prefix": "Surface:Add",
"description": "This function adds the contents of one surface to another. This can be used to collapse multiple surfaces into one.",
"body": ["Add($Surface_surface, $Mat4_mat)"]
},
"Add": {
"prefix": "Add",
"description": "This function adds the contents of one surface to another. This can be used to collapse multiple surfaces into one.",
"body": ["Add($Surface_surface, $Mat4_mat)"]
},
"Surface:AddTriangle": {
"prefix": "Surface:AddTriangle",
"description": "This function adds a single triangle to the surface indice buffer. The indice values must be greater than -1 and less than Surface::CountVertices().",
"body": ["number AddTriangle($number_a, $number_b, $number_c)"]
},
"AddTriangle": {
"prefix": "AddTriangle",
"description": "This function adds a single triangle to the surface indice buffer. The indice values must be greater than -1 and less than Surface::CountVertices().",
"body": ["number AddTriangle($number_a, $number_b, $number_c)"]
},
"Surface:AddVertex": {
"prefix": "Surface:AddVertex",
"description": "This function adds a new triangle to a surface.",
"body": ["number AddVertex($number_x, $number_y, $number_z, $number_nx=0.0, $number_ny=0.0, $number_nz=0.0, $number_u0=0.0, $number_v0=0.0, $number_u1=0.0, $number_v1=0.0, $number_r=1.0, $number_g=1.0, $number_b=1.0, $number_a=1.0)"]
},
"AddVertex": {
"prefix": "AddVertex",
"description": "This function adds a new triangle to a surface.",
"body": ["number AddVertex($number_x, $number_y, $number_z, $number_nx=0.0, $number_ny=0.0, $number_nz=0.0, $number_u0=0.0, $number_v0=0.0, $number_u1=0.0, $number_v1=0.0, $number_r=1.0, $number_g=1.0, $number_b=1.0, $number_a=1.0)"]
},
"Surface:AddVertex ": {
"prefix": "Surface:AddVertex ",
"description": "This function adds a new triangle to a surface.",
"body": ["number AddVertex($Vec3_position, $Vec3_normal=Vec3(0), Vec2 texcoords0=Vec2(0), Vec2 texcoords1=Vec2(0), Vec4 color=Vec4(1))"]
},
"AddVertex ": {
"prefix": "AddVertex ",
"description": "This function adds a new triangle to a surface.",
"body": ["number AddVertex($Vec3_position, $Vec3_normal=Vec3(0), Vec2 texcoords0=Vec2(0), Vec2 texcoords1=Vec2(0), Vec4 color=Vec4(1))"]
},
"Surface:CountTriangles": {
"prefix": "Surface:CountTriangles",
"description": "This function gets the number of triangles in a surface.",
"body": ["number CountTriangles()"]
},
"CountTriangles": {
"prefix": "CountTriangles",
"description": "This function gets the number of triangles in a surface.",
"body": ["number CountTriangles()"]
},
"Surface:CountVertices": {
"prefix": "Surface:CountVertices",
"description": "This function gets the number of vertices a surface has.",
"body": ["number CountVertices()"]
},
"CountVertices": {
"prefix": "CountVertices",
"description": "This function gets the number of vertices a surface has.",
"body": ["number CountVertices()"]
},
"Surface:FlipNormals": {
"prefix": "Surface:FlipNormals",
"description": "This function reverses the triangle order and inverts the normals of the entire surface, effectively 'lipping' the surface inside out.",
"body": ["FlipNormals()"]
},
"FlipNormals": {
"prefix": "FlipNormals",
"description": "This function reverses the triangle order and inverts the normals of the entire surface, effectively 'lipping' the surface inside out.",
"body": ["FlipNormals()"]
},
"Surface:GetAABB": {
"prefix": "Surface:GetAABB",
"description": "This function gets the axis-aligned bounding box (AABB) that encompasses all a surface's vertices.",
"body": ["AABB GetAABB()"]
},
"GetAABB ": {
"prefix": "GetAABB ",
"description": "This function gets the axis-aligned bounding box (AABB) that encompasses all a surface's vertices.",
"body": ["AABB GetAABB()"]
},
"Surface:GetMaterial": {
"prefix": "Surface:GetMaterial",
"description": "This function gets a surface's material. This function does not increment the material reference count.",
"body": ["Material GetMaterial()"]
},
"GetMaterial ": {
"prefix": "GetMaterial ",
"description": "This function gets a surface's material. This function does not increment the material reference count.",
"body": ["Material GetMaterial()"]
},
"Surface:GetTriangleNormal": {
"prefix": "Surface:GetTriangleNormal",
"description": "This function calculates a normal based on the positions of a triangle's vertices. This value will not necessarily be the same as the vertex normals, though the values are likely to be similar.",
"body": ["Vec3 GetTriangleNormal($number_index)"]
},
"GetTriangleNormal": {
"prefix": "GetTriangleNormal",
"description": "This function calculates a normal based on the positions of a triangle's vertices. This value will not necessarily be the same as the vertex normals, though the values are likely to be similar.",
"body": ["Vec3 GetTriangleNormal($number_index)"]
},
"Surface:GetTriangleVertex": {
"prefix": "Surface:GetTriangleVertex",
"description": "This functions gets the vertex index of a triangle corner.",
"body": ["number GetTriangleVertex($number_t, $number_c)"]
},
"GetTriangleVertex": {
"prefix": "GetTriangleVertex",
"description": "This functions gets the vertex index of a triangle corner.",
"body": ["number GetTriangleVertex($number_t, $number_c)"]
},
"Surface:GetVertexColor": {
"prefix": "Surface:GetVertexColor",
"description": "This function returns a surface vertex color.",
"body": ["Vec4 GetVertexColor($number_index)"]
},
"GetVertexColor": {
"prefix": "GetVertexColor",
"description": "This function returns a surface vertex color.",
"body": ["Vec4 GetVertexColor($number_index)"]
},
"Surface:GetVertexNormal": {
"prefix": "Surface:GetVertexNormal",
"description": "This function returns a surface vertex normal.",
"body": ["Vec3 GetVertexNormal($number_index)"]
},
"GetVertexNormal": {
"prefix": "GetVertexNormal",
"description": "This function returns a surface vertex normal.",
"body": ["Vec3 GetVertexNormal($number_index)"]
},
"Surface:GetVertexPosition": {
"prefix": "Surface:GetVertexPosition",
"description": "This function returns a surface vertex position.",
"body": ["Vec3 GetVertexPosition($number_index)"]
},
"GetVertexPosition": {
"prefix": "GetVertexPosition",
"description": "This function returns a surface vertex position.",
"body": ["Vec3 GetVertexPosition($number_index)"]
},
"Surface:GetVertexTexCoords": {
"prefix": "Surface:GetVertexTexCoords",
"description": "This function returns the texcoords of a vertex.",
"body": ["Vec2 GetVertexTexCoords($number_index, $number_texcoordset=0)"]
},
"GetVertexTexCoords": {
"prefix": "GetVertexTexCoords",
"description": "This function returns the texcoords of a vertex.",
"body": ["Vec2 GetVertexTexCoords($number_index, $number_texcoordset=0)"]
},
"Surface:Pick": {
"prefix": "Surface:Pick",
"description": "This function performs a pick operation on a single surface. The start and end pick positions should be in local space. If a radius is specified, it will also be in considered local space.",
"body": ["bool Pick($Vec3_p0, $Vec3_p1, $Pick_pick, $number_radius_=_0.0, $bool_closest=false)"]
},
"Pick  ": {
"prefix": "Pick  ",
"description": "This function performs a pick operation on a single surface. The start and end pick positions should be in local space. If a radius is specified, it will also be in considered local space.",
"body": ["bool Pick($Vec3_p0, $Vec3_p1, $Pick_pick, $number_radius_=_0.0, $bool_closest=false)"]
},
"Surface:SetMaterial": {
"prefix": "Surface:SetMaterial",
"description": "This function sets a surface material.",
"body": ["SetMaterial($Material_material)"]
},
"SetMaterial ": {
"prefix": "SetMaterial ",
"description": "This function sets a surface material.",
"body": ["SetMaterial($Material_material)"]
},
"Surface:SetVertexColor": {
"prefix": "Surface:SetVertexColor",
"description": "This function sets a vertex color.",
"body": ["SetVertexColor($number_index, $number_r, $number_g, $number_b, $number_a)"]
},
"SetVertexColor": {
"prefix": "SetVertexColor",
"description": "This function sets a vertex color.",
"body": ["SetVertexColor($number_index, $number_r, $number_g, $number_b, $number_a)"]
},
"Surface:SetVertexColor ": {
"prefix": "Surface:SetVertexColor ",
"description": "This function sets a vertex color.",
"body": ["SetVertexColor($number_index, $Vec4_color)"]
},
"SetVertexColor ": {
"prefix": "SetVertexColor ",
"description": "This function sets a vertex color.",
"body": ["SetVertexColor($number_index, $Vec4_color)"]
},
"Surface:SetVertexNormal": {
"prefix": "Surface:SetVertexNormal",
"description": "This function sets a vertex normal.",
"body": ["SetVertexNormal($number_v, $number_x, $number_y, $number_z)"]
},
"SetVertexNormal": {
"prefix": "SetVertexNormal",
"description": "This function sets a vertex normal.",
"body": ["SetVertexNormal($number_v, $number_x, $number_y, $number_z)"]
},
"Surface:SetVertexNormal ": {
"prefix": "Surface:SetVertexNormal ",
"description": "This function sets a vertex normal.",
"body": ["SetVertexNormal($number_v, $Vec3_normal)"]
},
"SetVertexNormal ": {
"prefix": "SetVertexNormal ",
"description": "This function sets a vertex normal.",
"body": ["SetVertexNormal($number_v, $Vec3_normal)"]
},
"Surface:SetVertexPosition": {
"prefix": "Surface:SetVertexPosition",
"description": "This function sets a vertex position.",
"body": ["SetVertexPosition($number_v, $number_x, $number_y, $number_z)"]
},
"SetVertexPosition": {
"prefix": "SetVertexPosition",
"description": "This function sets a vertex position.",
"body": ["SetVertexPosition($number_v, $number_x, $number_y, $number_z)"]
},
"Surface:SetVertexPosition ": {
"prefix": "Surface:SetVertexPosition ",
"description": "This function sets a vertex position.",
"body": ["SetVertexPosition($number_v, $Vec3_position)"]
},
"SetVertexPosition ": {
"prefix": "SetVertexPosition ",
"description": "This function sets a vertex position.",
"body": ["SetVertexPosition($number_v, $Vec3_position)"]
},
"Surface:SetVertexTexCoords": {
"prefix": "Surface:SetVertexTexCoords",
"description": "This function sets a vertex texcoords.",
"body": ["SetVertexTexCoords($number_index, $number_x, $number_y, $number_texcoordset=0)"]
},
"SetVertexTexCoords": {
"prefix": "SetVertexTexCoords",
"description": "This function sets a vertex texcoords.",
"body": ["SetVertexTexCoords($number_index, $number_x, $number_y, $number_texcoordset=0)"]
},
"Surface:SetVertexTexCoords ": {
"prefix": "Surface:SetVertexTexCoords ",
"description": "This function sets a vertex texcoords.",
"body": ["SetVertextexCoords($number_index, $number_Vec2_texcoords, $number_texcoordset=0)"]
},
"SetVertexTexCoords ": {
"prefix": "SetVertexTexCoords ",
"description": "This function sets a vertex texcoords.",
"body": ["SetVertextexCoords($number_index, $number_Vec2_texcoords, $number_texcoordset=0)"]
},
"Surface:Update": {
"prefix": "Surface:Update",
"description": "This function updates a surface after it has been modified. This will update the binormals and tangents, update the AABB, and create a new shape for picking.",
"body": ["Update($bool_force=false)"]
},
"Update   ": {
"prefix": "Update   ",
"description": "This function updates a surface after it has been modified. This will update the binormals and tangents, update the AABB, and create a new shape for picking.",
"body": ["Update($bool_force=false)"]
},
"Surface:UpdateNormals": {
"prefix": "Surface:UpdateNormals",
"description": "This function calculates normals for a surface.",
"body": ["UpdateNormals($bool_soft=false, $number_distancetolerance=0.01, $number_angulartolerance=180.0)"]
},
"UpdateNormals": {
"prefix": "UpdateNormals",
"description": "This function calculates normals for a surface.",
"body": ["UpdateNormals($bool_soft=false, $number_distancetolerance=0.01, $number_angulartolerance=180.0)"]
},
"Surface:UpdateTangentsAndBinormals": {
"prefix": "Surface:UpdateTangentsAndBinormals",
"description": "This function calculates binormals and tangets for an entire surface. These are needed for normal mapping to appear correctly.",
"body": ["bool UpdateTangentsAndBinormals()"]
},
"UpdateTangentsAndBinormals": {
"prefix": "UpdateTangentsAndBinormals",
"description": "This function calculates binormals and tangets for an entire surface. These are needed for normal mapping to appear correctly.",
"body": ["bool UpdateTangentsAndBinormals()"]
},
"Steamworks:Initialize": {
"prefix": "Steamworks:Initialize",
"description": "This function initializes the Steamworks library and enables all Steamworks features. After calling this function, the Steam overlay will be available in your game by pressing the shift+tab keys",
"body": ["bool Initialize()"]
},
"Initialize": {
"prefix": "Initialize",
"description": "This function initializes the Steamworks library and enables all Steamworks features. After calling this function, the Steam overlay will be available in your game by pressing the shift+tab keys",
"body": ["bool Initialize()"]
},
"Stream:EOF": {
"prefix": "Stream:EOF",
"description": "This function is used to indicate whether the end of a file has been reached, when reading.",
"body": ["bool EOF()"]
},
"EOF": {
"prefix": "EOF",
"description": "This function is used to indicate whether the end of a file has been reached, when reading.",
"body": ["bool EOF()"]
},
"Stream:GetPos": {
"prefix": "Stream:GetPos",
"description": "This function gets the current position of a stream, for reading and writing.",
"body": ["long GetPos()"]
},
"GetPos": {
"prefix": "GetPos",
"description": "This function gets the current position of a stream, for reading and writing.",
"body": ["long GetPos()"]
},
"Stream:GetSize": {
"prefix": "Stream:GetSize",
"description": "This function gets the size of a stream.",
"body": ["long GetSize()"]
},
"GetSize ": {
"prefix": "GetSize ",
"description": "This function gets the size of a stream.",
"body": ["long GetSize()"]
},
"Stream:Read": {
"prefix": "Stream:Read",
"description": "This function reads raw data from a stream to a memory buffer.",
"body": ["void Read($const_void*_buf, $int_size)"]
},
"Read": {
"prefix": "Read",
"description": "This function reads raw data from a stream to a memory buffer.",
"body": ["void Read($const_void*_buf, $int_size)"]
},
"Stream:ReadFloat": {
"prefix": "Stream:ReadFloat",
"description": "This function reads a float value from a stream.",
"body": ["number ReadFloat()"]
},
"ReadFloat": {
"prefix": "ReadFloat",
"description": "This function reads a float value from a stream.",
"body": ["number ReadFloat()"]
},
"Stream:ReadInt": {
"prefix": "Stream:ReadInt",
"description": "This function reads an integer value from a stream.",
"body": ["number ReadInt()"]
},
"ReadInt": {
"prefix": "ReadInt",
"description": "This function reads an integer value from a stream.",
"body": ["number ReadInt()"]
},
"Stream:ReadLine": {
"prefix": "Stream:ReadLine",
"description": "This function reads a line of text from a stream. A line is terminated when either the end-of-line or null character are reached.",
"body": ["string ReadLine()"]
},
"ReadLine": {
"prefix": "ReadLine",
"description": "This function reads a line of text from a stream. A line is terminated when either the end-of-line or null character are reached.",
"body": ["string ReadLine()"]
},
"Stream:ReadString": {
"prefix": "Stream:ReadString",
"description": "This function reads a null-terminated string from a stream.",
"body": ["string ReadString($number_maxlength=0)"]
},
"ReadString": {
"prefix": "ReadString",
"description": "This function reads a null-terminated string from a stream.",
"body": ["string ReadString($number_maxlength=0)"]
},
"Stream:ReadUChar": {
"prefix": "Stream:ReadUChar",
"description": "This function reads an unsigned char value from a stream.",
"body": ["char ReadUChar()"]
},
"ReadUChar": {
"prefix": "ReadUChar",
"description": "This function reads an unsigned char value from a stream.",
"body": ["char ReadUChar()"]
},
"Stream:ReadUShort": {
"prefix": "Stream:ReadUShort",
"description": "This function reads an unsigned short value from a stream.",
"body": ["short ReadUShort()"]
},
"ReadUShort": {
"prefix": "ReadUShort",
"description": "This function reads an unsigned short value from a stream.",
"body": ["short ReadUShort()"]
},
"Stream:Seek": {
"prefix": "Stream:Seek",
"description": "This function sets the stream position for reading and writing.",
"body": ["Seek($number_pos)"]
},
"Seek": {
"prefix": "Seek",
"description": "This function sets the stream position for reading and writing.",
"body": ["Seek($number_pos)"]
},
"Stream:Write": {
"prefix": "Stream:Write",
"description": "This function writes raw data from a memory buffer to a stream.",
"body": ["Write($number_b, $number_size)"]
},
"Write": {
"prefix": "Write",
"description": "This function writes raw data from a memory buffer to a stream.",
"body": ["Write($number_b, $number_size)"]
},
"Stream:WriteFloat": {
"prefix": "Stream:WriteFloat",
"description": "This function writes a float value to a stream.",
"body": ["WriteFloat($number_f)"]
},
"WriteFloat": {
"prefix": "WriteFloat",
"description": "This function writes a float value to a stream.",
"body": ["WriteFloat($number_f)"]
},
"Stream:WriteInt": {
"prefix": "Stream:WriteInt",
"description": "This function writes an integer value to a stream.",
"body": ["WriteInt($number_i)"]
},
"WriteInt": {
"prefix": "WriteInt",
"description": "This function writes an integer value to a stream.",
"body": ["WriteInt($number_i)"]
},
"Stream:WriteLine": {
"prefix": "Stream:WriteLine",
"description": "This function writes a string to a stream, and adds the line return character at the end.",
"body": ["WriteLine($string_s)"]
},
"WriteLine": {
"prefix": "WriteLine",
"description": "This function writes a string to a stream, and adds the line return character at the end.",
"body": ["WriteLine($string_s)"]
},
"Stream:WriteString": {
"prefix": "Stream:WriteString",
"description": "This function writes a string to a stream and adds the null character at the end.",
"body": ["WriteString($string_s)"]
},
"WriteString": {
"prefix": "WriteString",
"description": "This function writes a string to a stream and adds the null character at the end.",
"body": ["WriteString($string_s)"]
},
"Stream:WriteUChar": {
"prefix": "Stream:WriteUChar",
"description": "This function writes an unsigned char value to a stream.",
"body": ["WriteUChar($string_c)"]
},
"WriteUChar": {
"prefix": "WriteUChar",
"description": "This function writes an unsigned char value to a stream.",
"body": ["WriteUChar($string_c)"]
},
"Stream:WriteUShort": {
"prefix": "Stream:WriteUShort",
"description": "This function writes an unsigned short value to a stream.",
"body": ["WriteUShort($number_s)"]
},
"WriteUShort": {
"prefix": "WriteUShort",
"description": "This function writes an unsigned short value to a stream.",
"body": ["WriteUShort($number_s)"]
},
"System:AddHook": {
"prefix": "System:AddHook",
"description": "This function adds a global hook. Hooks are callback functions that will be executed when certain events occur.",
"body": ["AddHook($number_hookid, $number_hook)"]
},
"AddHook": {
"prefix": "AddHook",
"description": "This function adds a global hook. Hooks are callback functions that will be executed when certain events occur.",
"body": ["AddHook($number_hookid, $number_hook)"]
},
"System:CountGraphicsModes": {
"prefix": "System:CountGraphicsModes",
"description": "This function returns the number of screen resolutions the current machine is capable of displaying.",
"body": ["number CountGraphicsModes()"]
},
"CountGraphicsModes": {
"prefix": "CountGraphicsModes",
"description": "This function returns the number of screen resolutions the current machine is capable of displaying.",
"body": ["number CountGraphicsModes()"]
},
"System:GetGraphicsMode": {
"prefix": "System:GetGraphicsMode",
"description": "This function returns the resolution of a supported graphics mode. Call System::CountGraphicsModes() to get the number of available screen resolutions, and then use this command to query the dimensions of each supported resolution.",
"body": ["iVec2 GetGraphicsMode($number_index)"]
},
"GetGraphicsMode": {
"prefix": "GetGraphicsMode",
"description": "This function returns the resolution of a supported graphics mode. Call System::CountGraphicsModes() to get the number of available screen resolutions, and then use this command to query the dimensions of each supported resolution.",
"body": ["iVec2 GetGraphicsMode($number_index)"]
},
"System:GetMemoryUsage": {
"prefix": "System:GetMemoryUsage",
"description": "This function gets the current application memory usage. You can use this to check for memory leaks.Due to the limitations of various platforms and the use of garbage collection, the value returned will not be perfectly accurate on all platforms. The application memory usage value can only be considered accurate in Microsoft Visual Studio when running in debug mode.",
"body": ["number GetMemoryUsage()"]
},
"GetMemoryUsage": {
"prefix": "GetMemoryUsage",
"description": "This function gets the current application memory usage. You can use this to check for memory leaks.Due to the limitations of various platforms and the use of garbage collection, the value returned will not be perfectly accurate on all platforms. The application memory usage value can only be considered accurate in Microsoft Visual Studio when running in debug mode.",
"body": ["number GetMemoryUsage()"]
},
"System:GetProperty": {
"prefix": "System:GetProperty",
"description": "This function gets a command line property.",
"body": ["string GetProperty($string_key, $string_defaultvalue='')"]
},
"GetProperty": {
"prefix": "GetProperty",
"description": "This function gets a command line property.",
"body": ["string GetProperty($string_key, $string_defaultvalue='')"]
},
"System:Print": {
"prefix": "System:Print",
"description": "This functions prints text to the application console. It is useful for revealing debug information.",
"body": ["Print($string_value)"]
},
"Print": {
"prefix": "Print",
"description": "This functions prints text to the application console. It is useful for revealing debug information.",
"body": ["Print($string_value)"]
},
"System:Print ": {
"prefix": "System:Print ",
"description": "This functions prints text to the application console. It is useful for revealing debug information.",
"body": ["Print($number_value)"]
},
"Print ": {
"prefix": "Print ",
"description": "This functions prints text to the application console. It is useful for revealing debug information.",
"body": ["Print($number_value)"]
},
"System:Print  ": {
"prefix": "System:Print  ",
"description": "This functions prints text to the application console. It is useful for revealing debug information.",
"body": ["Print($number_value)"]
},
"Print  ": {
"prefix": "Print  ",
"description": "This functions prints text to the application console. It is useful for revealing debug information.",
"body": ["Print($number_value)"]
},
"System:Print   ": {
"prefix": "System:Print   ",
"description": "This functions prints text to the application console. It is useful for revealing debug information.",
"body": ["Print($bool_value)"]
},
"Print   ": {
"prefix": "Print   ",
"description": "This functions prints text to the application console. It is useful for revealing debug information.",
"body": ["Print($bool_value)"]
},
"System:Print    ": {
"prefix": "System:Print    ",
"description": "This functions prints text to the application console. It is useful for revealing debug information.",
"body": ["Print($Object_value)"]
},
"Print    ": {
"prefix": "Print    ",
"description": "This functions prints text to the application console. It is useful for revealing debug information.",
"body": ["Print($Object_value)"]
},
"System:Print     ": {
"prefix": "System:Print     ",
"description": "This functions prints text to the application console. It is useful for revealing debug information.",
"body": ["Print($string_value)"]
},
"Print     ": {
"prefix": "Print     ",
"description": "This functions prints text to the application console. It is useful for revealing debug information.",
"body": ["Print($string_value)"]
},
"System:Print      ": {
"prefix": "System:Print      ",
"description": "This functions prints text to the application console. It is useful for revealing debug information.",
"body": ["Print($string_value)"]
},
"Print      ": {
"prefix": "Print      ",
"description": "This functions prints text to the application console. It is useful for revealing debug information.",
"body": ["Print($string_value)"]
},
"System:Print       ": {
"prefix": "System:Print       ",
"description": "This functions prints text to the application console. It is useful for revealing debug information.",
"body": ["Print($Object_value)"]
},
"Print       ": {
"prefix": "Print       ",
"description": "This functions prints text to the application console. It is useful for revealing debug information.",
"body": ["Print($Object_value)"]
},
"System:RemoveHook": {
"prefix": "System:RemoveHook",
"description": "This function will remove the first instance of a global hook.",
"body": ["RemoveHook($number_hookid, $number_hook)"]
},
"RemoveHook": {
"prefix": "RemoveHook",
"description": "This function will remove the first instance of a global hook.",
"body": ["RemoveHook($number_hookid, $number_hook)"]
},
"Time:Delay": {
"prefix": "Time:Delay",
"description": "This function will pause the application for the specified amount of time.",
"body": ["Delay($number_milliseconds)"]
},
"Delay": {
"prefix": "Delay",
"description": "This function will pause the application for the specified amount of time.",
"body": ["Delay($number_milliseconds)"]
},
"Time:GetCurrent": {
"prefix": "Time:GetCurrent",
"description": "This function gets the current application time. The application time is updated with each call to Leadwerks::Time::Update() and will be modified by calls to Leadwerks::Time::Pause() and Leadwerks::Time::Resume(). Therefore, expect this function to return a different value than Leadwerks::Time::Millisecs().",
"body": ["number GetCurrent()"]
},
"GetCurrent": {
"prefix": "GetCurrent",
"description": "This function gets the current application time. The application time is updated with each call to Leadwerks::Time::Update() and will be modified by calls to Leadwerks::Time::Pause() and Leadwerks::Time::Resume(). Therefore, expect this function to return a different value than Leadwerks::Time::Millisecs().",
"body": ["number GetCurrent()"]
},
"Time:GetSpeed": {
"prefix": "Time:GetSpeed",
"description": "This function returns the application speed. The application speed is a value which can be used to modulate time-dependent variables to make actions occur at the same speed, regardless of frame rate.",
"body": ["GetSpeed()"]
},
"GetSpeed": {
"prefix": "GetSpeed",
"description": "This function returns the application speed. The application speed is a value which can be used to modulate time-dependent variables to make actions occur at the same speed, regardless of frame rate.",
"body": ["GetSpeed()"]
},
"Time:Millisecs": {
"prefix": "Time:Millisecs",
"description": "This function returns the system time in milliseconds. Unlike the Leadwerks::Time::GetCurrent() function, this value updates continuously and is not affected by calls to Leadwerks::Time::Pause() and Leadwerks::Time::Resume().",
"body": ["number Millisecs()"]
},
"Millisecs": {
"prefix": "Millisecs",
"description": "This function returns the system time in milliseconds. Unlike the Leadwerks::Time::GetCurrent() function, this value updates continuously and is not affected by calls to Leadwerks::Time::Pause() and Leadwerks::Time::Resume().",
"body": ["number Millisecs()"]
},
"Time:Pause": {
"prefix": "Time:Pause",
"description": "This function pauses the application time until Leadwerks::Time::Resume() is called. When the time is updated with a call to Leadwerks::Time::Update(), the time spent in the paused state will be subtracted from the time elapsed.",
"body": ["Pause()"]
},
"Pause  ": {
"prefix": "Pause  ",
"description": "This function pauses the application time until Leadwerks::Time::Resume() is called. When the time is updated with a call to Leadwerks::Time::Update(), the time spent in the paused state will be subtracted from the time elapsed.",
"body": ["Pause()"]
},
"Time:Resume": {
"prefix": "Time:Resume",
"description": "This function resumes the application time after Leadwerks::Time::Pause() is called.",
"body": ["Resume()"]
},
"Resume ": {
"prefix": "Resume ",
"description": "This function resumes the application time after Leadwerks::Time::Pause() is called.",
"body": ["Resume()"]
},
"Time:Step": {
"prefix": "Time:Step",
"description": "This function will update the time with an elasped time of 1/60. This will cause the application speed and UPS to behave as though the application is running at exactly 60 frame per second, regardless of the real frame rate.",
"body": ["Step()"]
},
"Step": {
"prefix": "Step",
"description": "This function will update the time with an elasped time of 1/60. This will cause the application speed and UPS to behave as though the application is running at exactly 60 frame per second, regardless of the real frame rate.",
"body": ["Step()"]
},
"Time:Update": {
"prefix": "Time:Update",
"description": "This function updates the application time, speed, and UPS. It should be called once in the App::Continue() function.",
"body": ["Update()"]
},
"Update    ": {
"prefix": "Update    ",
"description": "This function updates the application time, speed, and UPS. It should be called once in the App::Continue() function.",
"body": ["Update()"]
},
"Time:UPS": {
"prefix": "Time:UPS",
"description": "This function returns the application updates per second.",
"body": ["number UPS()"]
},
"UPS": {
"prefix": "UPS",
"description": "This function returns the application updates per second.",
"body": ["number UPS()"]
},
"Vehicle:AddAxle": {
"prefix": "Vehicle:AddAxle",
"description": "This functions adds an axle between a left and right tire. Vehicles with axles specified will have more accurate physics.",
"body": ["AddAxle($number_lefttire, $number_righttire)"]
},
"AddAxle": {
"prefix": "AddAxle",
"description": "This functions adds an axle between a left and right tire. Vehicles with axles specified will have more accurate physics.",
"body": ["AddAxle($number_lefttire, $number_righttire)"]
},
"Vehicle:AddTire": {
"prefix": "Vehicle:AddTire",
"description": "This command adds a tire to a vehicle.",
"body": ["number AddTire($number_x, $number_y, $number_z, $number_mass, $number_radius, $number_width, $number_steering, $number_suspensionDamper_=_200.0, $number_suspensionSpring_=_2000.0, $number_suspensionLength_=_1.2, $number_lateralStiffness_=_20.0, $number_longitudinalStiffness_=_100000.0, $number_aligningMOmentTrail_=_1.5, $number_friction_=_1.0)"]
},
"AddTire": {
"prefix": "AddTire",
"description": "This command adds a tire to a vehicle.",
"body": ["number AddTire($number_x, $number_y, $number_z, $number_mass, $number_radius, $number_width, $number_steering, $number_suspensionDamper_=_200.0, $number_suspensionSpring_=_2000.0, $number_suspensionLength_=_1.2, $number_lateralStiffness_=_20.0, $number_longitudinalStiffness_=_100000.0, $number_aligningMOmentTrail_=_1.5, $number_friction_=_1.0)"]
},
"Vehicle:Build": {
"prefix": "Vehicle:Build",
"description": "This function finalizes a vehicle and makes it ready to use. This command must be called after a vehicle is created, before the next call to World::Update().",
"body": ["build Build()"]
},
"Build": {
"prefix": "Build",
"description": "This function finalizes a vehicle and makes it ready to use. This command must be called after a vehicle is created, before the next call to World::Update().",
"body": ["build Build()"]
},
"Vehicle:CountTires": {
"prefix": "Vehicle:CountTires",
"description": "This command returns the vehicle's number of tires.",
"body": ["number CountTires()"]
},
"CountTires": {
"prefix": "CountTires",
"description": "This command returns the vehicle's number of tires.",
"body": ["number CountTires()"]
},
"Vehicle:Create": {
"prefix": "Vehicle:Create",
"description": "This command creates a new vehicle using the specified entity as the chassis.",
"body": ["Vehicle Create($Entity_entity)"]
},
"Create                    ": {
"prefix": "Create                    ",
"description": "This command creates a new vehicle using the specified entity as the chassis.",
"body": ["Vehicle Create($Entity_entity)"]
},
"Vehicle:GetEngineRunning": {
"prefix": "Vehicle:GetEngineRunning",
"description": "This command is used to check whether a vehicle's engine is running.",
"body": ["bool GetEngineRunning()"]
},
"GetEngineRunning": {
"prefix": "GetEngineRunning",
"description": "This command is used to check whether a vehicle's engine is running.",
"body": ["bool GetEngineRunning()"]
},
"Vehicle:GetGear": {
"prefix": "Vehicle:GetGear",
"description": "This command returns the gear the vehicle's transmission is currently using. This can be used to modulate a sound's pitch for engine noises.",
"body": ["number GetGear()"]
},
"GetGear": {
"prefix": "GetGear",
"description": "This command returns the gear the vehicle's transmission is currently using. This can be used to modulate a sound's pitch for engine noises.",
"body": ["number GetGear()"]
},
"Vehicle:GetRPM": {
"prefix": "Vehicle:GetRPM",
"description": "This command returns the vehicle's engine's current revolutions-per-minute (RPM).",
"body": ["number GetRPM()"]
},
"GetRPM": {
"prefix": "GetRPM",
"description": "This command returns the vehicle's engine's current revolutions-per-minute (RPM).",
"body": ["number GetRPM()"]
},
"Vehicle:GetTireLateralForce": {
"prefix": "Vehicle:GetTireLateralForce",
"description": "Returns the lateral force being exerted on the specified tire. This can be used to adjust steering angles and prevent flipping.",
"body": ["number GetTireLateralForce($number_index)"]
},
"GetTireLateralForce": {
"prefix": "GetTireLateralForce",
"description": "Returns the lateral force being exerted on the specified tire. This can be used to adjust steering angles and prevent flipping.",
"body": ["number GetTireLateralForce($number_index)"]
},
"Vehicle:GetTireMatrix": {
"prefix": "Vehicle:GetTireMatrix",
"description": "This command returns a 4x4 matrix describing the specified tire's position and rotation. This can be used to make your visual model of a tire match the orientation of the physics simulation.",
"body": ["Mat4 GetTireMatrix($number_index)"]
},
"GetTireMatrix": {
"prefix": "GetTireMatrix",
"description": "This command returns a 4x4 matrix describing the specified tire's position and rotation. This can be used to make your visual model of a tire match the orientation of the physics simulation.",
"body": ["Mat4 GetTireMatrix($number_index)"]
},
"Vehicle:GetTireSlip": {
"prefix": "Vehicle:GetTireSlip",
"description": "This function returns the specified tire's current slippage on the ground. This can be used to play tire skidding noises when a vehicle slides.",
"body": ["number GetTireSlip($number_index)"]
},
"GetTireSlip": {
"prefix": "GetTireSlip",
"description": "This function returns the specified tire's current slippage on the ground. This can be used to play tire skidding noises when a vehicle slides.",
"body": ["number GetTireSlip($number_index)"]
},
"Vehicle:SetAcceleration": {
"prefix": "Vehicle:SetAcceleration",
"description": "This command adjusts the amount of gas given to the vehicle engine, resulting in acceleration. A negative value will make the vehicle go in reverse.",
"body": ["number SetAcceleration($number_engineGasPedal)"]
},
"SetAcceleration ": {
"prefix": "SetAcceleration ",
"description": "This command adjusts the amount of gas given to the vehicle engine, resulting in acceleration. A negative value will make the vehicle go in reverse.",
"body": ["number SetAcceleration($number_engineGasPedal)"]
},
"Vehicle:SetBrakes": {
"prefix": "Vehicle:SetBrakes",
"description": "This command can be used to force a vehicle to slow down by applying brakes to each tire.",
"body": ["SetBrakes($number_brakes)"]
},
"SetBrakes": {
"prefix": "SetBrakes",
"description": "This command can be used to force a vehicle to slow down by applying brakes to each tire.",
"body": ["SetBrakes($number_brakes)"]
},
"Vehicle:SetHandBrakes": {
"prefix": "Vehicle:SetHandBrakes",
"description": "This command sets the brake force of the vehicle's emergency brake. Use this for keeping your car from rolling away when you park it.",
"body": ["SetHandBrakes($number_brakes)"]
},
"SetHandBrakes": {
"prefix": "SetHandBrakes",
"description": "This command sets the brake force of the vehicle's emergency brake. Use this for keeping your car from rolling away when you park it.",
"body": ["SetHandBrakes($number_brakes)"]
},
"Vehicle:SetEngineRunning": {
"prefix": "Vehicle:SetEngineRunning",
"description": "This command is used to turn the vehicle's engine on and off. You must turn a vehicle's engine on before it will start driving.",
"body": ["SetEngineRunning($bool_running)"]
},
"SetEngineRunning": {
"prefix": "SetEngineRunning",
"description": "This command is used to turn the vehicle's engine on and off. You must turn a vehicle's engine on before it will start driving.",
"body": ["SetEngineRunning($bool_running)"]
},
"Vehicle:SetSteering": {
"prefix": "Vehicle:SetSteering",
"description": "This command sets the steering angle of each steering tire on the vehicle. Tires must be created with the steering parameter set to true to respond to this command.",
"body": ["SetSteering($number_steering)"]
},
"SetSteering": {
"prefix": "SetSteering",
"description": "This command sets the steering angle of each steering tire on the vehicle. Tires must be created with the steering parameter set to true to respond to this command.",
"body": ["SetSteering($number_steering)"]
},
"VR:CenterTracking": {
"prefix": "VR:CenterTracking",
"description": "When seated VR tracking space is in use, this command will set the current headset orientation to be considered the origin.",
"body": ["CenterTracking()"]
},
"CenterTracking": {
"prefix": "CenterTracking",
"description": "When seated VR tracking space is in use, this command will set the current headset orientation to be considered the origin.",
"body": ["CenterTracking()"]
},
"VR:Enable": {
"prefix": "VR:Enable",
"description": "This function attempts to initialize a virtual reality environment.",
"body": ["boolean Enable()"]
},
"Enable ": {
"prefix": "Enable ",
"description": "This function attempts to initialize a virtual reality environment.",
"body": ["boolean Enable()"]
},
"VR:GetControllerAxis": {
"prefix": "VR:GetControllerAxis",
"description": "This function is used to retrieve the current input value for controller buttons that have analog input, like touchpads and triggers.",
"body": ["Vec2 GetControllerAxis($number_index, $number_button)"]
},
"GetControllerAxis": {
"prefix": "GetControllerAxis",
"description": "This function is used to retrieve the current input value for controller buttons that have analog input, like touchpads and triggers.",
"body": ["Vec2 GetControllerAxis($number_index, $number_button)"]
},
"VR:GetControllerButtonDown": {
"prefix": "VR:GetControllerButtonDown",
"description": "This function is used to retrieve the current input value for controller buttons.",
"body": ["bool GetControllerButtonDown($number_index, $number_button)"]
},
"GetControllerButtonDown": {
"prefix": "GetControllerButtonDown",
"description": "This function is used to retrieve the current input value for controller buttons.",
"body": ["bool GetControllerButtonDown($number_index, $number_button)"]
},
"VR:GetControllerButtonTouched": {
"prefix": "VR:GetControllerButtonTouched",
"description": "This function is used to tell if the user is currently touching a button.",
"body": ["bool GetControllerButtonTouched($number_index, $number_button)"]
},
"GetControllerButtonTouched": {
"prefix": "GetControllerButtonTouched",
"description": "This function is used to tell if the user is currently touching a button.",
"body": ["bool GetControllerButtonTouched($number_index, $number_button)"]
},
"VR:GetControllerButtonHit": {
"prefix": "VR:GetControllerButtonHit",
"description": "This function is used to tell if the user has pressed a button.",
"body": ["bool GetControllerButtonHit($number_index, $number_button)"]
},
"GetControllerButtonHit": {
"prefix": "GetControllerButtonHit",
"description": "This function is used to tell if the user has pressed a button.",
"body": ["bool GetControllerButtonHit($number_index, $number_button)"]
},
"VR:GetControllerModel": {
"prefix": "VR:GetControllerModel",
"description": "This function retrieves a VR controller model. It will display the correct model for all supported VR systems. The model will be positioned and rotated automatically according to the player's movements.Controllers take a moment to register in the VR environment, and the visual model is asynchronously loaded so as not to pause the game. Therefore your code should account for the possibility that this function will sometimes return NULL.By default a visual representation of the user's VR hardware will be displayed. If you want to replace the controllers with weapons or other items, simply hide the controller models.",
"body": ["Model GetControllerModel($number_index)"]
},
"GetControllerModel": {
"prefix": "GetControllerModel",
"description": "This function retrieves a VR controller model. It will display the correct model for all supported VR systems. The model will be positioned and rotated automatically according to the player's movements.Controllers take a moment to register in the VR environment, and the visual model is asynchronously loaded so as not to pause the game. Therefore your code should account for the possibility that this function will sometimes return NULL.By default a visual representation of the user's VR hardware will be displayed. If you want to replace the controllers with weapons or other items, simply hide the controller models.",
"body": ["Model GetControllerModel($number_index)"]
},
"VR:GetOffset": {
"prefix": "VR:GetOffset",
"description": "This function retrieves the current value to offset the virtual world from the real world.",
"body": ["Vec3 GetOffset()"]
},
"GetOffset": {
"prefix": "GetOffset",
"description": "This function retrieves the current value to offset the virtual world from the real world.",
"body": ["Vec3 GetOffset()"]
},
"VR:SetOffset": {
"prefix": "VR:SetOffset",
"description": "This function can be used to provide an offset between the real and virtual world. This allows you to teleport the player to different locations or recenter the player's position in virtual space.",
"body": ["SetOffset($Vec3_position)"]
},
"SetOffset": {
"prefix": "SetOffset",
"description": "This function can be used to provide an offset between the real and virtual world. This allows you to teleport the player to different locations or recenter the player's position in virtual space.",
"body": ["SetOffset($Vec3_position)"]
},
"VR:SetOffset ": {
"prefix": "VR:SetOffset ",
"description": "This function can be used to provide an offset between the real and virtual world. This allows you to teleport the player to different locations or recenter the player's position in virtual space.",
"body": ["SetOffset($number_x, $number_y, $number_z)"]
},
"SetOffset ": {
"prefix": "SetOffset ",
"description": "This function can be used to provide an offset between the real and virtual world. This allows you to teleport the player to different locations or recenter the player's position in virtual space.",
"body": ["SetOffset($number_x, $number_y, $number_z)"]
},
"VR:SetTrackingSpace": {
"prefix": "VR:SetTrackingSpace",
"description": "This function is used to select a room-space or seated VR tracking space.",
"body": ["SetTrackingSpace($number_trackingspace)"]
},
"SetTrackingSpace": {
"prefix": "SetTrackingSpace",
"description": "This function is used to select a room-space or seated VR tracking space.",
"body": ["SetTrackingSpace($number_trackingspace)"]
},
"VR:TriggerHapticPulse": {
"prefix": "VR:TriggerHapticPulse",
"description": "This function is used to send haptic feedback to a VR controller.",
"body": ["TriggerHapticPulse($number_index, $number_duration_=_1000)"]
},
"TriggerHapticPulse": {
"prefix": "TriggerHapticPulse",
"description": "This function is used to send haptic feedback to a VR controller.",
"body": ["TriggerHapticPulse($number_index, $number_duration_=_1000)"]
},
"Window:Closed": {
"prefix": "Window:Closed",
"description": "This function can be used to tell whether a window has been closed by the user.",
"body": ["bool Closed()"]
},
"Closed": {
"prefix": "Closed",
"description": "This function can be used to tell whether a window has been closed by the user.",
"body": ["bool Closed()"]
},
"Window:Create": {
"prefix": "Window:Create",
"description": "This function creates and returns a new window.",
"body": ["Window Create($string_title='Leadwerks', $number_x=0, $number_y=0, $number_width=1024, $number_height=768, $number_style=Titlebar)"]
},
"Create                     ": {
"prefix": "Create                     ",
"description": "This function creates and returns a new window.",
"body": ["Window Create($string_title='Leadwerks', $number_x=0, $number_y=0, $number_width=1024, $number_height=768, $number_style=Titlebar)"]
},
"Window:FlushKeys": {
"prefix": "Window:FlushKeys",
"description": "This function clears the state of all keys. The key state will not change again until the user presses a key. You can use this to clear previous key presses when switching to a game menu or after a long loading sequence.",
"body": ["FlushKeys()"]
},
"FlushKeys": {
"prefix": "FlushKeys",
"description": "This function clears the state of all keys. The key state will not change again until the user presses a key. You can use this to clear previous key presses when switching to a game menu or after a long loading sequence.",
"body": ["FlushKeys()"]
},
"Window:FlushMouse": {
"prefix": "Window:FlushMouse",
"description": "This function clears the state of all mouse buttons. The button state will not change again until the user presses a button. You can use this to clear previous button presses when switching to a game menu or after a long loading sequence.",
"body": ["FlushMouse()"]
},
"FlushMouse": {
"prefix": "FlushMouse",
"description": "This function clears the state of all mouse buttons. The button state will not change again until the user presses a button. You can use this to clear previous button presses when switching to a game menu or after a long loading sequence.",
"body": ["FlushMouse()"]
},
"Window:GetCurrent": {
"prefix": "Window:GetCurrent",
"description": "This function gets the active application window.",
"body": ["Window GetCurrent()"]
},
"GetCurrent ": {
"prefix": "GetCurrent ",
"description": "This function gets the active application window.",
"body": ["Window GetCurrent()"]
},
"Window:GetHeight": {
"prefix": "Window:GetHeight",
"description": "This function returns the outer height of a window in pixels.",
"body": ["number GetHeight()"]
},
"GetHeight   ": {
"prefix": "GetHeight   ",
"description": "This function returns the outer height of a window in pixels.",
"body": ["number GetHeight()"]
},
"Window:GetMousePosition": {
"prefix": "Window:GetMousePosition",
"description": "This function gets the mouse position. The X and Y components of the returned values are the screen coordinates, and the Z component is the mouse wheel position.",
"body": ["Vec3 GetMousePosition()"]
},
"GetMousePosition": {
"prefix": "GetMousePosition",
"description": "This function gets the mouse position. The X and Y components of the returned values are the screen coordinates, and the Z component is the mouse wheel position.",
"body": ["Vec3 GetMousePosition()"]
},
"Window:GetWidth": {
"prefix": "Window:GetWidth",
"description": "This function returns the outer width of a window in pixels.",
"body": ["number GetWidth()"]
},
"GetWidth  ": {
"prefix": "GetWidth  ",
"description": "This function returns the outer width of a window in pixels.",
"body": ["number GetWidth()"]
},
"Window:Hide": {
"prefix": "Window:Hide",
"description": "This function hides a window.",
"body": ["Hide()"]
},
"Hide ": {
"prefix": "Hide ",
"description": "This function hides a window.",
"body": ["Hide()"]
},
"Window:HideMouse": {
"prefix": "Window:HideMouse",
"description": "This functions hides the mouse cursor.",
"body": ["HideMouse()"]
},
"HideMouse": {
"prefix": "HideMouse",
"description": "This functions hides the mouse cursor.",
"body": ["HideMouse()"]
},
"Window:KeyDown": {
"prefix": "Window:KeyDown",
"description": "This function gets the keydown state of a window.",
"body": ["bool KeyDown($int_keycode)"]
},
"KeyDown": {
"prefix": "KeyDown",
"description": "This function gets the keydown state of a window.",
"body": ["bool KeyDown($int_keycode)"]
},
"Window:KeyHit": {
"prefix": "Window:KeyHit",
"description": "This function gets the keyhit state of a window.",
"body": ["bool KeyHit($int_keycode)"]
},
"KeyHit": {
"prefix": "KeyHit",
"description": "This function gets the keyhit state of a window.",
"body": ["bool KeyHit($int_keycode)"]
},
"Window:Maximize": {
"prefix": "Window:Maximize",
"description": "This function will maximize a window.",
"body": ["Maximize()"]
},
"Maximize": {
"prefix": "Maximize",
"description": "This function will maximize a window.",
"body": ["Maximize()"]
},
"Window:Maximized": {
"prefix": "Window:Maximized",
"description": "This function can be used to tell if a window is maximized.",
"body": ["bool Maximized()"]
},
"Maximized": {
"prefix": "Maximized",
"description": "This function can be used to tell if a window is maximized.",
"body": ["bool Maximized()"]
},
"Window:MouseDown": {
"prefix": "Window:MouseDown",
"description": "This function is used to tell if a mouse button is pressed.",
"body": ["bool MouseDown($number_button=1)"]
},
"MouseDown": {
"prefix": "MouseDown",
"description": "This function is used to tell if a mouse button is pressed.",
"body": ["bool MouseDown($number_button=1)"]
},
"Window:MouseHit": {
"prefix": "Window:MouseHit",
"description": "This function can be used to tell if a mouse button has been pressed since the last time it was tested.",
"body": ["bool MouseHit($number_button=1)"]
},
"MouseHit": {
"prefix": "MouseHit",
"description": "This function can be used to tell if a mouse button has been pressed since the last time it was tested.",
"body": ["bool MouseHit($number_button=1)"]
},
"Window:Restore": {
"prefix": "Window:Restore",
"description": "This function will restore the window from the maximized or minimized state.",
"body": ["number Restore()"]
},
"Restore": {
"prefix": "Restore",
"description": "This function will restore the window from the maximized or minimized state.",
"body": ["number Restore()"]
},
"Window:SetMousePosition": {
"prefix": "Window:SetMousePosition",
"description": "This function will move the mouse to the specified position.",
"body": ["SetMousePosition($number_x, $number_y)"]
},
"SetMousePosition": {
"prefix": "SetMousePosition",
"description": "This function will move the mouse to the specified position.",
"body": ["SetMousePosition($number_x, $number_y)"]
},
"Window:SetMousePosition ": {
"prefix": "Window:SetMousePosition ",
"description": "This function will move the mouse to the specified position.",
"body": ["SetMousePosition($number_z, $number_y, $number_z)"]
},
"SetMousePosition ": {
"prefix": "SetMousePosition ",
"description": "This function will move the mouse to the specified position.",
"body": ["SetMousePosition($number_z, $number_y, $number_z)"]
},
"Window:SetLayout": {
"prefix": "Window:SetLayout",
"description": "This function moves and resizes a window.",
"body": ["SetLayout($number_x, $number_y, $number_width, $number_height)"]
},
"SetLayout": {
"prefix": "SetLayout",
"description": "This function moves and resizes a window.",
"body": ["SetLayout($number_x, $number_y, $number_width, $number_height)"]
},
"Window:Show": {
"prefix": "Window:Show",
"description": "This function shows a hidden window.",
"body": ["Show()"]
},
"Show ": {
"prefix": "Show ",
"description": "This function shows a hidden window.",
"body": ["Show()"]
},
"Window:ShowMouse": {
"prefix": "Window:ShowMouse",
"description": "This functions hides the mouse cursor.",
"body": ["ShowMouse()"]
},
"ShowMouse": {
"prefix": "ShowMouse",
"description": "This functions hides the mouse cursor.",
"body": ["ShowMouse()"]
},
"World:BuildNavMesh": {
"prefix": "World:BuildNavMesh",
"description": "This function builds a navigation mesh for AI pathfinding.",
"body": ["bool BuildNavMesh($number_maxedgelength=12.0, $number_maxedgeerror=1.3)"]
},
"BuildNavMesh": {
"prefix": "BuildNavMesh",
"description": "This function builds a navigation mesh for AI pathfinding.",
"body": ["bool BuildNavMesh($number_maxedgelength=12.0, $number_maxedgeerror=1.3)"]
},
"World:Create": {
"prefix": "World:Create",
"description": "This function creates and returns a new world.",
"body": ["World Create()"]
},
"Create                      ": {
"prefix": "Create                      ",
"description": "This function creates and returns a new world.",
"body": ["World Create()"]
},
"World:Clear": {
"prefix": "World:Clear",
"description": "This function releases all entities in the specified world.",
"body": ["Clear($bool_force=false)"]
},
"Clear": {
"prefix": "Clear",
"description": "This function releases all entities in the specified world.",
"body": ["Clear($bool_force=false)"]
},
"World:ForEachEntityInAABBDo": {
"prefix": "World:ForEachEntityInAABBDo",
"description": "This command calls the specified function for all entities in the world that intersect the specified AABB. The optional extra parameter will be passed to the callback function each time it is called.",
"body": ["ForEachEntityInAABBDo($AABB_aabb, $callback(Entity_entity, $Object_extra), Object extra=NULL)"]
},
"ForEachEntityInAABBDo": {
"prefix": "ForEachEntityInAABBDo",
"description": "This command calls the specified function for all entities in the world that intersect the specified AABB. The optional extra parameter will be passed to the callback function each time it is called.",
"body": ["ForEachEntityInAABBDo($AABB_aabb, $callback(Entity_entity, $Object_extra), Object extra=NULL)"]
},
"World:ForEachEntityInAABBDo ": {
"prefix": "World:ForEachEntityInAABBDo ",
"description": "This command calls the specified function for all entities in the world that intersect the specified AABB. The optional extra parameter will be passed to the callback function each time it is called.",
"body": ["void ForEachEntityInAABBDo($AABB_aabb, $string_funcname, $Object_extra=NULL)"]
},
"ForEachEntityInAABBDo ": {
"prefix": "ForEachEntityInAABBDo ",
"description": "This command calls the specified function for all entities in the world that intersect the specified AABB. The optional extra parameter will be passed to the callback function each time it is called.",
"body": ["void ForEachEntityInAABBDo($AABB_aabb, $string_funcname, $Object_extra=NULL)"]
},
"World:ForEachVisibleEntityDo": {
"prefix": "World:ForEachVisibleEntityDo",
"description": "This command calls the specified function for all entities in the world that are visible to the specified camera. The optional extra parameter will be passed to the callback function each time it is called.",
"body": ["ForEachVisibleEntityDo($Camera_camera, $callback(Camera_camera, $Entity_entity, $Object_extra), Object extra = NULL)"]
},
"ForEachVisibleEntityDo": {
"prefix": "ForEachVisibleEntityDo",
"description": "This command calls the specified function for all entities in the world that are visible to the specified camera. The optional extra parameter will be passed to the callback function each time it is called.",
"body": ["ForEachVisibleEntityDo($Camera_camera, $callback(Camera_camera, $Entity_entity, $Object_extra), Object extra = NULL)"]
},
"World:ForEachVisibleEntityDo ": {
"prefix": "World:ForEachVisibleEntityDo ",
"description": "This command calls the specified function for all entities in the world that are visible to the specified camera. The optional extra parameter will be passed to the callback function each time it is called.",
"body": ["ForEachVisibleEntityDo($Camera_camera, $string_functionname, $Object_extra_=_NULL)"]
},
"ForEachVisibleEntityDo ": {
"prefix": "ForEachVisibleEntityDo ",
"description": "This command calls the specified function for all entities in the world that are visible to the specified camera. The optional extra parameter will be passed to the callback function each time it is called.",
"body": ["ForEachVisibleEntityDo($Camera_camera, $string_functionname, $Object_extra_=_NULL)"]
},
"World:GetCurrent": {
"prefix": "World:GetCurrent",
"description": "This function gets the current world. The current world is the world used when a new entity is created or loaded from a file.",
"body": ["World GetCurrent()"]
},
"GetCurrent  ": {
"prefix": "GetCurrent  ",
"description": "This function gets the current world. The current world is the world used when a new entity is created or loaded from a file.",
"body": ["World GetCurrent()"]
},
"World:GetGravity": {
"prefix": "World:GetGravity",
"description": "This function retrieves the world's gravity values.",
"body": ["Vec3 GetGravity()"]
},
"GetGravity": {
"prefix": "GetGravity",
"description": "This function retrieves the world's gravity values.",
"body": ["Vec3 GetGravity()"]
},
"World:GetLightQuality": {
"prefix": "World:GetLightQuality",
"description": "This function sets the world's light quality setting. This will effect the softness of shadow edges, and will also affect how far in the distance directional light shadows are visible.",
"body": ["number GetLightQuality()"]
},
"GetLightQuality": {
"prefix": "GetLightQuality",
"description": "This function sets the world's light quality setting. This will effect the softness of shadow edges, and will also affect how far in the distance directional light shadows are visible.",
"body": ["number GetLightQuality()"]
},
"World:GetWaterColor": {
"prefix": "World:GetWaterColor",
"description": "This command returns the world's water color. The value is returned whether or not water is enabled in the world.",
"body": ["Vec4 GetWaterColor()"]
},
"GetWaterColor": {
"prefix": "GetWaterColor",
"description": "This command returns the world's water color. The value is returned whether or not water is enabled in the world.",
"body": ["Vec4 GetWaterColor()"]
},
"World:GetWaterHeight": {
"prefix": "World:GetWaterHeight",
"description": "This command returns the world's water height. The value is returned whether or not water is enabled in the world.",
"body": ["number GetWaterHeight()"]
},
"GetWaterHeight": {
"prefix": "GetWaterHeight",
"description": "This command returns the world's water height. The value is returned whether or not water is enabled in the world.",
"body": ["number GetWaterHeight()"]
},
"World:GetWaterMode": {
"prefix": "World:GetWaterMode",
"description": "This command returns the world's water mode.",
"body": ["bool GetWaterMode()"]
},
"GetWaterMode": {
"prefix": "GetWaterMode",
"description": "This command returns the world's water mode.",
"body": ["bool GetWaterMode()"]
},
"World:GetWaterQuality": {
"prefix": "World:GetWaterQuality",
"description": "This command returns the world's current water quality setting.",
"body": ["number GetWaterQuality()"]
},
"GetWaterQuality": {
"prefix": "GetWaterQuality",
"description": "This command returns the world's current water quality setting.",
"body": ["number GetWaterQuality()"]
},
"World:Pick": {
"prefix": "World:Pick",
"description": "This function performs a pick operation on all entities in a world that intersect the specified line.",
"body": ["bool Pick($Vec3_p0, $Vec3_p1, $PickInfo_pickinfo, $number_radius=0.0, $bool_closest=false, $number_collisiontype=0)"]
},
"Pick   ": {
"prefix": "Pick   ",
"description": "This function performs a pick operation on all entities in a world that intersect the specified line.",
"body": ["bool Pick($Vec3_p0, $Vec3_p1, $PickInfo_pickinfo, $number_radius=0.0, $bool_closest=false, $number_collisiontype=0)"]
},
"World:Render": {
"prefix": "World:Render",
"description": "This function renders a world using the current buffer.",
"body": ["Render()"]
},
"Render": {
"prefix": "Render",
"description": "This function renders a world using the current buffer.",
"body": ["Render()"]
},
"World:SetAmbientLight": {
"prefix": "World:SetAmbientLight",
"description": "This function sets a world's ambient light level. This is the minimum light level a surface will be rendered with when no other lights are present.",
"body": ["SetAmbientLight($number_l)"]
},
"SetAmbientLight": {
"prefix": "SetAmbientLight",
"description": "This function sets a world's ambient light level. This is the minimum light level a surface will be rendered with when no other lights are present.",
"body": ["SetAmbientLight($number_l)"]
},
"World:SetAmbientLight ": {
"prefix": "World:SetAmbientLight ",
"description": "This function sets a world's ambient light level. This is the minimum light level a surface will be rendered with when no other lights are present.",
"body": ["SetAmbientLight($number_r, $number_g, $number_b)"]
},
"SetAmbientLight ": {
"prefix": "SetAmbientLight ",
"description": "This function sets a world's ambient light level. This is the minimum light level a surface will be rendered with when no other lights are present.",
"body": ["SetAmbientLight($number_r, $number_g, $number_b)"]
},
"World:SetAmbientLight  ": {
"prefix": "World:SetAmbientLight  ",
"description": "This function sets a world's ambient light level. This is the minimum light level a surface will be rendered with when no other lights are present.",
"body": ["SetAmbientLight($number_r, $number_g, $number_b, $number_a)"]
},
"SetAmbientLight  ": {
"prefix": "SetAmbientLight  ",
"description": "This function sets a world's ambient light level. This is the minimum light level a surface will be rendered with when no other lights are present.",
"body": ["SetAmbientLight($number_r, $number_g, $number_b, $number_a)"]
},
"World:SetCurrent": {
"prefix": "World:SetCurrent",
"description": "This function sets the current world. The current world is the world used when a new entity is created or loaded from a file.",
"body": ["SetCurrent($World_world)"]
},
"SetCurrent ": {
"prefix": "SetCurrent ",
"description": "This function sets the current world. The current world is the world used when a new entity is created or loaded from a file.",
"body": ["SetCurrent($World_world)"]
},
"World:SetGravity": {
"prefix": "World:SetGravity",
"description": "This function sets the world's gravity.",
"body": ["SetGravity($number_x, $number_y, $number_z)"]
},
"SetGravity": {
"prefix": "SetGravity",
"description": "This function sets the world's gravity.",
"body": ["SetGravity($number_x, $number_y, $number_z)"]
},
"World:SetLightQuality": {
"prefix": "World:SetLightQuality",
"description": "This function sets the world's light quality setting. This will effect the softness of shadow edges, and will also affect how far in the distance directional light shadows are visible.",
"body": ["SetLightQuality($number_quality)"]
},
"SetLightQuality": {
"prefix": "SetLightQuality",
"description": "This function sets the world's light quality setting. This will effect the softness of shadow edges, and will also affect how far in the distance directional light shadows are visible.",
"body": ["SetLightQuality($number_quality)"]
},
"World:SetPhysicsDetail": {
"prefix": "World:SetPhysicsDetail",
"description": "This function sets the accuracy of the physics solver.",
"body": ["SetPhysicsDetail($number_mode)"]
},
"SetPhysicsDetail": {
"prefix": "SetPhysicsDetail",
"description": "This function sets the accuracy of the physics solver.",
"body": ["SetPhysicsDetail($number_mode)"]
},
"World:SetWaterColor": {
"prefix": "World:SetWaterColor",
"description": "This command sets the diffuse color of the water.",
"body": ["SetWaterColor($number_red, $number_green, $number_blue, $number_alpha_=_1.0)"]
},
"SetWaterColor": {
"prefix": "SetWaterColor",
"description": "This command sets the diffuse color of the water.",
"body": ["SetWaterColor($number_red, $number_green, $number_blue, $number_alpha_=_1.0)"]
},
"World:SetWaterHeight": {
"prefix": "World:SetWaterHeight",
"description": "This command sets the water height. Water must be enabled for it to appear with World::SetWaterMode(true).",
"body": ["SetWaterHeight($number_height)"]
},
"SetWaterHeight": {
"prefix": "SetWaterHeight",
"description": "This command sets the water height. Water must be enabled for it to appear with World::SetWaterMode(true).",
"body": ["SetWaterHeight($number_height)"]
},
"World:SetWaterMode": {
"prefix": "World:SetWaterMode",
"description": "This command is used to toggle water on and off in the world.",
"body": ["SetWaterMode($bool_mode)"]
},
"SetWaterMode": {
"prefix": "SetWaterMode",
"description": "This command is used to toggle water on and off in the world.",
"body": ["SetWaterMode($bool_mode)"]
},
"World:SetWaterQuality": {
"prefix": "World:SetWaterQuality",
"description": "This command adjusts the quality of the world's water, when it is enabled.",
"body": ["SetWaterQuality($number_quality)"]
},
"SetWaterQuality": {
"prefix": "SetWaterQuality",
"description": "This command adjusts the quality of the world's water, when it is enabled.",
"body": ["SetWaterQuality($number_quality)"]
},
"World:Update": {
"prefix": "World:Update",
"description": "This function updates a world. Physics, particle emitters, navigation, and various other tasks will be updated. This function should be called once in the main game loop",
"body": ["number Update()"]
},
"Update     ": {
"prefix": "Update     ",
"description": "This function updates a world. Physics, particle emitters, navigation, and various other tasks will be updated. This function should be called once in the main game loop",
"body": ["number Update()"]
},
"Widget:AddItem": {
"prefix": "Widget:AddItem",
"description": "This function adds an item to a widget. Choiceboxes, listboxes, and tabbers will display their items and allow you to select one.",
"body": ["number AddItem($string_text, $boolean_selected=false)"]
},
"AddItem": {
"prefix": "AddItem",
"description": "This function adds an item to a widget. Choiceboxes, listboxes, and tabbers will display their items and allow you to select one.",
"body": ["number AddItem($string_text, $boolean_selected=false)"]
},
"Widget:Button": {
"prefix": "Widget:Button",
"description": "This function creates a button widget.The <i>style</i> value of the script can be set to any of the following:<ul><li>Push (default)</li><li>Checkbox</li><li>Link</li></ul>",
"body": ["global Widget Button($string_text, $number_x, $number_y, $number_width, $number_height, $Widget_parent)"]
},
"Button": {
"prefix": "Button",
"description": "This function creates a button widget.The <i>style</i> value of the script can be set to any of the following:<ul><li>Push (default)</li><li>Checkbox</li><li>Link</li></ul>",
"body": ["global Widget Button($string_text, $number_x, $number_y, $number_width, $number_height, $Widget_parent)"]
},
"Widget:Choicebox": {
"prefix": "Widget:Choicebox",
"description": "This function creates a choicebox widget. This allows the user to select from several options by clicking on the widget.",
"body": ["global Widget Choicebox($number_x, $number_y, $number_width, $number_height, $Widget_parent)"]
},
"Choicebox": {
"prefix": "Choicebox",
"description": "This function creates a choicebox widget. This allows the user to select from several options by clicking on the widget.",
"body": ["global Widget Choicebox($number_x, $number_y, $number_width, $number_height, $Widget_parent)"]
},
"Widget:CountItems": {
"prefix": "Widget:CountItems",
"description": "This function gets the number of items that have been added to a widget.",
"body": ["number CountItems()"]
},
"CountItems": {
"prefix": "CountItems",
"description": "This function gets the number of items that have been added to a widget.",
"body": ["number CountItems()"]
},
"Widget:Create": {
"prefix": "Widget:Create",
"description": "This function creates a custom widget.Set the script parameter to your own custom script.",
"body": ["global Widget Create($string_text, $number_x, $number_y, $number_width, $number_height, $Widget_parent, $string_scriptfile)"]
},
"Create                       ": {
"prefix": "Create                       ",
"description": "This function creates a custom widget.Set the script parameter to your own custom script.",
"body": ["global Widget Create($string_text, $number_x, $number_y, $number_width, $number_height, $Widget_parent, $string_scriptfile)"]
},
"Widget:Disable": {
"prefix": "Widget:Disable",
"description": "This function disables a widget so that no mouse or keyboard input will affect it. All child widgets will also be disabled.",
"body": ["Disable()"]
},
"Disable ": {
"prefix": "Disable ",
"description": "This function disables a widget so that no mouse or keyboard input will affect it. All child widgets will also be disabled.",
"body": ["Disable()"]
},
"Widget:Enable": {
"prefix": "Widget:Enable",
"description": "This function enables a disabled widget so that it can be interacted with again.",
"body": ["Enable()"]
},
"Enable  ": {
"prefix": "Enable  ",
"description": "This function enables a disabled widget so that it can be interacted with again.",
"body": ["Enable()"]
},
"Widget:GetClientSize": {
"prefix": "Widget:GetClientSize",
"description": "This function gets the client size of a widget. The client size is the padded area inside a widget in which child widgets can be created.By default the function will return logical coordinates that are unaffected by GUI scaling. You should always use logical coordinates when creating, positioning, and resizing widgets. Logical coordinates are based on typical sizing for a 1080p computer monitor.If scaled coordinates are specified, the actual pixel size will be returned.",
"body": ["iVec2 GetClientSize($boolean_scaledCoords=false)"]
},
"GetClientSize": {
"prefix": "GetClientSize",
"description": "This function gets the client size of a widget. The client size is the padded area inside a widget in which child widgets can be created.By default the function will return logical coordinates that are unaffected by GUI scaling. You should always use logical coordinates when creating, positioning, and resizing widgets. Logical coordinates are based on typical sizing for a 1080p computer monitor.If scaled coordinates are specified, the actual pixel size will be returned.",
"body": ["iVec2 GetClientSize($boolean_scaledCoords=false)"]
},
"Widget:GetDisabled": {
"prefix": "Widget:GetDisabled",
"description": "This function is used to tell if a widget is currently disabled.",
"body": ["boolean GetDisabled()"]
},
"GetDisabled": {
"prefix": "GetDisabled",
"description": "This function is used to tell if a widget is currently disabled.",
"body": ["boolean GetDisabled()"]
},
"Widget:GetHidden": {
"prefix": "Widget:GetHidden",
"description": "This function is used to tell if a widget is currently hidden.",
"body": ["boolean GetHidden()"]
},
"GetHidden": {
"prefix": "GetHidden",
"description": "This function is used to tell if a widget is currently hidden.",
"body": ["boolean GetHidden()"]
},
"Widget:GetItemText": {
"prefix": "Widget:GetItemText",
"description": "This function gets the text of the speficied widget item.",
"body": ["string GetItemText($number_item)"]
},
"GetItemText": {
"prefix": "GetItemText",
"description": "This function gets the text of the speficied widget item.",
"body": ["string GetItemText($number_item)"]
},
"Widget:GetPosition": {
"prefix": "Widget:GetPosition",
"description": "This function gets the position of a widget.By default the function will return logical coordinates that are unaffected by GUI scaling. You should always use logical coordinates when creating, positioning, and resizing widgets. Logical coordinates are based on typical sizing for a 1080p computer monitor.If scaled coordinates are specified, the actual pixel size will be returned.",
"body": ["iVec2 GetPosition($boolean_scaledCoords=false)"]
},
"GetPosition ": {
"prefix": "GetPosition ",
"description": "This function gets the position of a widget.By default the function will return logical coordinates that are unaffected by GUI scaling. You should always use logical coordinates when creating, positioning, and resizing widgets. Logical coordinates are based on typical sizing for a 1080p computer monitor.If scaled coordinates are specified, the actual pixel size will be returned.",
"body": ["iVec2 GetPosition($boolean_scaledCoords=false)"]
},
"Widget:GetSelectedItem": {
"prefix": "Widget:GetSelectedItem",
"description": "This function gets the index of the currently selected widget item. The default selected item is -1, meaning that no item is selected.",
"body": ["number GetSelectedItem()"]
},
"GetSelectedItem": {
"prefix": "GetSelectedItem",
"description": "This function gets the index of the currently selected widget item. The default selected item is -1, meaning that no item is selected.",
"body": ["number GetSelectedItem()"]
},
"Widget:GetSize": {
"prefix": "Widget:GetSize",
"description": "This function gets the size of a widget.By default the function will return logical coordinates that are unaffected by GUI scaling. You should always use logical coordinates when creating, positioning, and resizing widgets. Logical coordinates are based on typical sizing for a 1080p computer monitor.If scaled coordinates are specified, the actual pixel size will be returned.",
"body": ["iVec2 GetSize($boolean_scaledCoords=false)"]
},
"GetSize  ": {
"prefix": "GetSize  ",
"description": "This function gets the size of a widget.By default the function will return logical coordinates that are unaffected by GUI scaling. You should always use logical coordinates when creating, positioning, and resizing widgets. Logical coordinates are based on typical sizing for a 1080p computer monitor.If scaled coordinates are specified, the actual pixel size will be returned.",
"body": ["iVec2 GetSize($boolean_scaledCoords=false)"]
},
"Widget:GetState": {
"prefix": "Widget:GetState",
"description": "This function gets current state of a widget. This can be used to tell if a checkbox-style button is checked, or for other user-defined features.",
"body": ["boolean GetState()"]
},
"GetState ": {
"prefix": "GetState ",
"description": "This function gets current state of a widget. This can be used to tell if a checkbox-style button is checked, or for other user-defined features.",
"body": ["boolean GetState()"]
},
"Widget:GetText": {
"prefix": "Widget:GetText",
"description": "This function gets a widget's displayed text.",
"body": ["string GetText()"]
},
"GetText": {
"prefix": "GetText",
"description": "This function gets a widget's displayed text.",
"body": ["string GetText()"]
},
"Widget:Hide": {
"prefix": "Widget:Hide",
"description": "This function hides a widget so that it will not be visible and cannot be interacted with. All children of this widget will also be hidden.",
"body": ["Hide()"]
},
"Hide  ": {
"prefix": "Hide  ",
"description": "This function hides a widget so that it will not be visible and cannot be interacted with. All children of this widget will also be hidden.",
"body": ["Hide()"]
},
"Widget:Label": {
"prefix": "Widget:Label",
"description": "This function creates a label widget. A label is a non-interactive widget that displays a line of text.You can set the boolean value <i>border</i> to true to display a border around the label and increase the widget padding.",
"body": ["global Widget Label($string_text, $number_x, $number_y, $number_width, $number_height, $Widget_parent)"]
},
"Label": {
"prefix": "Label",
"description": "This function creates a label widget. A label is a non-interactive widget that displays a line of text.You can set the boolean value <i>border</i> to true to display a border around the label and increase the widget padding.",
"body": ["global Widget Label($string_text, $number_x, $number_y, $number_width, $number_height, $Widget_parent)"]
},
"Widget:ListBox": {
"prefix": "Widget:ListBox",
"description": "This function creates a listbox widget. The listbox will display a list of items the user can select from.",
"body": ["global Widget ListBox($number_x, $number_y, $number_width, $number_height, $Widget_parent)"]
},
"ListBox": {
"prefix": "ListBox",
"description": "This function creates a listbox widget. The listbox will display a list of items the user can select from.",
"body": ["global Widget ListBox($number_x, $number_y, $number_width, $number_height, $Widget_parent)"]
},
"Widget:Panel": {
"prefix": "Widget:Panel",
"description": "This function creates a panel widget. A panel is a blank non-interactive widget used to group other widgets.You can set the script boolean value <i>border</i> to true to enable a visible border and increase the widget padding.",
"body": ["global Widget Panel($number_x, $number_y, $number_width, $number_height, $Widget_parent)"]
},
"Panel": {
"prefix": "Panel",
"description": "This function creates a panel widget. A panel is a blank non-interactive widget used to group other widgets.You can set the script boolean value <i>border</i> to true to enable a visible border and increase the widget padding.",
"body": ["global Widget Panel($number_x, $number_y, $number_width, $number_height, $Widget_parent)"]
},
"Widget:ProgressBar": {
"prefix": "Widget:ProgressBar",
"description": "This function creates a progressbar widget. A progressbar displays the progress of a task that is being performed.You can set the script float value <i>progress</i> to adjust the displayed progress.",
"body": ["global Widget ProgressBar($number_x, $number_y, $number_width, $number_height, $Widget_parent)"]
},
"ProgressBar": {
"prefix": "ProgressBar",
"description": "This function creates a progressbar widget. A progressbar displays the progress of a task that is being performed.You can set the script float value <i>progress</i> to adjust the displayed progress.",
"body": ["global Widget ProgressBar($number_x, $number_y, $number_width, $number_height, $Widget_parent)"]
},
"Widget:SelectItem": {
"prefix": "Widget:SelectItem",
"description": "This function selects a widget item.",
"body": ["SelectItem($number_item)"]
},
"SelectItem": {
"prefix": "SelectItem",
"description": "This function selects a widget item.",
"body": ["SelectItem($number_item)"]
},
"Widget:SetAlignment": {
"prefix": "Widget:SetAlignment",
"description": "This function is used to control how a widget scales when its parent is resized.",
"body": ["SetAlignment($boolean_left, $boolean_right, $boolean_top, $boolean_bottom)"]
},
"SetAlignment": {
"prefix": "SetAlignment",
"description": "This function is used to control how a widget scales when its parent is resized.",
"body": ["SetAlignment($boolean_left, $boolean_right, $boolean_top, $boolean_bottom)"]
},
"Widget:SetBool": {
"prefix": "Widget:SetBool",
"description": "This function sets a user-defined boolean variable in a widget script.",
"body": ["SetBool($string_name, $boolean_value)"]
},
"SetBool": {
"prefix": "SetBool",
"description": "This function sets a user-defined boolean variable in a widget script.",
"body": ["SetBool($string_name, $boolean_value)"]
},
"Widget:SetFloat": {
"prefix": "Widget:SetFloat",
"description": "This function sets a user-defined number variable in a widget script.",
"body": ["SetFloat($string_name, $number_value)"]
},
"SetFloat  ": {
"prefix": "SetFloat  ",
"description": "This function sets a user-defined number variable in a widget script.",
"body": ["SetFloat($string_name, $number_value)"]
},
"Widget:SetLayout": {
"prefix": "Widget:SetLayout",
"description": "This function sets the position and size of a widget, in logical units.",
"body": ["SetLayout($number_x, $number_y, $number_width, $number_height)"]
},
"SetLayout ": {
"prefix": "SetLayout ",
"description": "This function sets the position and size of a widget, in logical units.",
"body": ["SetLayout($number_x, $number_y, $number_width, $number_height)"]
},
"Widget:SetString": {
"prefix": "Widget:SetString",
"description": "This function sets a user-defined string variable in a widget script.",
"body": ["SetString($string_name, $string_value)"]
},
"SetString": {
"prefix": "SetString",
"description": "This function sets a user-defined string variable in a widget script.",
"body": ["SetString($string_name, $string_value)"]
},
"Widget:SetState": {
"prefix": "Widget:SetState",
"description": "This function sets the state of a widget. This can be used to make a checkbox-style button checked or utilize other user-defined features.",
"body": ["SetState($boolean_state)"]
},
"SetState": {
"prefix": "SetState",
"description": "This function sets the state of a widget. This can be used to make a checkbox-style button checked or utilize other user-defined features.",
"body": ["SetState($boolean_state)"]
},
"Widget:SetText": {
"prefix": "Widget:SetText",
"description": "This function sets the text that is displayed on the widget.",
"body": ["SetText($string_text)"]
},
"SetText": {
"prefix": "SetText",
"description": "This function sets the text that is displayed on the widget.",
"body": ["SetText($string_text)"]
},
"Widget:Show": {
"prefix": "Widget:Show",
"description": "This function shows a hidden widget so that it is visible and can be interacted with again.",
"body": ["Show()"]
},
"Show  ": {
"prefix": "Show  ",
"description": "This function shows a hidden widget so that it is visible and can be interacted with again.",
"body": ["Show()"]
},
"Widget:Slider": {
"prefix": "Widget:Slider",
"description": "This function creates a slider widget. A slider allows the user to drag a knob to adjust a setting within a fixed range of allowed values.",
"body": ["global Widget Slider($number_x, $number_y, $number_width, $number_height, $Widget_parent)"]
},
"Slider ": {
"prefix": "Slider ",
"description": "This function creates a slider widget. A slider allows the user to drag a knob to adjust a setting within a fixed range of allowed values.",
"body": ["global Widget Slider($number_x, $number_y, $number_width, $number_height, $Widget_parent)"]
},
"Widget:Tabber": {
"prefix": "Widget:Tabber",
"description": "This function creates a tabber widget. A tabber is a panel with selecteable tabs displayed at the top. Use AddItem() to add a new tab.",
"body": ["global Widget Tabber($number_x, $number_y, $number_width, $number_height, $Widget_parent)"]
},
"Tabber": {
"prefix": "Tabber",
"description": "This function creates a tabber widget. A tabber is a panel with selecteable tabs displayed at the top. Use AddItem() to add a new tab.",
"body": ["global Widget Tabber($number_x, $number_y, $number_width, $number_height, $Widget_parent)"]
},
"Widget:TextArea": {
"prefix": "Widget:TextArea",
"description": "This function creates a textarea widget. A textarea is read-only widget that can display multiple lines of text.",
"body": ["global Widget TextArea($number_x, $number_y, $number_width, $number_height, $Widget_parent)"]
},
"TextArea": {
"prefix": "TextArea",
"description": "This function creates a textarea widget. A textarea is read-only widget that can display multiple lines of text.",
"body": ["global Widget TextArea($number_x, $number_y, $number_width, $number_height, $Widget_parent)"]
},
"Widget:TextField": {
"prefix": "Widget:TextField",
"description": "This function creates a textfield widget. A textfield is an editable line of text the user may modify with keyboard input.",
"body": ["global Widget TextField($string_text, $number_x, $number_y, $number_width, $number_height, $Widget_parent)"]
},
"TextField": {
"prefix": "TextField",
"description": "This function creates a textfield widget. A textfield is an editable line of text the user may modify with keyboard input.",
"body": ["global Widget TextField($string_text, $number_x, $number_y, $number_width, $number_height, $Widget_parent)"]
}
}