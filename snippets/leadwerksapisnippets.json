{"Entity:AddForce": {
"prefix": "Entity:AddForce",
"description": ["This function applies a force to an entity.",
\r\n" - x: the x component of the force to apply.",
\r\n" - Y: the y component of the force to apply.",
\r\n" - z: the z component of the force to apply.",
\r\n" - Force: the force to apply"],
"body": ["AddForce($number_x, $number_y, $number_z, $bool_global_=_true)"]
},
"AddForce": {
"prefix": "AddForce",
"description": ["This function applies a force to an entity.",
\r\n" - x: the x component of the force to apply.",
\r\n" - Y: the y component of the force to apply.",
\r\n" - z: the z component of the force to apply.",
\r\n" - Force: the force to apply"],
"body": ["AddForce($number_x, $number_y, $number_z, $bool_global_=_true)"]
},
"Entity:AddForce ": {
"prefix": "Entity:AddForce ",
"description": ["This function applies a force to an entity.",
\r\n" - x: the x component of the force to apply.",
\r\n" - Y: the y component of the force to apply.",
\r\n" - z: the z component of the force to apply.",
\r\n" - Force: the force to apply"],
"body": ["AddForce($Vec3_force, $bool_global_=_true)"]
},
"AddForce ": {
"prefix": "AddForce ",
"description": ["This function applies a force to an entity.",
\r\n" - x: the x component of the force to apply.",
\r\n" - Y: the y component of the force to apply.",
\r\n" - z: the z component of the force to apply.",
\r\n" - Force: the force to apply"],
"body": ["AddForce($Vec3_force, $bool_global_=_true)"]
},
"Entity:AddPointForce": {
"prefix": "Entity:AddPointForce",
"description": ["This function adds a force at a specific position on an entity, transforming the force into both a force and torque value. This can be used to simulate realistic impacts like bullets hitting an object.",
\r\n" - Force: the force to add.",
\r\n" - fx: the x component of the force to add.",
\r\n" - fy: the y component of the force to add.",
\r\n" - fz: the z component of the force to add.",
\r\n" - px: the x component of the position to add the force at.",
\r\n" - py: the y component of the position to add the force at.",
\r\n" - pz: the z component of the position to add the force at.",
\r\n" - position: the position to add the force at."],
"body": ["AddPointForce($number_fx, $number_fy, $number_fz, $number_px, $number_py, $number_pz, $bool_global=true)"]
},
"AddPointForce": {
"prefix": "AddPointForce",
"description": ["This function adds a force at a specific position on an entity, transforming the force into both a force and torque value. This can be used to simulate realistic impacts like bullets hitting an object.",
\r\n" - Force: the force to add.",
\r\n" - fx: the x component of the force to add.",
\r\n" - fy: the y component of the force to add.",
\r\n" - fz: the z component of the force to add.",
\r\n" - px: the x component of the position to add the force at.",
\r\n" - py: the y component of the position to add the force at.",
\r\n" - pz: the z component of the position to add the force at.",
\r\n" - position: the position to add the force at."],
"body": ["AddPointForce($number_fx, $number_fy, $number_fz, $number_px, $number_py, $number_pz, $bool_global=true)"]
},
"Entity:AddPointForce ": {
"prefix": "Entity:AddPointForce ",
"description": ["This function adds a force at a specific position on an entity, transforming the force into both a force and torque value. This can be used to simulate realistic impacts like bullets hitting an object.",
\r\n" - Force: the force to add.",
\r\n" - fx: the x component of the force to add.",
\r\n" - fy: the y component of the force to add.",
\r\n" - fz: the z component of the force to add.",
\r\n" - px: the x component of the position to add the force at.",
\r\n" - py: the y component of the position to add the force at.",
\r\n" - pz: the z component of the position to add the force at.",
\r\n" - position: the position to add the force at."],
"body": ["AddPointForce($Vec3_force, $Vec3_position, $bool_global=true)"]
},
"AddPointForce ": {
"prefix": "AddPointForce ",
"description": ["This function adds a force at a specific position on an entity, transforming the force into both a force and torque value. This can be used to simulate realistic impacts like bullets hitting an object.",
\r\n" - Force: the force to add.",
\r\n" - fx: the x component of the force to add.",
\r\n" - fy: the y component of the force to add.",
\r\n" - fz: the z component of the force to add.",
\r\n" - px: the x component of the position to add the force at.",
\r\n" - py: the y component of the position to add the force at.",
\r\n" - pz: the z component of the position to add the force at.",
\r\n" - position: the position to add the force at."],
"body": ["AddPointForce($Vec3_force, $Vec3_position, $bool_global=true)"]
},
"Entity:AddTorque": {
"prefix": "Entity:AddTorque",
"description": ["This function adds torque (angular force) to an entity.",
\r\n" - x: x component of the torque to add.",
\r\n" - Y: y component of the torque to add.",
\r\n" - z: z component of the torque to add.",
\r\n" - torque: the torque to add."],
"body": ["AddTorque($number_x, $number_y, $number_z, $bool_global_=_true)"]
},
"AddTorque": {
"prefix": "AddTorque",
"description": ["This function adds torque (angular force) to an entity.",
\r\n" - x: x component of the torque to add.",
\r\n" - Y: y component of the torque to add.",
\r\n" - z: z component of the torque to add.",
\r\n" - torque: the torque to add."],
"body": ["AddTorque($number_x, $number_y, $number_z, $bool_global_=_true)"]
},
"Entity:AddTorque ": {
"prefix": "Entity:AddTorque ",
"description": ["This function adds torque (angular force) to an entity.",
\r\n" - x: x component of the torque to add.",
\r\n" - Y: y component of the torque to add.",
\r\n" - z: z component of the torque to add.",
\r\n" - torque: the torque to add."],
"body": ["AddTorque($Vec3_torque, $bool_global_=_true)"]
},
"AddTorque ": {
"prefix": "AddTorque ",
"description": ["This function adds torque (angular force) to an entity.",
\r\n" - x: x component of the torque to add.",
\r\n" - Y: y component of the torque to add.",
\r\n" - z: z component of the torque to add.",
\r\n" - torque: the torque to add."],
"body": ["AddTorque($Vec3_torque, $bool_global_=_true)"]
},
"Entity:AlignToVector": {
"prefix": "Entity:AlignToVector",
"description": ["This function can be used to orient an entity's axis to match a user-defined axis in world space.",
\r\n" - x: the X component of the axis.",
\r\n" - Y: the Y component of the axis.",
\r\n" - z: the X component of the axis.",
\r\n" - axis: the entity axis to align. This may be 0, 1, or 2 for the X, Y, and Z axes, respectively.",
\r\n" - rate: if less than 1.0, this will be used to interpolate between the entity's current rotation and the new rotation.",
\r\n" - roll: the rotation value around the specified axis to orient the entity to."],
"body": ["AlignToVector($number_x, $number_y, $number_z, $number_axis=2, $number_rate_=_1.0, $number_roll_=_0.0)"]
},
"AlignToVector": {
"prefix": "AlignToVector",
"description": ["This function can be used to orient an entity's axis to match a user-defined axis in world space.",
\r\n" - x: the X component of the axis.",
\r\n" - Y: the Y component of the axis.",
\r\n" - z: the X component of the axis.",
\r\n" - axis: the entity axis to align. This may be 0, 1, or 2 for the X, Y, and Z axes, respectively.",
\r\n" - rate: if less than 1.0, this will be used to interpolate between the entity's current rotation and the new rotation.",
\r\n" - roll: the rotation value around the specified axis to orient the entity to."],
"body": ["AlignToVector($number_x, $number_y, $number_z, $number_axis=2, $number_rate_=_1.0, $number_roll_=_0.0)"]
},
"Entity:AlignToVector ": {
"prefix": "Entity:AlignToVector ",
"description": ["This function can be used to orient an entity's axis to match a user-defined axis in world space.",
\r\n" - x: the X component of the axis.",
\r\n" - Y: the Y component of the axis.",
\r\n" - z: the X component of the axis.",
\r\n" - axis: the entity axis to align. This may be 0, 1, or 2 for the X, Y, and Z axes, respectively.",
\r\n" - rate: if less than 1.0, this will be used to interpolate between the entity's current rotation and the new rotation.",
\r\n" - roll: the rotation value around the specified axis to orient the entity to."],
"body": ["void AlignToVector($Vec3_v, $number_axis=2, $number_rate_=_1.0, $number_roll_=_0.0)"]
},
"AlignToVector ": {
"prefix": "AlignToVector ",
"description": ["This function can be used to orient an entity's axis to match a user-defined axis in world space.",
\r\n" - x: the X component of the axis.",
\r\n" - Y: the Y component of the axis.",
\r\n" - z: the X component of the axis.",
\r\n" - axis: the entity axis to align. This may be 0, 1, or 2 for the X, Y, and Z axes, respectively.",
\r\n" - rate: if less than 1.0, this will be used to interpolate between the entity's current rotation and the new rotation.",
\r\n" - roll: the rotation value around the specified axis to orient the entity to."],
"body": ["void AlignToVector($Vec3_v, $number_axis=2, $number_rate_=_1.0, $number_roll_=_0.0)"]
},
"Entity:Copy": {
"prefix": "Entity:Copy",
"description": ["This function creates and returns a unique duplicate of the specified entity.",
\r\n" - recursive: if set to true, copies of the entity's children will be made and parented to the new entity."],
"body": ["Entity Copy($bool_recursive=true)"]
},
"Copy": {
"prefix": "Copy",
"description": ["This function creates and returns a unique duplicate of the specified entity.",
\r\n" - recursive: if set to true, copies of the entity's children will be made and parented to the new entity."],
"body": ["Entity Copy($bool_recursive=true)"]
},
"Entity:EmitSound": {
"prefix": "Entity:EmitSound",
"description": ["This function plays a sound at an entity's position in 3D space. Spatialized sounds must be in mono format.",
\r\n" - sound: the new pick radius to set.",
\r\n" - range: the new pick radius to set.",
\r\n" - volume: the new pick radius to set.",
\r\n" - pitch: the new pick radius to set.",
\r\n" - loopmode: the new pick radius to set."],
"body": ["number EmitSound($Sound_sound, $number_range=50, $number_volume=1, $number_pitch=1, $bool_loopmode=false)"]
},
"EmitSound": {
"prefix": "EmitSound",
"description": ["This function plays a sound at an entity's position in 3D space. Spatialized sounds must be in mono format.",
\r\n" - sound: the new pick radius to set.",
\r\n" - range: the new pick radius to set.",
\r\n" - volume: the new pick radius to set.",
\r\n" - pitch: the new pick radius to set.",
\r\n" - loopmode: the new pick radius to set."],
"body": ["number EmitSound($Sound_sound, $number_range=50, $number_volume=1, $number_pitch=1, $bool_loopmode=false)"]
},
"Entity:EmitSound ": {
"prefix": "Entity:EmitSound ",
"description": ["This function plays a sound at an entity's position in 3D space. Spatialized sounds must be in mono format.",
\r\n" - sound: the new pick radius to set.",
\r\n" - range: the new pick radius to set.",
\r\n" - volume: the new pick radius to set.",
\r\n" - pitch: the new pick radius to set.",
\r\n" - loopmode: the new pick radius to set."],
"body": ["EmitSound($Source_source)"]
},
"EmitSound ": {
"prefix": "EmitSound ",
"description": ["This function plays a sound at an entity's position in 3D space. Spatialized sounds must be in mono format.",
\r\n" - sound: the new pick radius to set.",
\r\n" - range: the new pick radius to set.",
\r\n" - volume: the new pick radius to set.",
\r\n" - pitch: the new pick radius to set.",
\r\n" - loopmode: the new pick radius to set."],
"body": ["EmitSound($Source_source)"]
},
"Entity:FindChild": {
"prefix": "Entity:FindChild",
"description": ["This function performs a recursive search and returns the first child entity it finds with the specified name.",
\r\n" - name: the name of the child entity to search for."],
"body": ["Entity FindChild($string_name)"]
},
"FindChild": {
"prefix": "FindChild",
"description": ["This function performs a recursive search and returns the first child entity it finds with the specified name.",
\r\n" - name: the name of the child entity to search for."],
"body": ["Entity FindChild($string_name)"]
},
"Entity:GetAABB": {
"prefix": "Entity:GetAABB",
"description": ["This function returns an entity's axis-aligned bounding box (AABB).",
\r\n" - mode: this may be any of the following values:            LocalAABB: the entity AABB in local space will be returned.            GlobalAABB: the entity AABB in global space will be returned.            RecursiveAABB: the recursive bounding box will be returned, encompassing the global bounding box of this entity, and the global bounding boxes of all its children."],
"body": ["AABB GetAABB($number_mode_=_GlobalAABB)"]
},
"GetAABB": {
"prefix": "GetAABB",
"description": ["This function returns an entity's axis-aligned bounding box (AABB).",
\r\n" - mode: this may be any of the following values:            LocalAABB: the entity AABB in local space will be returned.            GlobalAABB: the entity AABB in global space will be returned.            RecursiveAABB: the recursive bounding box will be returned, encompassing the global bounding box of this entity, and the global bounding boxes of all its children."],
"body": ["AABB GetAABB($number_mode_=_GlobalAABB)"]
},
"Entity:GetAnimationLength": {
"prefix": "Entity:GetAnimationLength",
"description": ["This function gets the number of frames in an entity's animation sequence.",
\r\n" - index: the animation sequence to get the length of.",
\r\n" - name: the name of the animation sequence to use, i.e. 'walk', 'run', 'attack', etc."],
"body": ["number GetAnimationLength($number_index)"]
},
"GetAnimationLength": {
"prefix": "GetAnimationLength",
"description": ["This function gets the number of frames in an entity's animation sequence.",
\r\n" - index: the animation sequence to get the length of.",
\r\n" - name: the name of the animation sequence to use, i.e. 'walk', 'run', 'attack', etc."],
"body": ["number GetAnimationLength($number_index)"]
},
"Entity:GetAnimationLength ": {
"prefix": "Entity:GetAnimationLength ",
"description": ["This function gets the number of frames in an entity's animation sequence.",
\r\n" - index: the animation sequence to get the length of.",
\r\n" - name: the name of the animation sequence to use, i.e. 'walk', 'run', 'attack', etc."],
"body": ["number GetAnimationLength($string_name)"]
},
"GetAnimationLength ": {
"prefix": "GetAnimationLength ",
"description": ["This function gets the number of frames in an entity's animation sequence.",
\r\n" - index: the animation sequence to get the length of.",
\r\n" - name: the name of the animation sequence to use, i.e. 'walk', 'run', 'attack', etc."],
"body": ["number GetAnimationLength($string_name)"]
},
"Entity:GetChild": {
"prefix": "Entity:GetChild",
"description": ["This function gets the entity child at the specified index.",
\r\n" - index: the index of the child entity to retrieve. Entity children are numbered from 0 to CountChildren()-1"],
"body": ["Entity GetChild($index)"]
},
"GetChild": {
"prefix": "GetChild",
"description": ["This function gets the entity child at the specified index.",
\r\n" - index: the index of the child entity to retrieve. Entity children are numbered from 0 to CountChildren()-1"],
"body": ["Entity GetChild($index)"]
},
"Entity:GetColor": {
"prefix": "Entity:GetColor",
"description": ["This function gets an entity's color.",
\r\n" - mode: (number): the color to get. This may be Color.Diffuse or Color.Specular."],
"body": ["GetColor($mode=Color.Diffuse)"]
},
"GetColor": {
"prefix": "GetColor",
"description": ["This function gets an entity's color.",
\r\n" - mode: (number): the color to get. This may be Color.Diffuse or Color.Specular."],
"body": ["GetColor($mode=Color.Diffuse)"]
},
"Entity:GetCulled": {
"prefix": "Entity:GetCulled",
"description": ["This function indicates whether an entity has been culled from rendering or not."],
"body": ["bool GetCulled($camera=nil)"]
},
"GetCulled": {
"prefix": "GetCulled",
"description": ["This function indicates whether an entity has been culled from rendering or not."],
"body": ["bool GetCulled($camera=nil)"]
},
"Entity:GetDistance": {
"prefix": "Entity:GetDistance",
"description": ["This function returns the distance between two entities in global space.",
\r\n" - entity: the entity to find the distance to."],
"body": ["number GetDistance($Entity_entity)"]
},
"GetDistance": {
"prefix": "GetDistance",
"description": ["This function returns the distance between two entities in global space.",
\r\n" - entity: the entity to find the distance to."],
"body": ["number GetDistance($Entity_entity)"]
},
"Entity:GetDistance ": {
"prefix": "Entity:GetDistance ",
"description": ["This function returns the distance between two entities in global space.",
\r\n" - entity: the entity to find the distance to."],
"body": ["number GetDistance($Vec3_position, $bool_useshape_=_false)"]
},
"GetDistance ": {
"prefix": "GetDistance ",
"description": ["This function returns the distance between two entities in global space.",
\r\n" - entity: the entity to find the distance to."],
"body": ["number GetDistance($Vec3_position, $bool_useshape_=_false)"]
},
"Entity:GetIntensity": {
"prefix": "Entity:GetIntensity",
"description": ["This function gets the intensity of an entity's color. The intensity is a multiplier used to increase or decrease the brightness of an entity's color.",
\r\n" - mode: (number): the color mode to use. This may be Entity::DiffuseColor or Entity::SpecularColor."],
"body": ["GetIntensity($mode=Color.Diffuse)"]
},
"GetIntensity": {
"prefix": "GetIntensity",
"description": ["This function gets the intensity of an entity's color. The intensity is a multiplier used to increase or decrease the brightness of an entity's color.",
\r\n" - mode: (number): the color mode to use. This may be Entity::DiffuseColor or Entity::SpecularColor."],
"body": ["GetIntensity($mode=Color.Diffuse)"]
},
"Entity:GetMatrix": {
"prefix": "Entity:GetMatrix",
"description": ["This function gets an entity's 4x4 matrix."],
"body": ["Mat4 GetMatrix($bool_global_=_true)"]
},
"GetMatrix": {
"prefix": "GetMatrix",
"description": ["This function gets an entity's 4x4 matrix."],
"body": ["Mat4 GetMatrix($bool_global_=_true)"]
},
"Entity:GetOmega": {
"prefix": "Entity:GetOmega",
"description": ["This function gets entity's omega (angular velocity), in global or local space."],
"body": ["Vec3 GetOmega($bool_global_=_true)"]
},
"GetOmega": {
"prefix": "GetOmega",
"description": ["This function gets entity's omega (angular velocity), in global or local space."],
"body": ["Vec3 GetOmega($bool_global_=_true)"]
},
"Entity:GetPickMode": {
"prefix": "Entity:GetPickMode",
"description": ["This function gets an entity's pick mode."],
"body": ["number GetPickMode()"]
},
"GetPickMode": {
"prefix": "GetPickMode",
"description": ["This function gets an entity's pick mode."],
"body": ["number GetPickMode()"]
},
"Entity:GetVelocity": {
"prefix": "Entity:GetVelocity",
"description": ["This function gets entity's velocity, in global or local space."],
"body": ["Vec3 GetVelocity($bool_global_=_true)"]
},
"GetVelocity": {
"prefix": "GetVelocity",
"description": ["This function gets entity's velocity, in global or local space."],
"body": ["Vec3 GetVelocity($bool_global_=_true)"]
},
"Entity:GetQuaternion": {
"prefix": "Entity:GetQuaternion",
"description": ["This function gets the quaternion rotation of an entity. A quaternion is a special rotation value that is more accurate than Euler angles in some situations."],
"body": ["Quat GetQuaterion($bool_global_=_false)"]
},
"GetQuaternion": {
"prefix": "GetQuaternion",
"description": ["This function gets the quaternion rotation of an entity. A quaternion is a special rotation value that is more accurate than Euler angles in some situations."],
"body": ["Quat GetQuaterion($bool_global_=_false)"]
},
"Entity:GetVelocity ": {
"prefix": "Entity:GetVelocity ",
"description": ["This function gets entity's velocity, in global or local space."],
"body": ["Vec3 GetVelocity($bool_global_=_true)"]
},
"GetVelocity ": {
"prefix": "GetVelocity ",
"description": ["This function gets entity's velocity, in global or local space."],
"body": ["Vec3 GetVelocity($bool_global_=_true)"]
},
"Entity:Instance": {
"prefix": "Entity:Instance",
"description": ["This function creates and returns a new instance of the specified entity. Because the function will not duplicate model surfaces, it is generally fast enough for real-time use."],
"body": ["Entity Instance($recursive=true)"]
},
"Instance": {
"prefix": "Instance",
"description": ["This function creates and returns a new instance of the specified entity. Because the function will not duplicate model surfaces, it is generally fast enough for real-time use."],
"body": ["Entity Instance($recursive=true)"]
},
"Entity:Move": {
"prefix": "Entity:Move",
"description": ["Sets the position of an entity in 3-dimensional space, using local or global coordinates.",
\r\n" - x: the X component of the movement to add.",
\r\n" - Y: the Y component of the movement to add.",
\r\n" - z: the Z component of the movement to add.",
\r\n" - position: the movement to add."],
"body": ["void Move($Vec3_position, $bool_global=false)"]
},
"Move": {
"prefix": "Move",
"description": ["Sets the position of an entity in 3-dimensional space, using local or global coordinates.",
\r\n" - x: the X component of the movement to add.",
\r\n" - Y: the Y component of the movement to add.",
\r\n" - z: the Z component of the movement to add.",
\r\n" - position: the movement to add."],
"body": ["void Move($Vec3_position, $bool_global=false)"]
},
"Entity:Move ": {
"prefix": "Entity:Move ",
"description": ["Sets the position of an entity in 3-dimensional space, using local or global coordinates.",
\r\n" - x: the X component of the movement to add.",
\r\n" - Y: the Y component of the movement to add.",
\r\n" - z: the Z component of the movement to add.",
\r\n" - position: the movement to add."],
"body": ["void Move($number_x, $number_y, $number_z, $bool_global=false)"]
},
"Move ": {
"prefix": "Move ",
"description": ["Sets the position of an entity in 3-dimensional space, using local or global coordinates.",
\r\n" - x: the X component of the movement to add.",
\r\n" - Y: the Y component of the movement to add.",
\r\n" - z: the Z component of the movement to add.",
\r\n" - position: the movement to add."],
"body": ["void Move($number_x, $number_y, $number_z, $bool_global=false)"]
},
"Entity:Pick": {
"prefix": "Entity:Pick",
"description": ["This function performs a pick operation on a single entity.",
\r\n" - p0: the origin of the ray in global coordinates.",
\r\n" - p1: the terminal end of the ray in global coordinates.",
\r\n" - pick: a pick object to contain pick information.",
\r\n" - radius: the radius of the ray. If the radius is greater than 0.0, a slower swept sphere collision will be performed.",
\r\n" - closest: if set to true, the closest intersection will be found, otherwise the operation will return as soon as a single intersection is found.",
\r\n" - recursive: if set to true, the entity's sub-hierarchy will be tested recursively.",
\r\n" - collisiontype: if specified, the entity collision type of all children will be tested against this, and non-colliding entities will be skipped."],
"body": ["bool Pick($Vec3_p0, $Vec3_p1, $Pick_pick, $number_radius_=_0.0, $bool_closest=false, $bool_recursive=false, $number_collisiontype=0)"]
},
"Pick": {
"prefix": "Pick",
"description": ["This function performs a pick operation on a single entity.",
\r\n" - p0: the origin of the ray in global coordinates.",
\r\n" - p1: the terminal end of the ray in global coordinates.",
\r\n" - pick: a pick object to contain pick information.",
\r\n" - radius: the radius of the ray. If the radius is greater than 0.0, a slower swept sphere collision will be performed.",
\r\n" - closest: if set to true, the closest intersection will be found, otherwise the operation will return as soon as a single intersection is found.",
\r\n" - recursive: if set to true, the entity's sub-hierarchy will be tested recursively.",
\r\n" - collisiontype: if specified, the entity collision type of all children will be tested against this, and non-colliding entities will be skipped."],
"body": ["bool Pick($Vec3_p0, $Vec3_p1, $Pick_pick, $number_radius_=_0.0, $bool_closest=false, $bool_recursive=false, $number_collisiontype=0)"]
},
"Entity:PlayAnimation": {
"prefix": "Entity:PlayAnimation",
"description": ["This command makes an entity automatically play an animation sequence.",
\r\n" - sequence: the sequence name or index of the animation to be played.",
\r\n" - speed: the speed at which to play the animation.",
\r\n" - blend: a blend amount to modulate the current rotation and position with. This can be used to smoothly transition between two animation sequences, or to blend two animations together.",
\r\n" - mode: set to zero for looping animation or one for one-shot animation. When one-shot animation mode is used, the script or actor function EndAnimation() will be called when the sequence is completed, passing the sequence number in as an argument."],
"body": ["PlayAnimation($string_sequence, $number_speed=1.0f, $number_blendtime=500, $number_mode=0)"]
},
"PlayAnimation": {
"prefix": "PlayAnimation",
"description": ["This command makes an entity automatically play an animation sequence.",
\r\n" - sequence: the sequence name or index of the animation to be played.",
\r\n" - speed: the speed at which to play the animation.",
\r\n" - blend: a blend amount to modulate the current rotation and position with. This can be used to smoothly transition between two animation sequences, or to blend two animations together.",
\r\n" - mode: set to zero for looping animation or one for one-shot animation. When one-shot animation mode is used, the script or actor function EndAnimation() will be called when the sequence is completed, passing the sequence number in as an argument."],
"body": ["PlayAnimation($string_sequence, $number_speed=1.0f, $number_blendtime=500, $number_mode=0)"]
},
"Entity:PlayAnimation ": {
"prefix": "Entity:PlayAnimation ",
"description": ["This command makes an entity automatically play an animation sequence.",
\r\n" - sequence: the sequence name or index of the animation to be played.",
\r\n" - speed: the speed at which to play the animation.",
\r\n" - blend: a blend amount to modulate the current rotation and position with. This can be used to smoothly transition between two animation sequences, or to blend two animations together.",
\r\n" - mode: set to zero for looping animation or one for one-shot animation. When one-shot animation mode is used, the script or actor function EndAnimation() will be called when the sequence is completed, passing the sequence number in as an argument."],
"body": ["PlayAnimation($number_sequence, $number_speed_=_1.0f, $number_blendtime_=_500, $number_mode_=_0)"]
},
"PlayAnimation ": {
"prefix": "PlayAnimation ",
"description": ["This command makes an entity automatically play an animation sequence.",
\r\n" - sequence: the sequence name or index of the animation to be played.",
\r\n" - speed: the speed at which to play the animation.",
\r\n" - blend: a blend amount to modulate the current rotation and position with. This can be used to smoothly transition between two animation sequences, or to blend two animations together.",
\r\n" - mode: set to zero for looping animation or one for one-shot animation. When one-shot animation mode is used, the script or actor function EndAnimation() will be called when the sequence is completed, passing the sequence number in as an argument."],
"body": ["PlayAnimation($number_sequence, $number_speed_=_1.0f, $number_blendtime_=_500, $number_mode_=_0)"]
},
"Entity:Point": {
"prefix": "Entity:Point",
"description": ["This function points an entity at another entity.",
\r\n" - axis: the entity's axis to orient. This may be 0, 1, or 2, for the X, Y, and Z axes, respectively.",
\r\n" - rate: a multiplier to indicate how quickly the entity should orient itself.",
\r\n" - entity: the target entity to point towards.",
\r\n" - roll: the rotation around the specified axis."],
"body": ["Point($Entity_entity, $number_axis_=_2, $number_rate_=_1.0, $number_roll_=_0.0)"]
},
"Point": {
"prefix": "Point",
"description": ["This function points an entity at another entity.",
\r\n" - axis: the entity's axis to orient. This may be 0, 1, or 2, for the X, Y, and Z axes, respectively.",
\r\n" - rate: a multiplier to indicate how quickly the entity should orient itself.",
\r\n" - entity: the target entity to point towards.",
\r\n" - roll: the rotation around the specified axis."],
"body": ["Point($Entity_entity, $number_axis_=_2, $number_rate_=_1.0, $number_roll_=_0.0)"]
},
"Entity:SetAnimationFrame": {
"prefix": "Entity:SetAnimationFrame",
"description": ["Sets an entity to a specific animation frame.",
\r\n" - index: the animation sequence to use.",
\r\n" - recursive: if set to true, the animation will be applied to all the entity's children recursively.",
\r\n" - blend: a blend amount to modulate the current rotation and position with. This can be used to smoothly transition between two animation sequences, or to blend two animations together.",
\r\n" - time: the frame number to set. If a fractional number is used, the animation will be interpolated between the closest two frames.",
\r\n" - name: the name of the animation sequence to use, i.e. 'walk', 'run', 'attack', etc."],
"body": ["SetAnimationFrame($number_time, $number_blend=1.0, $number_index=0, $bool_recursive=true)"]
},
"SetAnimationFrame": {
"prefix": "SetAnimationFrame",
"description": ["Sets an entity to a specific animation frame.",
\r\n" - index: the animation sequence to use.",
\r\n" - recursive: if set to true, the animation will be applied to all the entity's children recursively.",
\r\n" - blend: a blend amount to modulate the current rotation and position with. This can be used to smoothly transition between two animation sequences, or to blend two animations together.",
\r\n" - time: the frame number to set. If a fractional number is used, the animation will be interpolated between the closest two frames.",
\r\n" - name: the name of the animation sequence to use, i.e. 'walk', 'run', 'attack', etc."],
"body": ["SetAnimationFrame($number_time, $number_blend=1.0, $number_index=0, $bool_recursive=true)"]
},
"Entity:SetAnimationFrame ": {
"prefix": "Entity:SetAnimationFrame ",
"description": ["Sets an entity to a specific animation frame.",
\r\n" - index: the animation sequence to use.",
\r\n" - recursive: if set to true, the animation will be applied to all the entity's children recursively.",
\r\n" - blend: a blend amount to modulate the current rotation and position with. This can be used to smoothly transition between two animation sequences, or to blend two animations together.",
\r\n" - time: the frame number to set. If a fractional number is used, the animation will be interpolated between the closest two frames.",
\r\n" - name: the name of the animation sequence to use, i.e. 'walk', 'run', 'attack', etc."],
"body": ["SetAnimationFrame($number_time, $number_blend, $string_name, $bool_recursive=true)"]
},
"SetAnimationFrame ": {
"prefix": "SetAnimationFrame ",
"description": ["Sets an entity to a specific animation frame.",
\r\n" - index: the animation sequence to use.",
\r\n" - recursive: if set to true, the animation will be applied to all the entity's children recursively.",
\r\n" - blend: a blend amount to modulate the current rotation and position with. This can be used to smoothly transition between two animation sequences, or to blend two animations together.",
\r\n" - time: the frame number to set. If a fractional number is used, the animation will be interpolated between the closest two frames.",
\r\n" - name: the name of the animation sequence to use, i.e. 'walk', 'run', 'attack', etc."],
"body": ["SetAnimationFrame($number_time, $number_blend, $string_name, $bool_recursive=true)"]
},
"Entity:SetCollisionType": {
"prefix": "Entity:SetCollisionType",
"description": ["Sets an entity's collision type. Collision types are used to control what kind of objects will register collisions when they come into contact.",
\r\n" - recursive: if set to true, the collision type of all sub-objects will be set as well.",
\r\n" - collisiontype: the entity collision type. This can be any integer between 0 and 99."],
"body": ["SetCollisionType($number_collisiontype, $bool_recursive)"]
},
"SetCollisionType": {
"prefix": "SetCollisionType",
"description": ["Sets an entity's collision type. Collision types are used to control what kind of objects will register collisions when they come into contact.",
\r\n" - recursive: if set to true, the collision type of all sub-objects will be set as well.",
\r\n" - collisiontype: the entity collision type. This can be any integer between 0 and 99."],
"body": ["SetCollisionType($number_collisiontype, $bool_recursive)"]
},
"Entity:SetFriction": {
"prefix": "Entity:SetFriction",
"description": ["Sets an entity's static and kinetic friction.",
\r\n" - recursive: kineticfriction: the resistance that must be continually overcome as an object slides along a surface.",
\r\n" - collisiontype: staticfriction: the resistance that must be overcome when an object at rest begins moving."],
"body": ["SetFriction($number_staticfriction, $number_kineticfriction)"]
},
"SetFriction": {
"prefix": "SetFriction",
"description": ["Sets an entity's static and kinetic friction.",
\r\n" - recursive: kineticfriction: the resistance that must be continually overcome as an object slides along a surface.",
\r\n" - collisiontype: staticfriction: the resistance that must be overcome when an object at rest begins moving."],
"body": ["SetFriction($number_staticfriction, $number_kineticfriction)"]
},
"Entity:SetGravityMode": {
"prefix": "Entity:SetGravityMode",
"description": ["This functions sets the entity gravity mode, which controls whether gravity affects the entity.",
\r\n" - mode: if set to true, the entity will be affected by gravity, otherwise it will not."],
"body": ["SetGravityMode($bool_mode)"]
},
"SetGravityMode": {
"prefix": "SetGravityMode",
"description": ["This functions sets the entity gravity mode, which controls whether gravity affects the entity.",
\r\n" - mode: if set to true, the entity will be affected by gravity, otherwise it will not."],
"body": ["SetGravityMode($bool_mode)"]
},
"Entity:SetInput": {
"prefix": "Entity:SetInput",
"description": ["This functions set the movement parameters of an entity that uses the CharacterPhysics physics mode.        When an entity uses character physics, the physics will control the object's rotation, and calls to Entity::SetRotation() and similar functions will have no effect.",
\r\n" - angle: the angle the character faces.",
\r\n" - move: the forward movement of the character.",
\r\n" - strafe: the horizontal movement of the character.",
\r\n" - jump: the jumping force to apply.",
\r\n" - crouch: set to true for crouching mode (included for future development)",
\r\n" - maxacceleration: the maximum acceleration the character may use to speed up.",
\r\n" - maxdecelleration: the maximum acceleration the character may use to slow down.",
\r\n" - detailed: set this to true for characters that have a camera mounted on them. This will provide more accurate physics, but will also be more expensive to calculate."],
"body": ["SetInput($number_angle, $number_move, $number_strafe=0, $number_jump=0, $bool_crouch_=_false, $float_maxaccel_=_1, $float_maxdecel_=_0.5, $bool_detailed_=_false, $float_maxrotationspeed=5.0)"]
},
"SetInput": {
"prefix": "SetInput",
"description": ["This functions set the movement parameters of an entity that uses the CharacterPhysics physics mode.        When an entity uses character physics, the physics will control the object's rotation, and calls to Entity::SetRotation() and similar functions will have no effect.",
\r\n" - angle: the angle the character faces.",
\r\n" - move: the forward movement of the character.",
\r\n" - strafe: the horizontal movement of the character.",
\r\n" - jump: the jumping force to apply.",
\r\n" - crouch: set to true for crouching mode (included for future development)",
\r\n" - maxacceleration: the maximum acceleration the character may use to speed up.",
\r\n" - maxdecelleration: the maximum acceleration the character may use to slow down.",
\r\n" - detailed: set this to true for characters that have a camera mounted on them. This will provide more accurate physics, but will also be more expensive to calculate."],
"body": ["SetInput($number_angle, $number_move, $number_strafe=0, $number_jump=0, $bool_crouch_=_false, $float_maxaccel_=_1, $float_maxdecel_=_0.5, $bool_detailed_=_false, $float_maxrotationspeed=5.0)"]
},
"Entity:SetIntensity": {
"prefix": "Entity:SetIntensity",
"description": ["This function sets the entity color intensity.",
\r\n" - recursive: if set to true, the entity's children's intensities will be recursively set.",
\r\n" - mode: the color to set. This may be Color::Diffuse or Color::Specular.",
\r\n" - intensity: the intensity to set. The entity color will be multiplied by this value to calculate the final color."],
"body": ["SetIntensity($number_intensity, $number_mode=Color::Diffuse, $bool_recursive=false)"]
},
"SetIntensity": {
"prefix": "SetIntensity",
"description": ["This function sets the entity color intensity.",
\r\n" - recursive: if set to true, the entity's children's intensities will be recursively set.",
\r\n" - mode: the color to set. This may be Color::Diffuse or Color::Specular.",
\r\n" - intensity: the intensity to set. The entity color will be multiplied by this value to calculate the final color."],
"body": ["SetIntensity($number_intensity, $number_mode=Color::Diffuse, $bool_recursive=false)"]
},
"Entity:SetMass": {
"prefix": "Entity:SetMass",
"description": ["Sets an entity's mass.",
\r\n" - mass: the mass to set. When an entity is created, its mass is 0.0.",
\r\n" - cx: center of mass x position.",
\r\n" - cy: center of mass y position.",
\r\n" - cz: center of mass z position.",
\r\n" - ixx: center of mass x position.",
\r\n" - iyy: center of mass y position."],
"body": ["SetMass($number_mass)"]
},
"SetMass": {
"prefix": "SetMass",
"description": ["Sets an entity's mass.",
\r\n" - mass: the mass to set. When an entity is created, its mass is 0.0.",
\r\n" - cx: center of mass x position.",
\r\n" - cy: center of mass y position.",
\r\n" - cz: center of mass z position.",
\r\n" - ixx: center of mass x position.",
\r\n" - iyy: center of mass y position."],
"body": ["SetMass($number_mass)"]
},
"Entity:SetMass ": {
"prefix": "Entity:SetMass ",
"description": ["Sets an entity's mass.",
\r\n" - mass: the mass to set. When an entity is created, its mass is 0.0.",
\r\n" - cx: center of mass x position.",
\r\n" - cy: center of mass y position.",
\r\n" - cz: center of mass z position.",
\r\n" - ixx: center of mass x position.",
\r\n" - iyy: center of mass y position."],
"body": ["SetMass($number_mass, $number_cx, $number_cy, $number_cz, $number_ixx, $number_iyy, $number_izz)"]
},
"SetMass ": {
"prefix": "SetMass ",
"description": ["Sets an entity's mass.",
\r\n" - mass: the mass to set. When an entity is created, its mass is 0.0.",
\r\n" - cx: center of mass x position.",
\r\n" - cy: center of mass y position.",
\r\n" - cz: center of mass z position.",
\r\n" - ixx: center of mass x position.",
\r\n" - iyy: center of mass y position."],
"body": ["SetMass($number_mass, $number_cx, $number_cy, $number_cz, $number_ixx, $number_iyy, $number_izz)"]
},
"Entity:SetMaterial": {
"prefix": "Entity:SetMaterial",
"description": ["This function sets an entity's material.",
\r\n" - recursive: if set to true, the function will be called recursively for all children.",
\r\n" - material: the new material to set. This value may be NULL if no material is to be used."],
"body": ["SetMaterial($Material_material, $bool_recursive_=_false)"]
},
"SetMaterial": {
"prefix": "SetMaterial",
"description": ["This function sets an entity's material.",
\r\n" - recursive: if set to true, the function will be called recursively for all children.",
\r\n" - material: the new material to set. This value may be NULL if no material is to be used."],
"body": ["SetMaterial($Material_material, $bool_recursive_=_false)"]
},
"Entity:SetMatrix": {
"prefix": "Entity:SetMatrix",
"description": ["This function sets an entity's 4x4 matrix and updates the position, rotation, and scale."],
"body": ["SetMatrix($Mat4_matrix, $bool_global_=_true)"]
},
"SetMatrix": {
"prefix": "SetMatrix",
"description": ["This function sets an entity's 4x4 matrix and updates the position, rotation, and scale."],
"body": ["SetMatrix($Mat4_matrix, $bool_global_=_true)"]
},
"Entity:SetOmega": {
"prefix": "Entity:SetOmega",
"description": ["This function sets an entity's angular velocity, without interrupting the physics simulation.",
\r\n" - omega: the new angular velocity."],
"body": ["SetOmega($Vec3_omega, $bool_global_=_true)"]
},
"SetOmega": {
"prefix": "SetOmega",
"description": ["This function sets an entity's angular velocity, without interrupting the physics simulation.",
\r\n" - omega: the new angular velocity."],
"body": ["SetOmega($Vec3_omega, $bool_global_=_true)"]
},
"Entity:SetOmega ": {
"prefix": "Entity:SetOmega ",
"description": ["This function sets an entity's angular velocity, without interrupting the physics simulation.",
\r\n" - omega: the new angular velocity."],
"body": ["SetOmega($number_x, $number_y, $number_z, $bool_global_=_true)"]
},
"SetOmega ": {
"prefix": "SetOmega ",
"description": ["This function sets an entity's angular velocity, without interrupting the physics simulation.",
\r\n" - omega: the new angular velocity."],
"body": ["SetOmega($number_x, $number_y, $number_z, $bool_global_=_true)"]
},
"Entity:SetPhysicsMode": {
"prefix": "Entity:SetPhysicsMode",
"description": ["Sets the entity physics mode.",
\r\n" - mode: the physics mode to set. This value may be Entity::RigidBodyPhysics or Entity::CharacterPhysics."],
"body": ["SetPhysicsMode($number_mode)"]
},
"SetPhysicsMode": {
"prefix": "SetPhysicsMode",
"description": ["Sets the entity physics mode.",
\r\n" - mode: the physics mode to set. This value may be Entity::RigidBodyPhysics or Entity::CharacterPhysics."],
"body": ["SetPhysicsMode($number_mode)"]
},
"Entity:SetNavigationMode": {
"prefix": "Entity:SetNavigationMode",
"description": ["This function sets an entity's pathfinding navigation mode.",
\r\n" - recursive: set to true to recursively call this function for all the entity's children.",
\r\n" - mode: if set to true, the entity will affect character pathfinding, otherwise the entity will be ignored when plotting paths."],
"body": ["SetNavigationMode($bool_mode, $bool_recursive=false)"]
},
"SetNavigationMode": {
"prefix": "SetNavigationMode",
"description": ["This function sets an entity's pathfinding navigation mode.",
\r\n" - recursive: set to true to recursively call this function for all the entity's children.",
\r\n" - mode: if set to true, the entity will affect character pathfinding, otherwise the entity will be ignored when plotting paths."],
"body": ["SetNavigationMode($bool_mode, $bool_recursive=false)"]
},
"Entity:SetOcclusionCullingMode": {
"prefix": "Entity:SetOcclusionCullingMode",
"description": ["This function sets the entity occlusion testing mode."],
"body": ["SetOcclusionCullingMode($bool_occlusionmode)"]
},
"SetOcclusionCullingMode": {
"prefix": "SetOcclusionCullingMode",
"description": ["This function sets the entity occlusion testing mode."],
"body": ["SetOcclusionCullingMode($bool_occlusionmode)"]
},
"Entity:SetPickRadius": {
"prefix": "Entity:SetPickRadius",
"description": ["This function sets an entity's pick radius, for use with the Pick::Sphere pick mode.",
\r\n" - radius: the new pick radius to set."],
"body": ["SetPickRadius($number_radius)"]
},
"SetPickRadius": {
"prefix": "SetPickRadius",
"description": ["This function sets an entity's pick radius, for use with the Pick::Sphere pick mode.",
\r\n" - radius: the new pick radius to set."],
"body": ["SetPickRadius($number_radius)"]
},
"Entity:SetPosition": {
"prefix": "Entity:SetPosition",
"description": ["Sets the position of an entity in 3-dimensional space, using local or global coordinates.",
\r\n" - x: X component of the specified position.",
\r\n" - Y: Y component of the specified position.",
\r\n" - z: Z component of the specified position.",
\r\n" - position: the position to set."],
"body": ["SetPosition($number_x_number_y, $number_z, $bool_global_=_false)"]
},
"SetPosition": {
"prefix": "SetPosition",
"description": ["Sets the position of an entity in 3-dimensional space, using local or global coordinates.",
\r\n" - x: X component of the specified position.",
\r\n" - Y: Y component of the specified position.",
\r\n" - z: Z component of the specified position.",
\r\n" - position: the position to set."],
"body": ["SetPosition($number_x_number_y, $number_z, $bool_global_=_false)"]
},
"Entity:SetPosition ": {
"prefix": "Entity:SetPosition ",
"description": ["Sets the position of an entity in 3-dimensional space, using local or global coordinates.",
\r\n" - x: X component of the specified position.",
\r\n" - Y: Y component of the specified position.",
\r\n" - z: Z component of the specified position.",
\r\n" - position: the position to set."],
"body": ["SetPosition($Vec3_position, $bool_global_=_false)"]
},
"SetPosition ": {
"prefix": "SetPosition ",
"description": ["Sets the position of an entity in 3-dimensional space, using local or global coordinates.",
\r\n" - x: X component of the specified position.",
\r\n" - Y: Y component of the specified position.",
\r\n" - z: Z component of the specified position.",
\r\n" - position: the position to set."],
"body": ["SetPosition($Vec3_position, $bool_global_=_false)"]
},
"Entity:SetShadowMode": {
"prefix": "Entity:SetShadowMode",
"description": ["This functions sets the entity shadow mode, which controls whether the entity casts shadows.",
\r\n" - mode: this value may be 0 or a combination of the Light::None, Light::Static, Light::Dynamic, and Light::Buffered flags."],
"body": ["SetShadowMode($number_mode)"]
},
"SetShadowMode": {
"prefix": "SetShadowMode",
"description": ["This functions sets the entity shadow mode, which controls whether the entity casts shadows.",
\r\n" - mode: this value may be 0 or a combination of the Light::None, Light::Static, Light::Dynamic, and Light::Buffered flags."],
"body": ["SetShadowMode($number_mode)"]
},
"Entity:SetShape": {
"prefix": "Entity:SetShape",
"description": ["This function sets the physics shape of an entity.",
\r\n" - shape: the new shape to set."],
"body": ["SetShape($Shape_shape)"]
},
"SetShape": {
"prefix": "SetShape",
"description": ["This function sets the physics shape of an entity.",
\r\n" - shape: the new shape to set."],
"body": ["SetShape($Shape_shape)"]
},
"Entity:SetShape ": {
"prefix": "Entity:SetShape ",
"description": ["This function sets the physics shape of an entity.",
\r\n" - shape: the new shape to set."],
"body": ["SetShape($Shape_shape, $Mat4_mat)"]
},
"SetShape ": {
"prefix": "SetShape ",
"description": ["This function sets the physics shape of an entity.",
\r\n" - shape: the new shape to set."],
"body": ["SetShape($Shape_shape, $Mat4_mat)"]
},
"Entity:SetSweptCollisionMode": {
"prefix": "Entity:SetSweptCollisionMode",
"description": ["This function sets the swept collision mode of an entity. Entities with swept collision enabled will have more accurate collisions that are more computationally expensive to process. Use this for small and thin objects if you have problems with them going through other entities.",
\r\n" - mode: if set to true swept collision will be enabled, otherwise it will be disabled."],
"body": ["SetSweptCollisionMode($bool_mode)"]
},
"SetSweptCollisionMode": {
"prefix": "SetSweptCollisionMode",
"description": ["This function sets the swept collision mode of an entity. Entities with swept collision enabled will have more accurate collisions that are more computationally expensive to process. Use this for small and thin objects if you have problems with them going through other entities.",
\r\n" - mode: if set to true swept collision will be enabled, otherwise it will be disabled."],
"body": ["SetSweptCollisionMode($bool_mode)"]
},
"Entity:SetVelocity": {
"prefix": "Entity:SetVelocity",
"description": ["This function sets an entity's velocity, without interrupting the physics simulation.",
\r\n" - velocity: the new velocity vector."],
"body": ["SetVelocity($Vec3_velocity, $bool_global_=_true)"]
},
"SetVelocity": {
"prefix": "SetVelocity",
"description": ["This function sets an entity's velocity, without interrupting the physics simulation.",
\r\n" - velocity: the new velocity vector."],
"body": ["SetVelocity($Vec3_velocity, $bool_global_=_true)"]
},
"Entity:SetVelocity ": {
"prefix": "Entity:SetVelocity ",
"description": ["This function sets an entity's velocity, without interrupting the physics simulation.",
\r\n" - velocity: the new velocity vector."],
"body": ["SetVelocity($number_x, $number_y, $number_z, $bool_global_=_true)"]
},
"SetVelocity ": {
"prefix": "SetVelocity ",
"description": ["This function sets an entity's velocity, without interrupting the physics simulation.",
\r\n" - velocity: the new velocity vector."],
"body": ["SetVelocity($number_x, $number_y, $number_z, $bool_global_=_true)"]
},
"Entity:Translate": {
"prefix": "Entity:Translate",
"description": ["Moves an entity along its parent axes in local or global space.",
\r\n" - x: the X component of the translation to apply.",
\r\n" - Y: the Y component of the translation to apply.",
\r\n" - z: the Z component of the translation to apply."],
"body": ["Translate($number_x, $number_y, $number_z, $bool_global=false)"]
},
"Translate": {
"prefix": "Translate",
"description": ["Moves an entity along its parent axes in local or global space.",
\r\n" - x: the X component of the translation to apply.",
\r\n" - Y: the Y component of the translation to apply.",
\r\n" - z: the Z component of the translation to apply."],
"body": ["Translate($number_x, $number_y, $number_z, $bool_global=false)"]
},
"Entity:Turn": {
"prefix": "Entity:Turn",
"description": ["Turns an entity by the specified euler rotation in local or global space. This function is more accurate than simply adding units to the rotation axes and will avoid problems with Gimbal lock.",
\r\n" - pitch: the X component of the rotation to apply..",
\r\n" - yaw: the Y component of the rotation to apply.",
\r\n" - roll: the Z component of the rotation to apply."],
"body": ["Turn($number_pitch, $number_yaw, $number_roll, $bool_global=false);"]
},
"Turn": {
"prefix": "Turn",
"description": ["Turns an entity by the specified euler rotation in local or global space. This function is more accurate than simply adding units to the rotation axes and will avoid problems with Gimbal lock.",
\r\n" - pitch: the X component of the rotation to apply..",
\r\n" - yaw: the Y component of the rotation to apply.",
\r\n" - roll: the Z component of the rotation to apply."],
"body": ["Turn($number_pitch, $number_yaw, $number_roll, $bool_global=false);"]
}
}